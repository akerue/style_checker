require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE begin NEWLINE SPACE SPACE require SPACE LITERALNEWLINE rescue SPACE LoadError NEWLINE else NEWLINE SPACE SPACE require SPACE LITERALNEWLINE end NEWLINE NEWLINE module SPACE BarbequeClient NEWLINE SPACE SPACE class SPACE << SPACE self NEWLINE SPACE SPACE SPACE SPACE def SPACE configure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE yield SPACE config NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE config NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @config SPACE || = SPACE Configuration . new NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE enqueue ( LITERAL: , SPACE LITERAL: , SPACE LITERAL: SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE client . create_execution ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE job , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE queue , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . body NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE status ( LITERAL: ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE client . execution ( LITERAL: SPACE message_id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . body . status NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE client NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @client SPACE || = SPACE Client . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE config . application , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE config . default_queue , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE config . endpoint , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE ActiveJob NEWLINE SPACE SPACE module SPACE QueueAdapters NEWLINE SPACE SPACE SPACE SPACE class SPACE BarbequeAdapter NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE enqueue ( job ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE BarbequeAdapter . enqueue ( job ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE << SPACE self NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE enqueue ( job ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution SPACE = SPACE BarbequeClient . enqueue ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE job . class . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE ActiveJob :: Arguments . serialize ( job . arguments ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE job . queue_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job . job_id SPACE = SPACE execution . message_id NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE enqueue_at ( job , SPACE timestamp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE NotImplementedError . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE module SPACE BarbequeClient NEWLINE SPACE SPACE class SPACE Client NEWLINE SPACE SPACE SPACE SPACE def SPACE initialize ( LITERAL: , SPACE LITERAL: , SPACE LITERAL: ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @application SPACE SPACE SPACE = SPACE application NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @default_queue SPACE = SPACE default_queue NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @endpoint SPACE SPACE SPACE SPACE SPACE SPACE = SPACE endpoint NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE create_execution ( LITERAL: , SPACE LITERAL: , SPACE LITERAL: SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE params SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @application , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE queue SPACE || SPACE @default_queue , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE result SPACE = SPACE garage_client . post ( LITERAL, SPACE params ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE result . response NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE retry_execution ( LITERAL: , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE result SPACE = SPACE garage_client . post ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALmessage_id LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE delay_seconds , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE result . response NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE execution ( LITERAL: , SPACE LITERAL: SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE params SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE fields NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE params [ LITERAL] SPACE = SPACE fields NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE result SPACE = SPACE garage_client . get ( LITERALLITERALLITERALmessage_id LITERALLITERAL, SPACE params ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE result . response NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE garage_client NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @garage_client SPACE || = SPACE GarageClient :: Client . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @endpoint , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE BarbequeClient NEWLINE SPACE SPACE class SPACE Configuration NEWLINE SPACE SPACE SPACE SPACE def SPACE initialize NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @default_queue SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE attr_accessor SPACE * % i [ NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE application NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE default_queue NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE endpoint NEWLINE SPACE SPACE SPACE SPACE ] NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE BarbequeClient NEWLINE SPACE SPACE class SPACE Executor NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE initialize ( LITERAL: , SPACE LITERAL: , SPACE LITERAL: , SPACE LITERAL: ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @job SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE job NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @message SPACE SPACE SPACE SPACE = SPACE JSON . load ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @message_id SPACE = SPACE message_id NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @queue_name SPACE = SPACE queue_name NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE run NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ActiveJob :: Base . execute ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE SPACE = > SPACE @job , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE SPACE SPACE SPACE SPACE = > SPACE @message_id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE @queue_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE SPACE = > SPACE @message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE BarbequeClient NEWLINE SPACE SPACE class SPACE ExponentialRetry NEWLINE SPACE SPACE SPACE SPACE MAX_DELAY_SECONDS SPACE = SPACE ( ENV [ LITERAL] SPACE || SPACE LITERAL) . to_i NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . exponential_backoff ( count ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ( count SPACE ** SPACE LITERAL) SPACE + SPACE LITERALSPACE + SPACE ( rand ( LITERAL) SPACE * SPACE ( count SPACE + SPACE LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE initialize ( count ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @count SPACE = SPACE count NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE retry ( message_id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE BarbequeClient . client . retry_execution ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE message_id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE [ delay_seconds , SPACE MAX_DELAY_SECONDS ] . min , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE delay_seconds NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ExponentialRetry . exponential_backoff ( @count ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
ActiveSupport . on_load ( LITERAL) SPACE do NEWLINE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE require SPACE LITERALNEWLINE end NEWLINE NEWLINE module SPACE BarbequeClient NEWLINE SPACE SPACE class SPACE Railtie SPACE < SPACE Rails :: Railtie NEWLINE SPACE SPACE SPACE SPACE rake_tasks SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE load SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE BarbequeClient NEWLINE SPACE SPACE module SPACE Retryable NEWLINE SPACE SPACE SPACE SPACE extend SPACE ActiveSupport :: Concern NEWLINE NEWLINE SPACE SPACE SPACE SPACE class SPACE EmptyRetryCount SPACE < SPACE StandardError ; SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE module SPACE ClassMethods NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE barbeque_retry ( LITERAL: , SPACE LITERAL: SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exceptions SPACE = SPACE Array . wrap ( retryable_exceptions SPACE || SPACE StandardError ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rescue_from SPACE * exceptions SPACE do SPACE | exception | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE ENV [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE EmptyRetryCount . new ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE count SPACE = SPACE ENV [ LITERAL] . to_i NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE count SPACE < SPACE limit NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ExponentialRetry . new ( count ) . retry ( self . job_id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE exception NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE module SPACE BarbequeClient NEWLINE SPACE SPACE NEWLINE SPACE SPACE class SPACE Runner SPACE < SPACE Sinatra :: Base NEWLINE SPACE SPACE SPACE SPACE set SPACE LITERAL, SPACE ENV [ LITERAL] SPACE || SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE class SPACE << SPACE self NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE messages NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @messages SPACE || = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE post SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE params SPACE = SPACE JSON . parse ( request . body . read ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE message_id SPACE = SPACE SecureRandom . uuid NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE pid SPACE = SPACE spawn ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALmessage_id LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALparams [ LITERAL] LITERALLITERAL, SPACE LITERALLITERALLITERALparams [ LITERAL] LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE in : SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Runner . messages [ message_id ] SPACE = SPACE Process . detach ( pid ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE content_type SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE { SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE message_id SPACE } . to_json NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE post SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE params SPACE = SPACE JSON . parse ( request . body . read ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE message_id SPACE = SPACE SecureRandom . uuid NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE pid SPACE = SPACE spawn ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALmessage_id LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALparams [ LITERAL] LITERALLITERAL, SPACE LITERALLITERALLITERALparams [ LITERAL] . to_json LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE in : SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Runner . messages [ message_id ] SPACE = SPACE Process . detach ( pid ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE content_type SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE { SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE message_id SPACE } . to_json NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE get SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE message_id SPACE = SPACE params [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE wait_thr SPACE = SPACE Runner . messages [ message_id ] NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE status SPACE = SPACE if SPACE wait_thr . nil? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE wait_thr . alive? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE wait_thr . value . exitstatus SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE content_type SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE { SPACE LITERAL: SPACE status , SPACE LITERAL: SPACE message_id SPACE } . to_json NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE post SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE puts SPACE LITERALLITERALLITERALparams [ LITERAL] LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE content_type SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE { SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE SecureRandom . uuid SPACE } . to_json NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE BarbequeClient NEWLINE SPACE SPACE VERSION SPACE = SPACE LITERALNEWLINE end NEWLINE 
describe SPACE BarbequeClient SPACE do NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE BarbequeClient . configure SPACE do SPACE | c | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE c . application SPACE SPACE SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE c . default_queue SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE c . endpoint SPACE SPACE SPACE SPACE SPACE SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } . to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE % i [ NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE application NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE default_queue NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE endpoint NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ] . map SPACE { SPACE | attribute | SPACE BarbequeClient . config . public_send ( attribute ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } . from ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ nil , SPACE LITERAL, SPACE nil ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) . to ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
$LOAD_PATH . unshift SPACE File . expand_path ( LITERAL, SPACE __FILE__ ) NEWLINE require SPACE LITERALNEWLINE NEWLINE ENV [ LITERAL] SPACE || = SPACE LITERALNEWLINE require SPACE File . expand_path ( LITERAL, SPACE __dir__ ) NEWLINE require SPACE LITERALNEWLINE NEWLINE RSpec . configure SPACE do SPACE | config | NEWLINE SPACE SPACE config . around SPACE do SPACE | e | NEWLINE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE original_env SPACE = SPACE ENV . to_h . dup NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE e . run NEWLINE SPACE SPACE SPACE SPACE ensure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ENV . replace ( original_env ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
describe SPACE BarbequeClient :: Client SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE described_class . new ( LITERAL: SPACE application , SPACE LITERAL: SPACE default_queue , SPACE LITERAL: SPACE endpoint ) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE double ( LITERAL) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE double ( LITERAL, SPACE LITERAL: SPACE double ( LITERAL) ) SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE allow ( GarageClient :: Client ) . to SPACE receive ( LITERAL) . and_return ( garage_client ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE { SPACE LITERAL: SPACE LITERALSPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( garage_client ) . to SPACE receive ( LITERAL) . with ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE application , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE default_queue , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) . and_return ( result ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . create_execution ( LITERAL: SPACE job , SPACE LITERAL: SPACE message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( garage_client ) . to SPACE receive ( LITERAL) . with ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE application , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE queue , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) . and_return ( result ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . create_execution ( LITERAL: SPACE job , SPACE LITERAL: SPACE message , SPACE LITERAL: SPACE queue ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE allow ( garage_client ) . to SPACE receive ( LITERAL) . and_raise ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient :: BadRequest . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . create_execution ( LITERAL: SPACE nil , SPACE LITERAL: SPACE message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . to SPACE raise_error ( GarageClient :: Error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE SecureRandom . uuid SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE double ( LITERAL, SPACE LITERAL: SPACE double ( LITERAL) ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( garage_client ) . to SPACE receive ( LITERAL) . with ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALmessage_id LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) . and_return ( result ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . retry_execution ( LITERAL: SPACE message_id ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( garage_client ) . to SPACE receive ( LITERAL) . with ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALmessage_id LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE delay_seconds , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) . and_return ( result ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . retry_execution ( LITERAL: SPACE message_id , SPACE LITERAL: SPACE delay_seconds ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE allow ( garage_client ) . to SPACE receive ( LITERAL) . and_raise ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient :: BadRequest . new ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . retry_execution ( LITERAL: SPACE message_id , SPACE LITERAL: SPACE delay_seconds ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . to SPACE raise_error ( GarageClient :: Error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE SecureRandom . uuid SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE double ( LITERAL, SPACE LITERAL: SPACE response ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE double ( LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE message_id , SPACE LITERAL: SPACE LITERALSPACE } ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE allow ( garage_client ) . to SPACE receive ( LITERAL) . with ( LITERALLITERALLITERALmessage_id LITERALLITERAL, SPACE { } ) . and_return ( result ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( client . execution ( LITERAL: SPACE message_id ) ) . to SPACE eq ( response ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE allow ( garage_client ) . to SPACE receive ( LITERAL) . and_raise ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient :: BadRequest . new ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . execution ( LITERAL: SPACE message_id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . to SPACE raise_error ( GarageClient :: Error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
describe SPACE BarbequeClient :: Executor SPACE do NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE SecureRandom . uuid SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE [ LITERAL, SPACE LITERAL] SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE BarbequeClient :: Executor . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE JSON . dump ( args ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE queue_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE TestJob . new SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE allow ( TestJob ) . to SPACE receive ( LITERAL) . and_return ( test_job ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( test_job ) . to SPACE receive ( LITERAL) . with ( * args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE executor . run NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( test_job . job_id ) . to SPACE eq ( message_id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( test_job . queue_name ) . to SPACE eq ( queue_name ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
describe SPACE BarbequeClient :: ExponentialRetry SPACE do NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE rand ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE double ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE SecureRandom . uuid SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE allow ( BarbequeClient ) . to SPACE receive ( LITERAL) . and_return ( client ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE allow ( BarbequeClient :: ExponentialRetry ) . to SPACE receive ( LITERAL) . with ( LITERAL) . and_return ( fixed_rand_30 ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( client ) . to SPACE receive ( LITERAL) . with ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE message_id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE BarbequeClient :: ExponentialRetry . exponential_backoff ( count ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE BarbequeClient :: ExponentialRetry . new ( count ) . retry ( message_id ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE ApplicationController SPACE < SPACE ActionController :: Base NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE protect_from_forgery SPACE LITERAL: SPACE LITERALNEWLINE end NEWLINE 
module SPACE ApplicationHelper NEWLINE end NEWLINE 
class SPACE TestJob SPACE < SPACE ActiveJob :: Base NEWLINE SPACE SPACE include SPACE BarbequeClient :: Retryable NEWLINE NEWLINE SPACE SPACE queue_as SPACE LITERALNEWLINE SPACE SPACE barbeque_retry SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE Timeout :: Error NEWLINE NEWLINE SPACE SPACE def SPACE perform ( * args ) NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE File . expand_path ( LITERAL, SPACE __FILE__ ) NEWLINE NEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE NEWLINE NEWLINE NEWLINE Bundler . require ( * Rails . groups ) NEWLINE NEWLINE module SPACE Dummy NEWLINE SPACE SPACE class SPACE Application SPACE < SPACE Rails :: Application NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
ENV [ LITERAL] SPACE || = SPACE File . expand_path ( LITERAL, SPACE __FILE__ ) NEWLINE NEWLINE require SPACE LITERALSPACE NEWLINE 
NEWLINE require SPACE File . expand_path ( LITERAL, SPACE __FILE__ ) NEWLINE NEWLINE NEWLINE Rails . application . initialize! NEWLINE 
Rails . application . routes . draw SPACE doend NEWLINE 
Rails . application . configure SPACE do NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . cache_classes SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . eager_load SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . consider_all_requests_local SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE true NEWLINE SPACE SPACE config . action_controller . perform_caching SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_mailer . raise_delivery_errors SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_support . deprecation SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . debug SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . digest SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . raise_runtime_errors SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE end NEWLINE 
Rails . application . configure SPACE do NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . cache_classes SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . eager_load SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . consider_all_requests_local SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE false NEWLINE SPACE SPACE config . action_controller . perform_caching SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . serve_static_files SPACE = SPACE ENV [ LITERAL] . present? NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . js_compressor SPACE = SPACE LITERALNEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . compile SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . digest SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . log_level SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . i18n . fallbacks SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_support . deprecation SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . log_formatter SPACE = SPACE :: Logger :: Formatter . new NEWLINE end NEWLINE 
Rails . application . configure SPACE do NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . cache_classes SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . eager_load SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . serve_static_files SPACE SPACE SPACE = SPACE true NEWLINE SPACE SPACE config . static_cache_control SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . consider_all_requests_local SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE true NEWLINE SPACE SPACE config . action_controller . perform_caching SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_dispatch . show_exceptions SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_controller . allow_forgery_protection SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_mailer . delivery_method SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_support . test_order SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_support . deprecation SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE end NEWLINE 
NEWLINE NEWLINE NEWLINE Rails . application . config . assets . version SPACE = SPACE LITERALNEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
Rails . application . config . active_job . queue_adapter SPACE = SPACE LITERALNEWLINE 
NEWLINE NEWLINE Rails . application . config . action_dispatch . cookies_serializer SPACE = SPACE LITERALNEWLINE 
NEWLINE NEWLINE NEWLINE Rails . application . config . filter_parameters SPACE += SPACE [ LITERAL] NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE Rails . application . config . session_store SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE ActiveSupport . on_load ( LITERAL) SPACE do NEWLINE SPACE SPACE wrap_parameters SPACE format : SPACE [ LITERAL] SPACE if SPACE respond_to? ( LITERAL) NEWLINE end NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
describe SPACE TestJob SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE SPACE SPACE SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE BarbequeClient :: Configuration . new . tap SPACE do SPACE | c | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE c . application SPACE = SPACE application NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE c . endpoint SPACE SPACE SPACE SPACE = SPACE endpoint NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE double ( LITERAL, SPACE LITERAL: SPACE Hashie :: Mash . new ( LITERAL: SPACE message_id ) ) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE double ( LITERAL) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE [ LITERAL] SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE SecureRandom . uuid SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE allow ( BarbequeClient ) . to SPACE receive ( LITERAL) . and_return ( client ) NEWLINE SPACE SPACE SPACE SPACE allow ( BarbequeClient ) . to SPACE receive ( LITERAL) . and_return ( config ) NEWLINE SPACE SPACE SPACE SPACE allow ( client ) . to SPACE receive ( LITERAL) . and_return ( response ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( client ) . to SPACE receive ( LITERAL) . with ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE args , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) . and_return ( response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE TestJob . perform_later ( * args ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE job SPACE = SPACE TestJob . perform_later ( * args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( job . job_id ) . to SPACE eq ( message_id ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE TestJob . set ( LITERAL: SPACE LITERAL. week ) . perform_later NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . to SPACE raise_error ( NotImplementedError ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE TestJob . new . tap SPACE { SPACE | job | SPACE job . job_id SPACE = SPACE message_id SPACE } SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE BarbequeClient :: ExponentialRetry . new ( retry_count ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE SecureRandom . uuid SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE allow ( TestJob ) . to SPACE receive ( LITERAL) . and_return ( test_job ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE allow ( test_job ) . to SPACE receive ( LITERAL) . and_raise ( error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE allow ( BarbequeClient :: ExponentialRetry ) . to SPACE receive ( LITERAL) . with ( retry_count ) . and_return ( exponential_retry ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ENV [ LITERAL] SPACE = SPACE retry_count . to_s NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Timeout :: Error SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( exponential_retry ) . to SPACE receive ( LITERAL) . with ( message_id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE TestJob . perform_now NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE TestJob . perform_now SPACE } . to SPACE raise_error ( error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE NotImplementedError SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE TestJob . perform_now SPACE } . to SPACE raise_error ( error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALLITERALLITERALNEWLINE NEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE module SPACE Blouson NEWLINE SPACE SPACE SENSITIVE_PARAMS_REGEXP SPACE = SPACE TolerantRegexp . new ( LITERAL) . freeze NEWLINE SPACE SPACE SENSITIVE_TABLE_REGEXP SPACE = SPACE LITERALLITERALLITERAL. freeze NEWLINE SPACE SPACE FILTERED SPACE = SPACE LITERAL. freeze NEWLINE end NEWLINE 
module SPACE Blouson NEWLINE SPACE SPACE class SPACE RavenParameterFilterProcessor NEWLINE SPACE SPACE SPACE SPACE def SPACE self . create ( filters , SPACE header_filters ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Class . new ( Raven :: Processor ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @filters SPACE = SPACE filters NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @header_filters SPACE = SPACE header_filters NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . filters NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @filters NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . header_filters NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @header_filters NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( client SPACE = SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @parameter_filter SPACE = SPACE ActionDispatch :: Http :: ParameterFilter . new ( self . class . filters ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE process_query_string ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE process_request_body ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE process_request_header ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE process_cookie ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ensure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE value NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process_request_body ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE value [ LITERAL] SPACE && SPACE value [ LITERAL] [ LITERAL] . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE data SPACE = SPACE value [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE data . is_a? ( String ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE data SPACE = SPACE JSON . parse ( data ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE value [ LITERAL] [ LITERAL] SPACE = SPACE JSON . dump ( @parameter_filter . filter ( data ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE JSON :: ParserError SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE value [ LITERAL] [ LITERAL] SPACE = SPACE e . message NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE value [ LITERAL] [ LITERAL] SPACE = SPACE @parameter_filter . filter ( data ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process_query_string ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE value [ LITERAL] SPACE && SPACE value [ LITERAL] [ LITERAL] . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE query SPACE SPACE SPACE SPACE = SPACE Rack :: Utils . parse_query ( value [ LITERAL] [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE filtered SPACE = SPACE @parameter_filter . filter ( query ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE value [ LITERAL] [ LITERAL] SPACE = SPACE Rack :: Utils . build_query ( filtered ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process_request_header ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE value [ LITERAL] SPACE && SPACE value [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE headers SPACE = SPACE value [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE headers . each_key SPACE do SPACE | k | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE self . class . header_filters . include? ( k . downcase ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE headers [ k ] SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process_cookie ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE value [ LITERAL] SPACE && SPACE value [ LITERAL] [ LITERAL] SPACE && SPACE value [ LITERAL] [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE cookies SPACE SPACE = SPACE Hash [ value [ LITERAL] [ LITERAL] [ LITERAL] . split ( LITERAL) . map SPACE { SPACE | pair | SPACE pair . split ( LITERAL, SPACE LITERAL) SPACE } ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE filtered SPACE = SPACE @parameter_filter . filter ( cookies ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE value [ LITERAL] [ LITERAL] [ LITERAL] SPACE = SPACE filtered . map SPACE { SPACE | pair | SPACE pair . join ( LITERAL) SPACE } . join ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Blouson NEWLINE SPACE SPACE class SPACE SensitiveParamsSilencer NEWLINE SPACE SPACE SPACE SPACE class SPACE << SPACE self NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE around ( controller ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE include_sensitive_data? ( controller ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE old_level SPACE = SPACE ActiveRecord :: Base . logger . level NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActiveRecord :: Base . logger . level SPACE = SPACE Logger :: INFO NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Rails . logger . info SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE yield NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ensure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActiveRecord :: Base . logger . level SPACE = SPACE old_level NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE yield NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE include_sensitive_data? ( controller ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE nested_params_keys ( controller . params ) . any? SPACE { SPACE | key , SPACE value | SPACE Blouson :: SENSITIVE_PARAMS_REGEXP SPACE === SPACE key SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE nested_params_keys ( params ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE params . respond_to? ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE params SPACE = SPACE params . to_unsafe_h NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE user_params SPACE = SPACE params . reject SPACE { SPACE | key , SPACE value | SPACE LITERALSPACE == SPACE key SPACE || SPACE LITERALSPACE == SPACE key SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE user_params . inject ( [ ] ) SPACE do SPACE | keys , SPACE pair | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE keys SPACE << SPACE pair . first NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE keys SPACE += SPACE pair . last . keys SPACE if SPACE pair . last . kind_of? SPACE Hash NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE keys NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Blouson NEWLINE SPACE SPACE module SPACE SensitiveQueryFilter NEWLINE SPACE SPACE SPACE SPACE QUOTED_WORD_REGEXP SPACE = SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . contain_sensitive_query? ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Blouson :: SENSITIVE_TABLE_REGEXP SPACE === SPACE message NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . filter_sensitive_words ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE message . gsub ( QUOTED_WORD_REGEXP , SPACE LITERALLITERALLITERALBlouson :: FILTERED LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE module SPACE StatementInvalidErrorFilter NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( message , SPACE original_exception SPACE = SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE SensitiveQueryFilter . contain_sensitive_query? ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE SensitiveQueryFilter . filter_sensitive_words ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE defined? ( Mysql2 :: Error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE original_exception . is_a? ( Mysql2 :: Error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE original_exception . extend ( Mysql2Filter ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE $! . is_a? ( Mysql2 :: Error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE $! . extend ( Mysql2Filter ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE super ( message , SPACE original_exception ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE module SPACE Mysql2Filter NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE message NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SensitiveQueryFilter . filter_sensitive_words ( super ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Blouson NEWLINE SPACE SPACE class SPACE SensitiveTableQueryLogSilencer SPACE < SPACE Arproxy :: Base NEWLINE SPACE SPACE SPACE SPACE def SPACE execute ( sql , SPACE name = nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE Rails . logger . level SPACE != SPACE Logger :: DEBUG SPACE || SPACE ! ( Blouson :: SENSITIVE_TABLE_REGEXP SPACE === SPACE sql ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE super ( sql , SPACE name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActiveRecord :: Base . logger . level SPACE = SPACE Logger :: INFO NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Rails . logger . info SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE super ( sql , SPACE name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ensure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActiveRecord :: Base . logger . level SPACE = SPACE Logger :: DEBUG NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Blouson NEWLINE SPACE SPACE class SPACE TolerantRegexp SPACE < SPACE Regexp NEWLINE SPACE SPACE SPACE SPACE def SPACE =~ ( str ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE str . respond_to? ( LITERAL) SPACE && SPACE ! str . valid_encoding? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE super NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Blouson NEWLINE SPACE SPACE VERSION SPACE = SPACE LITERALLITERALLITERALNEWLINE end NEWLINE 
require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE database_config SPACE = SPACE { SPACE LITERALSPACE SPACE = > SPACE LITERAL, SPACE LITERALSPACE = > SPACE LITERALSPACE } NEWLINE NEWLINE class SPACE SecureUser SPACE < SPACE ActiveRecord :: Base NEWLINE end NEWLINE NEWLINE class SPACE User SPACE < SPACE ActiveRecord :: Base NEWLINE end NEWLINE NEWLINE RSpec . configure SPACE do SPACE | config | NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . example_status_persistence_file_path SPACE = SPACE LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE config . expect_with SPACE LITERALSPACE do SPACE | c | NEWLINE SPACE SPACE SPACE SPACE c . syntax SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE c . include_chain_clauses_in_custom_matcher_descriptions SPACE = SPACE true NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE config . mock_with SPACE LITERALSPACE do SPACE | mocks | NEWLINE SPACE SPACE SPACE SPACE mocks . verify_partial_doubles SPACE = SPACE true NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE config . filter_run SPACE LITERALNEWLINE SPACE SPACE config . run_all_when_everything_filtered SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE config . disable_monkey_patching! NEWLINE NEWLINE SPACE SPACE config . warnings SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE if SPACE config . files_to_run . one? NEWLINE SPACE SPACE SPACE SPACE config . default_formatter SPACE = SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE config . order SPACE = SPACE LITERALNEWLINE SPACE SPACE Kernel . srand SPACE config . seed NEWLINE NEWLINE SPACE SPACE config . before ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE ActiveRecord :: Tasks :: DatabaseTasks . create ( database_config ) NEWLINE SPACE SPACE SPACE SPACE ActiveRecord :: Base . establish_connection ( database_config ) NEWLINE SPACE SPACE SPACE SPACE ActiveRecord :: Base . connection . execute ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE <<- LITERALLITERALLITERAL. strip_heredoc NEWLINE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE ActiveRecord :: Base . connection . execute ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE <<- LITERALLITERALLITERAL. strip_heredoc NEWLINE LITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE config . after ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE ActiveRecord :: Tasks :: DatabaseTasks . drop ( database_config ) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE Blouson :: SensitiveQueryFilter SPACE do NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE error NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE model_class . where ( condition ) . first NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE dummy_error SPACE = SPACE Class . new ( ActiveRecord :: StatementInvalid ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE prepend SPACE Blouson :: SensitiveQueryFilter :: StatementInvalidErrorFilter NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_const ( LITERAL, SPACE dummy_error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE SecureUser SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE { SPACE LITERAL: SPACE email SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE model_class . where ( condition ) . first SPACE } . to SPACE raise_error ( LITERALLITERALLITERALLITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . not_to SPACE include ( email ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . not_to SPACE include ( email ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . inspect ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE error SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActiveRecord :: Base . connection . execute ( LITERALLITERALLITERALemail LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE error SPACE = SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . not_to SPACE include ( email ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALLITERALLITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . not_to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE { SPACE LITERAL: SPACE email , SPACE LITERAL: SPACE email SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . not_to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE dummy_error SPACE = SPACE Class . new ( ActiveRecord :: RecordNotUnique ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE prepend SPACE Blouson :: SensitiveQueryFilter :: StatementInvalidErrorFilter NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_const ( LITERAL, SPACE dummy_error ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE model_class . create! ( LITERAL: SPACE email , SPACE LITERAL: SPACE email ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE after SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE model_class . delete_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE model_class . create! ( LITERAL: SPACE email , SPACE LITERAL: SPACE email ) SPACE } . to SPACE raise_error SPACE { SPACE | e | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( e ) . to SPACE be_a ( ActiveRecord :: RecordNotUnique ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( e . message ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( e . message ) . to_not SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE model_class . create! ( LITERAL: SPACE email , SPACE LITERAL: SPACE email ) SPACE } . to SPACE raise_error SPACE { SPACE | e | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE mysql2_error SPACE = SPACE e . cause NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mysql2_error ) . to SPACE be_a ( Mysql2 :: Error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mysql2_error . message ) . to_not SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE User SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE { SPACE LITERAL: SPACE name SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE model_class . where ( condition ) . first SPACE } . to SPACE raise_error ( LITERALLITERALLITERALname LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . not_to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . to_s ) . to SPACE include ( name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( error . inspect ) . not_to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE dummy_error SPACE = SPACE Class . new ( ActiveRecord :: RecordNotUnique ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE prepend SPACE Blouson :: SensitiveQueryFilter :: StatementInvalidErrorFilter NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_const ( LITERAL, SPACE dummy_error ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE model_class . create! ( name : SPACE name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE after SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE model_class . delete_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE model_class . create! ( name : SPACE name ) SPACE } . to SPACE raise_error SPACE { SPACE | e | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( e ) . to SPACE be_a ( ActiveRecord :: RecordNotUnique ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( e . message ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( e . message ) . to SPACE include ( name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( e . message ) . to_not SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE model_class . create! ( name : SPACE name ) SPACE } . to SPACE raise_error SPACE { SPACE | e | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE mysql2_error SPACE = SPACE e . cause NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mysql2_error ) . to SPACE be_a ( Mysql2 :: Error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( e . message ) . to SPACE include ( name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( e . message ) . to_not SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE module SPACE Dokumi NEWLINE SPACE SPACE BASE_DIRECTORY SPACE = SPACE Pathname . new ( __FILE__ ) . dirname . parent . realpath NEWLINE end NEWLINE NEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE NEWLINE SPACE SPACE module SPACE Tool SPACE end SPACE NEWLINE SPACE SPACE module SPACE Custom SPACE NEWLINE SPACE SPACE SPACE SPACE module SPACE Tool SPACE end SPACE NEWLINE SPACE SPACE end NEWLINE SPACE SPACE class SPACE BuildEnvironment NEWLINE SPACE SPACE SPACE SPACE attr_reader SPACE LITERAL, SPACE LITERAL, SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE attr_writer SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE DEFAULT_LINES_AROUND_RELATED SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE def SPACE initialize ( action , SPACE options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE options , SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL] NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @action SPACE = SPACE action NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @options SPACE = SPACE options NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @issues SPACE = SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @lines_around_related SPACE = SPACE options . delete ( LITERAL) SPACE || SPACE DEFAULT_LINES_AROUND_RELATED NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @artifacts SPACE = SPACE [ ] NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @tools SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . make_pathname ( __FILE__ ) . dirname . join ( LITERALLITERALLITERAL) . realpath SPACE = > SPACE Dokumi :: Tool , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE BASE_DIRECTORY . join ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) SPACE = > SPACE Dokumi :: Custom :: Tool , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } . each SPACE do SPACE | tools_directory , SPACE owner | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE unless SPACE tools_directory . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE tools_directory . each_child SPACE do SPACE | child_path | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE if SPACE child_path . directory? SPACE or SPACE child_path . extname SPACE != SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE child_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE tool_name SPACE = SPACE child_path . basename ( child_path . extname ) . to_s . to_sym NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE class_name SPACE = SPACE Support . camel_case ( tool_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE methods . include? ( tool_name ) SPACE || SPACE @tools . include? ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALtool_name LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE define_singleton_method ( tool_name ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @tools [ tool_name ] SPACE || = SPACE owner . const_get ( class_name ) . new ( self ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE VALID_ISSUE_TYPES SPACE = SPACE [ LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE SPACE SPACE DEFAULT_TOOL SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE def SPACE add_issue ( new_issue ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE new_issue , SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL] , SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALVALID_ISSUE_TYPES . inspect LITERALLITERALSPACE unless SPACE VALID_ISSUE_TYPES . include? ( new_issue [ LITERAL] ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE new_issue SPACE = SPACE new_issue . dup NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE new_issue [ LITERAL] SPACE || = SPACE DEFAULT_TOOL NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE new_issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_path SPACE = SPACE Support . make_pathname ( new_issue [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_path SPACE = SPACE file_path . relative_path_from ( source_directory ) SPACE unless SPACE file_path . relative? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE new_issue SPACE = SPACE new_issue . merge ( LITERAL: SPACE file_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE similar_issue_index SPACE = SPACE @issues . index SPACE do SPACE | compared_to | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERALSPACE ] . all? SPACE { | key | SPACE compared_to [ key ] SPACE == SPACE new_issue [ key ] SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE similar_issue_index NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @issues SPACE << SPACE new_issue NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE similar_issue SPACE = SPACE @issues [ similar_issue_index ] NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE should_replace SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE similar_issue [ LITERAL] SPACE == SPACE new_issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE new_issue [ LITERAL] SPACE != SPACE similar_issue [ LITERAL] SPACE and SPACE similar_issue [ LITERAL] SPACE == SPACE DEFAULT_TOOL NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE should_replace SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE new_issue [ LITERAL] SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE should_replace SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @issues [ similar_issue_index ] SPACE = SPACE new_issue SPACE if SPACE should_replace NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE add_artifacts ( * artifacts ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @artifacts . concat SPACE artifacts . flatten . map SPACE { | artifact | SPACE Support . make_pathname ( artifact ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @artifacts . uniq! NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE error_found? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @issues . any? SPACE { | issue | SPACE issue [ LITERAL] SPACE == SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE action_executed? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @action_executed NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE issues NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @issues . dup . freeze NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE artifacts NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @artifacts . dup . freeze NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE [ NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE ] . each SPACE do SPACE | option_type | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE define_method ( option_type ) SPACE { SPACE @options [ option_type ] SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE LOCAL_CONFIGURATION_FILE_NAME SPACE = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE def SPACE local_configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE @local_configuration SPACE if SPACE @local_configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE configuration_path SPACE = SPACE source_directory . join ( LOCAL_CONFIGURATION_FILE_NAME ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE configuration_path . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @local_configuration SPACE = SPACE YAML . load ( IO . read ( configuration_path ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @local_configuration SPACE = SPACE Support . symbolize_keys ( @local_configuration ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @local_configuration SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @local_configuration . freeze NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE make_identifier_updater ( replacements ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE lambda SPACE do SPACE | value | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE replacements . each SPACE do SPACE | to_replace , SPACE replacement | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE value SPACE == SPACE to_replace SPACE or SPACE value . start_with? ( LITERALLITERALto_replace LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE value SPACE = SPACE value . sub ( to_replace , SPACE replacement ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE value NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE run_script ( build_script_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Dir . chdir ( source_directory ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance_eval ( IO . read ( build_script_path ) , SPACE build_script_path . to_s ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . build_project ( action , SPACE environment_options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE environment_options , SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL] NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE build_script_path SPACE = SPACE environment_options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE build_script_path . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALbuild_script_path LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE build_environment SPACE = SPACE self . new ( action , SPACE environment_options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE build_environment . run_script ( build_script_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE unless SPACE build_environment . action_executed? SPACE or SPACE build_environment . error_found? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE if SPACE action SPACE == SPACE LITERALSPACE and SPACE build_environment . error_found? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE build_environment NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Command NEWLINE SPACE SPACE SPACE SPACE def SPACE self . archive ( host , SPACE owner , SPACE repo , SPACE branch_or_tag_name , SPACE environment_options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE build_for ( LITERAL, SPACE host , SPACE owner , SPACE repo , SPACE branch_or_tag_name , SPACE environment_options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE export_benchmark_report ( environment_options ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . test ( host , SPACE owner , SPACE repo , SPACE branch_or_tag_name , SPACE environment_options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE build_for ( LITERAL, SPACE host , SPACE owner , SPACE repo , SPACE branch_or_tag_name , SPACE environment_options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE export_benchmark_report ( environment_options ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . review ( host , SPACE owner , SPACE repo , SPACE pull_request_number , SPACE environment_options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE environment_options SPACE = SPACE prepare_directories_and_options SPACE host , SPACE owner , SPACE repo , SPACE environment_options . merge ( LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE pull_request SPACE = SPACE VersionControl :: GitHub :: PullRequest . new ( host , SPACE owner , SPACE repo , SPACE pull_request_number ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE local_copy SPACE = SPACE pull_request . fetch_into ( environment_options [ LITERAL] ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE environment_options [ LITERAL] SPACE = SPACE pull_request NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE environment_options [ LITERAL] SPACE = SPACE pull_request . head . ref NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE environment_options [ LITERAL] SPACE = SPACE local_copy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE environment SPACE = SPACE BuildEnvironment . build_project ( LITERAL, SPACE environment_options ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE diff SPACE = SPACE local_copy . diff_with_merge_base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE issues SPACE = SPACE diff . filter_out_unrelated_issues ( environment . issues , SPACE LITERAL: SPACE environment . lines_around_related ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE pull_request . add_comments_for_issues ( issues , SPACE diff ) SPACE unless SPACE environment_options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE export_benchmark_report ( environment_options ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE issues NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . review_and_report ( host , SPACE owner , SPACE repo , SPACE pull_request_number , SPACE environment_options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE issues SPACE = SPACE review ( host , SPACE owner , SPACE repo , SPACE pull_request_number , SPACE environment_options ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE issues . length SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . info SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . warn SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE issues . each SPACE do SPACE | issue | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . warn SPACE LITERALLITERALLITERALissue [ LITERAL] LITERALLITERALLITERALissue [ LITERAL] LITERALLITERALLITERALissue [ LITERAL] LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE issues . all? SPACE { | issue | SPACE issue [ LITERAL] SPACE == SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . warn SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . warn SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE LOG_FILES_MAX_COUNT SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE def SPACE self . prepare_directories_and_options ( host , SPACE owner , SPACE repo , SPACE environment_options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE repository SPACE = SPACE { LITERAL: SPACE owner , SPACE LITERAL: SPACE repo } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE environment_options SPACE = SPACE environment_options . dup NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE log_directory SPACE = SPACE Support . make_pathname ( environment_options [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE log_directory NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE log_directory SPACE = SPACE BASE_DIRECTORY . join ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE host , SPACE owner , SPACE repo ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE log_directory . mkpath NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE log_file_name_prefix SPACE = SPACE environment_options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE older_log_file_paths SPACE = SPACE Pathname . glob ( log_directory . join ( LITERALLITERALlog_file_name_prefix LITERALLITERALLITERAL) ) . sort NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE older_log_file_paths . length SPACE > SPACE LOG_FILES_MAX_COUNT SPACE - SPACE LITERALSPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE count_to_delete SPACE = SPACE older_log_file_paths . length SPACE - SPACE LOG_FILES_MAX_COUNT SPACE + SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE older_log_file_paths [ LITERAL... count_to_delete ] . each SPACE { | file_path | SPACE file_path . unlink SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE log_file_path SPACE = SPACE log_directory . join ( LITERALLITERALlog_file_name_prefix LITERALLITERALLITERALTime . new . strftime ( LITERALLITERALLITERAL) LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . info SPACE LITERALLITERALLITERALlog_file_path LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE file_logger SPACE = SPACE Logger . new ( log_file_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE file_logger . level SPACE = SPACE Logger :: DEBUG NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stdout_logger SPACE = SPACE Logger . new ( STDOUT ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stdout_logger . level SPACE = SPACE Logger :: INFO NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger SPACE = SPACE Support :: MultiLogger . new ( stdout_logger , SPACE file_logger ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE environment_options [ LITERAL] SPACE = SPACE BASE_DIRECTORY . join ( LITERALLITERALLITERAL, SPACE host , SPACE owner , SPACE repo ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE environment_options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_script_path SPACE = SPACE Support . make_pathname ( environment_options . delete ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALbuild_script_path LITERALLITERALLITERALSPACE unless SPACE build_script_path . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_script_path SPACE = SPACE BASE_DIRECTORY . join ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE host , SPACE owner , SPACE LITERALLITERALrepo LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_script_path SPACE = SPACE BASE_DIRECTORY . join ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE host , SPACE LITERALLITERALLITERAL) SPACE unless SPACE build_script_path . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_script_path SPACE = SPACE BASE_DIRECTORY . join ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) SPACE unless SPACE build_script_path . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALowner LITERALLITERALLITERALrepo LITERALLITERALLITERALhost LITERALLITERALLITERALSPACE unless SPACE build_script_path . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . info SPACE LITERALLITERALLITERALbuild_script_path LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE environment_options [ LITERAL] SPACE = SPACE build_script_path NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE work_directory SPACE = SPACE Support . make_pathname ( environment_options [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE work_directory SPACE and SPACE work_directory . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . warn SPACE LITERALLITERALLITERALwork_directory LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE work_directory SPACE = SPACE BASE_DIRECTORY . join ( LITERALLITERALLITERAL, SPACE host , SPACE owner , SPACE repo ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE environment_options [ LITERAL] SPACE = SPACE work_directory NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE work_directory . rmtree SPACE if SPACE work_directory . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE work_directory . mkpath NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE environment_options NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . build_for ( action , SPACE host , SPACE owner , SPACE repo , SPACE branch_or_tag_name , SPACE environment_options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE environment_options SPACE = SPACE prepare_directories_and_options SPACE host , SPACE owner , SPACE repo , SPACE environment_options . merge ( LITERAL: SPACE action ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE branch_or_tag SPACE = SPACE parse_branch_or_tag ( host , SPACE owner , SPACE repo , SPACE branch_or_tag_name , SPACE environment_options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALtype . inspect LITERALLITERALLITERALSPACE unless SPACE branch_or_tag NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE local_copy SPACE = SPACE branch_or_tag . fetch_into ( environment_options [ LITERAL] ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE environment_options [ LITERAL] SPACE = SPACE local_copy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE BuildEnvironment . build_project ( action , SPACE environment_options ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . extract_environment_options NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE environment_options SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ARGV . delete_if SPACE do SPACE | arg | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( md SPACE = SPACE LITERALLITERALLITERALLITERALLITERALLITERAL. match ( arg ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE environment_options [ md [ LITERAL] ] SPACE = SPACE md [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Support . symbolize_keys SPACE environment_options NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . parse_branch_or_tag ( host , SPACE owner , SPACE repo , SPACE branch_or_tag_name , SPACE environment_options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE type , SPACE branch_or_tag_name SPACE = SPACE VersionControl :: GitHub . branch_or_tag ( host , SPACE owner , SPACE repo , SPACE branch_or_tag_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE type SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE environment_options [ LITERAL] SPACE = SPACE branch_or_tag_name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE VersionControl :: GitHub :: Branch . new ( host , SPACE owner , SPACE repo , SPACE branch_or_tag_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE type SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE environment_options [ LITERAL] SPACE = SPACE branch_or_tag_name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE VersionControl :: GitHub :: Tag . new ( host , SPACE owner , SPACE repo , SPACE branch_or_tag_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . export_benchmark_report ( environment_options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE filepath SPACE = SPACE environment_options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE unless SPACE filepath NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Support . benchmarker . export! ( filepath ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE 
require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE 
require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Support NEWLINE SPACE SPACE SPACE SPACE class SPACE ExecutionLog NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERAL, SPACE LITERAL, SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( command , SPACE tms , SPACE start_time ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @command SPACE = SPACE command NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @tms SPACE = SPACE tms NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @start_time SPACE = SPACE start_time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE to_hash NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { SPACE LITERAL: SPACE command , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE tms . cstime , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE tms . cutime , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE tms . real , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE tms . stime , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE tms . total , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE tms . utime , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE start_time . to_i , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE class SPACE Benchmarker NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @data SPACE = SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE export! ( filename ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE json SPACE = SPACE JSON . pretty_generate ( @data . map ( & LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE File . write ( filename , SPACE json ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . info SPACE LITERALLITERALfilename LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE measure ( * args , SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE start_time SPACE = SPACE Time . now NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE tms SPACE = SPACE Benchmark . measure ( args , SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @data SPACE << SPACE ExecutionLog . new ( args , SPACE tms , SPACE start_time ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . benchmarker NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @benchmarker SPACE || = SPACE Benchmarker . new NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Support NEWLINE SPACE SPACE SPACE SPACE class SPACE FrozenStruct NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE FORBIDDEN_FIELD_NAMES SPACE = SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . make_class ( * fields , SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE field_names SPACE = SPACE fields . flatten . map SPACE { | field | SPACE field . to_sym SPACE } . freeze NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE field_names . each SPACE { | field | SPACE raise SPACE LITERALLITERALLITERALfield LITERALLITERALSPACE if SPACE FORBIDDEN_FIELD_NAMES . include? ( field ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE klass SPACE = SPACE Class . new ( self ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE define_singleton_method ( LITERAL) SPACE { SPACE field_names SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE fields . each SPACE do SPACE | field | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE define_method ( field ) SPACE { SPACE @values [ field ] SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE klass . class_eval ( & block ) SPACE if SPACE block NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE klass NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( h ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @values SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE h . each SPACE do SPACE | field , SPACE value | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE field SPACE = SPACE field . to_sym NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALfield LITERALLITERALSPACE unless SPACE self . class . fields . include? ( field ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @values [ field ] SPACE = SPACE value . is_a? ( Symbol ) SPACE ? SPACE value SPACE : SPACE value . dup . freeze NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @values . freeze NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE to_h NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @values . dup NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL] . each SPACE do SPACE | name | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE define_method ( name ) SPACE { SPACE self SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE frozen? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . merge ( from , SPACE h SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE new ( from . to_h . merge ( h ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Support NEWLINE SPACE SPACE SPACE SPACE def SPACE self . validate_hash ( hash , SPACE validation ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE validation SPACE = SPACE validation . dup NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( must_have_only SPACE = SPACE validation . delete ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE validate_hash SPACE hash , SPACE LITERAL: SPACE must_have_only , SPACE LITERAL: SPACE must_have_only NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( requires SPACE = SPACE validation . delete ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE keys_required SPACE = SPACE [ SPACE requires SPACE ] . flatten NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE keys_required . each SPACE do SPACE | key | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALkey . inspect LITERALLITERALLITERALSPACE unless SPACE hash . has_key? ( key ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( can_also_have SPACE = SPACE validation . delete ( LITERAL) ) SPACE or SPACE ( only SPACE = SPACE validation . delete ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE can_also_have NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE unless SPACE requires NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE keys_allowed SPACE = SPACE [ SPACE can_also_have , SPACE requires SPACE ] . flatten NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE keys_allowed SPACE = SPACE [ SPACE only SPACE ] . flatten NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE hash . keys . each SPACE do SPACE | key | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALkey . inspect LITERALLITERALLITERALSPACE unless SPACE keys_allowed . include? ( key ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALvalidation . keys . inspect LITERALLITERALSPACE unless SPACE validation . empty? NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . extract_options! ( args , SPACE validation SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ! args . empty? SPACE and SPACE args . last . is_a? ( Hash ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options SPACE = SPACE args . pop NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE validate_hash ( options , SPACE validation ) SPACE unless SPACE validation . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE options NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . symbolize_keys ( to_symbolize ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE h SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE to_symbolize . each SPACE do SPACE | k , SPACE v | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE h [ k . to_sym ] SPACE = SPACE v NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE h NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . update_hash! ( hash , SPACE path , SPACE * args , SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE args . last . is_a? ( Hash ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE opts SPACE = SPACE args . pop NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE opts SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE args . length SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE unless SPACE block NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE args . length SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE if SPACE block NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE value SPACE = SPACE args . pop NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE block SPACE = SPACE Proc . new SPACE { SPACE value SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE current SPACE = SPACE hash NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE path_left SPACE = SPACE path . split ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE loop SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subpath SPACE = SPACE path_left . shift NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE subpath SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE unless SPACE current NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE current . is_a? ( Hash ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE key_enumerator SPACE = SPACE current . each_key NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE current . is_a? ( Array ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE key_enumerator SPACE = SPACE current . each_index NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALpath LITERALLITERALLITERALcurrent . inspect LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE path_left . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE key_enumerator . each SPACE do SPACE | key | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE current [ key ] SPACE = SPACE block . call ( current [ key ] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE key_enumerator . each SPACE do SPACE | key | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_hash! SPACE current [ key ] , SPACE path_left . join ( LITERALLITERALLITERAL) , SPACE opts , SPACE & block NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE if SPACE opts [ LITERAL] SPACE and SPACE ! current . has_key? ( subpath ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE path_left . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE current [ subpath ] SPACE = SPACE block . call ( current [ subpath ] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE hash NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE current SPACE = SPACE current [ subpath ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . make_pathname ( path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE path SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE path . is_a? ( Pathname ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Pathname . new ( path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . camel_case ( string ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE string . to_s . gsub ( LITERALLITERALLITERAL) SPACE { | character | SPACE character [ - LITERAL] . upcase SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Support NEWLINE SPACE SPACE SPACE SPACE class SPACE MultiLogger NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( * loggers ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @loggers SPACE = SPACE loggers . flatten NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE [ NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ] . each SPACE do SPACE | method_name | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE define_method ( method_name ) SPACE do SPACE | * args | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @loggers . each SPACE do SPACE | logger | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE logger . send ( method_name , SPACE * args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . logger NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE @logger SPACE if SPACE @logger NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @logger SPACE = SPACE Logger . new ( STDOUT ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @logger . level SPACE = SPACE Logger :: INFO NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @logger NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . logger = ( logger ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @logger SPACE = SPACE logger NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Support NEWLINE SPACE SPACE SPACE SPACE module SPACE Shell NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . with_clean_env ( & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to_run SPACE = SPACE lambda SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE saved_version SPACE = SPACE ENV [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ENV [ LITERALLITERALLITERAL] SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE block . call NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ensure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ENV [ LITERALLITERALLITERAL] SPACE = SPACE saved_version NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE defined? ( Bundler ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Bundler . with_clean_env ( & to_run ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to_run . call NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . using_rbenv? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ENV . keys . any? SPACE { | key | SPACE key . start_with? ( LITERALLITERALLITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . stringify_shell_arguments ( args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args . map SPACE { | arg | SPACE ( arg . is_a? ( Pathname ) SPACE or SPACE arg . is_a? ( Symbol ) ) SPACE ? SPACE arg . to_s SPACE : SPACE arg SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . prepare_arguments ( args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE = SPACE stringify_shell_arguments ( args ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE args SPACE unless SPACE using_rbenv? NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE commands_needing_override SPACE = SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE args . first . respond_to? ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env SPACE = SPACE args . shift NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE args . length SPACE == SPACE LITERALSPACE and SPACE commands_needing_override . include? ( args . first . strip . split ( LITERALLITERALLITERALLITERAL) . first ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE = SPACE [ LITERALLITERALLITERALargs . first LITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE commands_needing_override . include? ( args . first ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE = SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE * args ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE env NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ env , SPACE * args ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . popen_each_line ( * args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options SPACE = SPACE Support . extract_options! ( args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE options , SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE original_args SPACE = SPACE stringify_shell_arguments ( args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE = SPACE prepare_arguments ( args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . debug SPACE LITERALLITERALLITERALoriginal_args . inspect LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit_status SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . benchmarker . measure ( * original_args ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with_clean_env SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit_status SPACE = SPACE Open3 . popen3 ( * args ) SPACE do SPACE | stdin , SPACE stdout , SPACE stderr , SPACE wait_thread | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stdin . close NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to_read SPACE = SPACE [ stdout , SPACE stderr ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE until SPACE to_read . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE available , SPACE _ , SPACE _ SPACE = SPACE IO . select ( to_read ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE while SPACE io SPACE = SPACE available . pop NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE io . eof? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE io . close NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to_read . delete SPACE io NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE io NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE stderr NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE yield SPACE LITERAL, SPACE io . gets NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE stdout NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE yield SPACE LITERAL, SPACE io . gets NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wait_thread . value NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit_code SPACE = SPACE exit_status . exitstatus NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALargs . inspect LITERALLITERALLITERALexit_status . inspect LITERALLITERALSPACE if SPACE exit_code SPACE != SPACE LITERALSPACE and SPACE ! options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit_code NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . run ( * args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options SPACE = SPACE Support . extract_options! ( args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE options , SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE original_args SPACE = SPACE stringify_shell_arguments ( args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE = SPACE prepare_arguments ( args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . debug SPACE LITERALLITERALLITERALoriginal_args . inspect LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . benchmarker . measure ( * original_args ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with_clean_env SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE system ( * args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit_status SPACE = SPACE $? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit_code SPACE = SPACE exit_status . exitstatus NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALargs . inspect LITERALLITERALLITERALexit_status . inspect LITERALLITERALSPACE if SPACE exit_code SPACE != SPACE LITERALSPACE and SPACE ! options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit_code NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . quit_osx_application ( application_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit_code SPACE = SPACE run ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERALapplication_name LITERALLITERALLITERAL, SPACE LITERAL: SPACE true ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE run SPACE LITERALLITERALLITERAL, SPACE application_name , SPACE LITERAL: SPACE true SPACE unless SPACE exit_code SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require_relative SPACE LITERALLITERALLITERALNEWLINE require_relative SPACE LITERALLITERALLITERALNEWLINE NEWLINE module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Tool NEWLINE SPACE SPACE SPACE SPACE class SPACE Android NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( environment ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment SPACE = SPACE environment NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @configuration SPACE = SPACE read_configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE gradle ( * args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run ( { LITERALLITERALLITERALSPACE = > SPACE @configuration [ LITERAL] } , SPACE LITERALLITERALLITERAL, SPACE * args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE findbugs ( target_project ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE if SPACE @environment . options [ LITERAL] SPACE != SPACE nil SPACE && SPACE @environment . options [ LITERAL] . body . include? ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . action_executed SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE gradle SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE FindBugs . parse_report ( target_project ) . each SPACE do SPACE | bug | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . add_issue ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE bug [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE bug [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE bug [ LITERAL] . to_sym , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE bug [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE infer ( target_project ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . action_executed SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run ( { LITERALLITERALLITERALSPACE = > SPACE @configuration [ LITERAL] } , SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Infer . parse_report ( target_project ) . each SPACE do SPACE | bug | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . add_issue ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE bug [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE bug [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE bug [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE lint ( target_project ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . action_executed SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run ( { LITERALLITERALLITERALSPACE = > SPACE @configuration [ LITERAL] } , SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Lint . parse_report ( target_project ) . each SPACE do SPACE | bug | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . add_issue ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE bug [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE bug [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE bug [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE bug [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE read_configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration_path SPACE = SPACE BASE_DIRECTORY . join ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration SPACE = SPACE Support . symbolize_keys SPACE YAML . load ( IO . read ( configuration_path ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE configuration , SPACE LITERAL: SPACE [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Tool NEWLINE SPACE SPACE SPACE SPACE class SPACE Infer NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE INFER_REPORT_FILE SPACE = SPACE LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE << SPACE self NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE parse_report ( target_project ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE report_path SPACE = SPACE Support . make_pathname ( INFER_REPORT_FILE ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE report SPACE = SPACE JSON . parse ( File . read ( report_path ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE report . map SPACE do SPACE | info | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE info [ LITERALLITERALLITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE info [ LITERALLITERALLITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE info [ LITERALLITERALLITERAL] . to_i , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require_relative SPACE LITERALLITERALLITERALNEWLINE require_relative SPACE LITERALLITERALLITERALNEWLINE require_relative SPACE LITERALLITERALLITERALNEWLINE require_relative SPACE LITERALLITERALLITERALNEWLINE require_relative SPACE LITERALLITERALLITERALNEWLINE NEWLINE module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Tool NEWLINE SPACE SPACE SPACE SPACE class SPACE Xcode NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( environment ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment SPACE = SPACE environment NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @xcode_version SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE use_xcode_version ( version ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE version SPACE = SPACE version . to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE version SPACE = SPACE LITERALSPACE if SPACE version SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration SPACE = SPACE self . class . read_configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALversion LITERALLITERALLITERALSPACE unless SPACE configuration [ version ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @xcode_version SPACE = SPACE version NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE require_warnings ( xcodeproj_path , SPACE * warnings ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . action_executed SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Xcode :: ProjectChecker . new ( @environment , SPACE xcodeproj_path ) . require_warnings ( * warnings ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE modify_project ( xcodeproj_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE yield SPACE Xcode :: ProjectHelper . new ( xcodeproj_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE icon_paths_in_project ( xcodeproj_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Xcode :: ProjectHelper . new ( xcodeproj_path ) . icon_paths NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE analyze ( project_path , SPACE options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE options , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . action_executed SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE xcodebuild SPACE project_path , SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE options [ LITERAL] , SPACE LITERAL: SPACE LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE project_basename SPACE = SPACE File . basename ( project_path , SPACE File . extname ( project_path ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE static_analyzer_plist_pattern SPACE = SPACE @environment . work_directory . join ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALproject_basenameir . glob ( static_analyzer_plist_pattern ) . each SPACE do SPACE | plist_path | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE content SPACE = SPACE Xcodeproj :: Plist . read_from_path ( plist_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE unless SPACE content [ LITERALLITERALLITERAL] SPACE and SPACE content [ LITERALLITERALLITERAL] SPACE and SPACE content [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE if SPACE content [ LITERALLITERALLITERAL] . empty? SPACE or SPACE content [ LITERALLITERALLITERAL] . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE content [ LITERALLITERALLITERAL] . each SPACE do SPACE | diagnostic | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE location SPACE = SPACE diagnostic [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . add_issue ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE content [ LITERALLITERALLITERAL] [ location [ LITERALLITERALLITERAL] ] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE location [ LITERALLITERALLITERAL] . to_i , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE location [ LITERALLITERALLITERAL] . to_i , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE diagnostic [ LITERALLITERALLITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE test ( project_path , SPACE options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE options , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE % i ( scheme SPACE destination SPACE sdk ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE % i ( scheme SPACE destination ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . action_executed SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ SPACE options [ LITERAL] SPACE ] . flatten . each SPACE do SPACE | destination | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE xcodebuild SPACE project_path , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE options [ LITERAL] SPACE || SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE options [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE destination NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE archive ( project_path , SPACE options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE options , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . action_executed SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE project_basename SPACE = SPACE File . basename ( project_path , SPACE File . extname ( project_path ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE archive_path SPACE = SPACE @environment . work_directory . join ( LITERALLITERALproject_basename LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ipa_path SPACE = SPACE @environment . work_directory . join ( LITERALLITERALproject_basename LITERALLITERALLITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE xcodebuild SPACE project_path , SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE options [ LITERAL] , SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE archive_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE if SPACE @environment . error_founddirectory_for_archiving SPACE = SPACE @environment . work_directory . join ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE directory_for_archiving . mkpath NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Dir . chdir ( directory_for_archiving ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALdirectory_for_archiving LITERALLITERALLITERALDir . pwd LITERALLITERALSPACE if SPACE Pathname . pwd . realpath SPACE != SPACE directory_for_archiving . realpath NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE FileUtils . ln_s SPACE archive_path . join ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) , SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] . each SPACE do SPACE | support_type | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE support_source_path SPACE = SPACE archive_path . join ( support_type ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE FileUtils . ln_s SPACE support_source_path , SPACE support_source_path . basename SPACE if SPACE support_source_path . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE ipa_path , SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . add_artifacts SPACE ipa_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to_archive SPACE = SPACE archive_path . join ( LITERALLITERALLITERAL) . children SPACE + SPACE archive_path . join ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) . children NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to_archive . select! SPACE { | path | SPACE [ SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERALSPACE ] . include? ( path . extname ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to_archive . each SPACE do SPACE | path | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Dir . chdir SPACE path . dirname SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE zip_path SPACE = SPACE @environment . work_directory . join ( LITERALLITERALpath . basename LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE zip_path , SPACE path . basename NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . add_artifacts SPACE zip_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE IGNORED_COCOAPODS_WARNINGS SPACE = SPACE [ NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE install_pods NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE unless SPACE File . exist? ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE File . exist? ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE pod_command SPACE = SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE File . exist? ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE cocoapods_version SPACE = SPACE YAML . load ( IO . read ( LITERALLITERALLITERAL) ) [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE pod_command SPACE = SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERALcocoapods_version LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE pod_command SPACE = SPACE [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE first_try SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE loop SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warnings_found SPACE = SPACE { LITERAL: SPACE [ ] , SPACE LITERAL: SPACE [ ] } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warning_not_finished SPACE = SPACE { LITERAL: SPACE false , SPACE LITERAL: SPACE false } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env SPACE = SPACE { LITERALLITERALLITERALSPACE = > SPACE xcode_path . to_s } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit_code SPACE = SPACE Support :: Shell . popen_each_line ( env , SPACE * pod_command , SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true ) SPACE do SPACE | output_type , SPACE line | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE line SPACE = SPACE line . chomp NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE output_type NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . debug SPACE line NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . warn SPACE line NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE line . start_with? ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE IGNORED_COCOAPODS_WARNINGS . any? SPACE { | warning | SPACE line . include? ( warning ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warning_not_finished [ output_type ] SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warnings_found [ output_type ] SPACE << SPACE line . sub ( LITERALLITERALLITERAL, SPACE LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warning_not_finished [ output_type ] SPACE = SPACE line . end_with? ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE warning_not_finished [ output_type ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warnings_found [ output_type ] [ - LITERAL] SPACE += SPACE LITERALLITERALLITERALSPACE + SPACE line NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exited_in_error SPACE = SPACE ( exit_code SPACE != SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE first_try SPACE and SPACE exited_in_error NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . warn SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE first_try SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE * pod_command , SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warnings_found . each SPACE do SPACE | output_type , SPACE messages | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE messages . each SPACE do SPACE | message | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . add_issue ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE exited_in_error SPACE ? SPACE LITERALSPACE : SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message . strip , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE break NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE find_unchanged_storyboards NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . action_executed SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE UnchangedStoryboardFinder . find_issues SPACE @environment NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE find_misplaced_constraints NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . action_executed SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE MisplacedConstraintFinder . find_issues SPACE @environment NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE xcode_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration SPACE = SPACE self . class . read_configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE xcode_version SPACE = SPACE @xcode_version NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE xcode_version SPACE == SPACE LITERALSPACE and SPACE @environment . local_configuration [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE xcode_version SPACE = SPACE @environment . local_configuration [ LITERAL] . to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE xcode_version SPACE = SPACE LITERALSPACE if SPACE xcode_version . downcase SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE xcode_version SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE xcode_version SPACE = SPACE configuration [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE unless SPACE xcode_version NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE configuration [ xcode_version ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE xcode_path SPACE = SPACE configuration [ xcode_version ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE xcode_path SPACE = SPACE xcode_version NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE xcode_path SPACE = SPACE configuration [ xcode_version ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALxcode_version LITERALLITERALLITERALSPACE unless SPACE xcode_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE xcode_path SPACE = SPACE Support . make_pathname ( xcode_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALxcode_path LITERALLITERALLITERALSPACE unless SPACE xcode_path . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE xcode_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE xcodebuild_version NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE version SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . popen_each_line ( xcodebuild_path , SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true ) SPACE do SPACE | output_type , SPACE line | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE md SPACE = SPACE LITERALLITERALLITERAL. match ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE version SPACE = SPACE md [ LITERAL] SPACE if SPACE md NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE if SPACE version SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE version . split ( LITERALLITERALLITERAL) . map ( & LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE quit_simulator NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . quit_osx_application SPACE LITERALLITERALLITERALSPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . quit_osx_application SPACE LITERALLITERALLITERALSPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE xcodebuild_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE path SPACE = SPACE xcode_path . join ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALxcodebuild_path LITERALLITERALSPACE unless SPACE path . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE xcodebuild ( project_path , SPACE options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE options , SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL] , SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL] NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE = SPACE [ SPACE xcodebuild_path SPACE ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE File . extname ( project_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE << SPACE [ SPACE LITERALLITERALLITERAL, SPACE project_path SPACE ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE << SPACE [ SPACE LITERALLITERALLITERAL, SPACE project_path SPACE ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALproject_path LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE << SPACE [ SPACE LITERALLITERALLITERAL, SPACE options [ LITERAL] SPACE ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE << SPACE [ SPACE LITERALLITERALLITERAL, SPACE options [ LITERAL] SPACE ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE << SPACE [ SPACE LITERALLITERALLITERAL, SPACE @environment . work_directory SPACE ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE << SPACE [ SPACE LITERALLITERALLITERAL, SPACE options [ LITERAL] SPACE ] SPACE if SPACE options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE << SPACE [ SPACE LITERALLITERALLITERAL, SPACE options [ LITERAL] SPACE ] SPACE if SPACE options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args SPACE << SPACE options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE args . flatten! NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE first_try SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE loop SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE quit_simulator NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit_code SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE error_extractor SPACE = SPACE ErrorExtractor . new ( @environment ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . info SPACE LITERALLITERALLITERALargs . inspect LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exit_code SPACE = SPACE Support :: Shell . popen_each_line ( * args , SPACE LITERAL: SPACE true ) SPACE do SPACE | output_type , SPACE line | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE error_extractor . process_line ( output_type , SPACE line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE error_extractor . flush NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE exit_code SPACE != SPACE LITERALSPACE and SPACE ! error_extractor . new_error_found NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE exit_code SPACE == SPACE LITERALSPACE and SPACE first_try NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . warn SPACE LITERALLITERALLITERALexit_code LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE first_try SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALexit_code LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE break NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ensure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE quit_simulator NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . read_configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration_path SPACE = SPACE BASE_DIRECTORY . join ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE configuration_path . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE default_path SPACE = SPACE LITERALLITERALLITERAL. strip . sub ( LITERALLITERALLITERALLITERALLITERAL, SPACE LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE default_path SPACE = SPACE LITERALLITERALLITERALSPACE if SPACE default_path . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE IO . write ( configuration_path , SPACE LITERALLITERALLITERALLITERALdefault_path LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raw_configuration SPACE = SPACE YAML . load ( IO . read ( configuration_path ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raw_configuration . each SPACE do SPACE | key , SPACE value | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE key SPACE = SPACE key SPACE == SPACE LITERALLITERALLITERALSPACE ? SPACE LITERALSPACE : SPACE key . to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration [ key ] SPACE = SPACE value . to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Tool NEWLINE SPACE SPACE SPACE SPACE class SPACE Android NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE FindBugs NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE FINDBUGS_REPORT_FILE SPACE = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE RANK_ERROR_THRESHOLD SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE << SPACE self NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE parse_report ( target_project ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE report_path SPACE = SPACE Support . make_pathname ( target_project ) . join ( FINDBUGS_REPORT_FILE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE File . open ( report_path ) SPACE do SPACE | file | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE report SPACE = SPACE Nokogiri :: XML ( file ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE report . xpath ( LITERALLITERALLITERAL) . map SPACE do SPACE | info | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rank SPACE = SPACE info . attribute ( LITERALLITERALLITERAL) . value . to_i NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE source_path SPACE = SPACE info . xpath ( LITERALLITERALLITERAL) . first . to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_path SPACE = SPACE Support . make_pathname ( target_project ) . join ( LITERALLITERALLITERAL, SPACE source_path ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE info . xpath ( LITERALLITERALLITERAL) . first . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE file_path , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE info . xpath ( LITERALLITERALLITERAL) . first . to_s . to_i , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE rank SPACE > SPACE RANK_ERROR_THRESHOLD SPACE ? SPACE LITERALSPACE : SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Tool NEWLINE SPACE SPACE SPACE SPACE class SPACE Android NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Lint NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LINT_REPORT_FILE SPACE = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE << SPACE self NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE parse_report ( target_project ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE report_path SPACE = SPACE Support . make_pathname ( target_project ) . join ( LINT_REPORT_FILE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE File . open ( report_path ) SPACE do SPACE | file | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE report SPACE = SPACE Nokogiri :: XML ( file ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE report . xpath ( LITERALLITERALLITERAL) . map SPACE do SPACE | issue | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { SPACE LITERAL: SPACE issue . attribute ( LITERALLITERALLITERAL) . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE issue . xpath ( LITERALLITERALLITERAL) . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE issue . xpath ( LITERALLITERALLITERAL) . to_s . to_i , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE issue . attribute ( LITERALLITERALLITERAL) . to_s SPACE == SPACE LITERALLITERALLITERALSPACE ? SPACE LITERALSPACE : SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Tool NEWLINE SPACE SPACE SPACE SPACE class SPACE Xcode NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE ErrorExtractor NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( environment ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment SPACE = SPACE environment NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @linker_error_state SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @undefined_symbol_details SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @new_error_found SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process_line ( output_type , SPACE line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE line SPACE = SPACE line . rstrip NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE output_type NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE process_standard_error_line ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE process_standard_output_line ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALoutput_type . inspect LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE flush NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE add_issue_if_needed NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @linker_error_state SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE clean_up_issue_type ( type ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE type SPACE = SPACE type . gsub ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) . to_sym NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE type SPACE = SPACE LITERALSPACE if SPACE type SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE type NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE add_issue_if_needed NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @undefined_symbol_details SPACE and SPACE ! @undefined_symbol_details [ LITERAL] . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE description SPACE = SPACE LITERALLITERALLITERAL@undefined_symbol_details [ LITERAL] LITERALLITERALLITERAL@undefined_symbol_details [ LITERAL] . join ( LITERALLITERALLITERAL) LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . add_issue ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE description , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @new_error_found SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @undefined_symbol_details SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process_standard_error_line ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . error SPACE line . chomp NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE extract_simple_error ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( md SPACE = SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERAL. match ( line ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_path , SPACE line_number , SPACE column , SPACE issue_type , SPACE description SPACE = SPACE md . captures NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE ( md SPACE = SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERAL. match ( line ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_path , SPACE line_number , SPACE issue_type , SPACE description SPACE = SPACE md . captures NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE column SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE issue_type SPACE = SPACE clean_up_issue_type ( issue_type ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @new_error_found SPACE = SPACE true SPACE if SPACE issue_type SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE issue SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE description . end_with? ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE issue [ LITERAL] SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE description SPACE = SPACE description . sub ( LITERALLITERALLITERALLITERALLITERAL, SPACE LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE issue [ LITERAL] SPACE = SPACE issue_type NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE issue [ LITERAL] SPACE = SPACE description NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE file_path SPACE != SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE issue [ LITERAL] SPACE = SPACE file_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE issue [ LITERAL] SPACE = SPACE line_number . to_i NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE issue [ LITERAL] SPACE = SPACE column . to_i SPACE if SPACE column NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . add_issue SPACE issue NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE extract_linker_error ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE @linker_error_state NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE md SPACE = SPACE LITERALLITERALLITERALLITERALLITERALLITERAL. match ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @linker_error_state SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @undefined_symbol_details SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( md SPACE = SPACE LITERALLITERALLITERALLITERALLITERALLITERAL. match ( line ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE symbol SPACE = SPACE md [ LITERAL] . sub ( LITERALLITERALLITERAL, SPACE LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE add_issue_if_needed NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @undefined_symbol_details SPACE = SPACE { SPACE LITERAL: SPACE symbol , SPACE LITERAL: SPACE [ ] SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE ( md SPACE = SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERAL. match ( line ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_name SPACE = SPACE md [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALfile_name LITERALLITERALLITERALSPACE unless SPACE @undefined_symbol_details NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @undefined_symbol_details [ LITERAL] SPACE << SPACE file_name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE LITERALLITERALLITERALLITERAL. match ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flush NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE extract_linker_error ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process_standard_output_line ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE extract_simple_error ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . warn SPACE line . chomp NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flush NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . debug SPACE line . chomp NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE extract_linker_error ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Tool NEWLINE SPACE SPACE SPACE SPACE class SPACE Xcode NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE MisplacedConstraintFinder NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . find_issues ( environment ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE local_copy SPACE = SPACE environment . options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE unless SPACE local_copy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE diff SPACE = SPACE local_copy . diff_with_merge_base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE diff . rugged_diff . each_patch SPACE do SPACE | patch | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_path SPACE = SPACE patch . delta . new_file [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE if SPACE file_path SPACE == SPACE nil SPACE or SPACE ! File . exist? ( file_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE if SPACE patch . delta . binary? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE unless SPACE LITERALLITERALLITERALLITERALLITERALLITERAL. match ( file_path ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE doc SPACE = SPACE File . open ( file_path ) SPACE { SPACE | f | SPACE Nokogiri :: XML . parse ( f ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE misplaced_nodes SPACE = SPACE doc . css ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE misplaced_nodes . each SPACE do SPACE | node | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE environment . add_issue ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE file_path , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE node . lineend NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Tool NEWLINE SPACE SPACE SPACE SPACE class SPACE Xcode NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE ProjectChecker NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE WARNING_GROUPS SPACE = SPACE {} . freeze NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE XCODE_SETTINGS SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . freeze NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE find_setting_with_flag ( flag_wanted ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE XCODE_SETTINGS . each SPACE do SPACE | setting_name , SPACE setting | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE unless SPACE setting [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE setting [ LITERAL] . each SPACE do SPACE | value , SPACE flag | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE { LITERAL: SPACE setting , SPACE LITERAL: SPACE setting_name , SPACE LITERAL: SPACE value } SPACE if SPACE flag SPACE == SPACE flag_wanted NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE add_error ( options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE options , SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE state_wanted SPACE = SPACE options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warning SPACE = SPACE options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration_name SPACE = SPACE options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE target_name SPACE = SPACE options [ LITERAL] NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flag_wanted SPACE = SPACE case SPACE state_wanted NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE true SPACE then SPACE LITERALLITERALLITERALwarning LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE false SPACE then SPACE LITERALLITERALLITERALwarning LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALSPACE then SPACE LITERALLITERALLITERALwarning LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else SPACE raise SPACE LITERALLITERALLITERALstate_wanted . inspect LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration_description SPACE = SPACE LITERALLITERALLITERALconfiguration_name LITERALLITERALLITERALtarget_name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE place SPACE = SPACE find_setting_with_flag ( flag_wanted ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE place NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . add_issue SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALconfiguration_description LITERALLITERALLITERALplace [ LITERAL] LITERALLITERALLITERALplace [ LITERAL] [ LITERAL] LITERALLITERALLITERALplace [ LITERAL] LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE state_wanted SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE place SPACE = SPACE find_setting_with_flag ( LITERALLITERALLITERALwarning LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE place NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . add_issue SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALconfiguration_description LITERALLITERALLITERALplace [ LITERAL] LITERALLITERALLITERALplace [ LITERAL] [ LITERAL] LITERALLITERALLITERALflag_wanted LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . add_issue SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALconfiguration_description LITERALLITERALLITERALflag_wanted LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE require_warnings ( * warnings ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE schemes SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warnings SPACE = SPACE warnings . flatten NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warnings_hash SPACE = SPACE Support . extract_options! ( warnings ) . dup NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE schemes SPACE = SPACE warnings_hash . delete ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warnings_wanted SPACE = SPACE resolve_warnings ( wanted_warnings_to_flags ( * warnings , SPACE warnings_hash ) ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_configurations_used SPACE = SPACE Set . new NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE schemes NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE schemes SPACE = SPACE [ SPACE schemes SPACE ] . flatten NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE schemes . each SPACE do SPACE | scheme | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_configurations_used SPACE += SPACE build_configurations_used_by_scheme ( scheme ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @project . build_configurations . each SPACE { | configuration | SPACE build_configurations_used SPACE << SPACE configuration . name SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @project . targets . each SPACE do SPACE | target | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE target . build_configurations . each SPACE do SPACE | configuration | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE unless SPACE build_configurations_used . include? ( configuration . name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE resolved_flags SPACE = SPACE resolve_flags ( target . name , SPACE configuration . name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE resolved_warnings SPACE = SPACE resolve_warnings ( resolved_flags ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE resolved_warnings SPACE == SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment . add_issue SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALtarget . name LITERALLITERALLITERALconfiguration . name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warnings_wanted . each SPACE do SPACE | warning , SPACE state_wanted | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE resolved_value SPACE = SPACE resolved_warnings [ warning ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE error_found SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE state_wanted SPACE == SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE error_found SPACE = SPACE true SPACE if SPACE resolved_value NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE state_wanted SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE error_found SPACE = SPACE true SPACE if SPACE resolved_value SPACE != SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE state_wanted SPACE == SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE error_found SPACE = SPACE true SPACE unless SPACE resolved_value SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALstate_wanted . inspect LITERALLITERALLITERALwarning LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE add_error ( LITERAL: SPACE warning , SPACE LITERAL: SPACE configuration . name , SPACE LITERAL: SPACE target , SPACE LITERAL: SPACE state_wanted ) SPACE if SPACE error_found NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE build_configurations_used_by_scheme ( scheme_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE shared_data_dir SPACE = SPACE Support . make_pathname ( Xcodeproj :: XCScheme . shared_data_dir ( @project . path ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE scheme_file_path SPACE = SPACE shared_data_dir . join ( LITERALLITERALscheme_name LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALscheme_name LITERALLITERALLITERALscheme_file_path LITERALLITERALLITERALSPACE unless SPACE scheme_file_path . exist? NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE document SPACE = SPACE File . open ( scheme_file_path ) SPACE { | f | SPACE Nokogiri :: XML . parse ( f ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_configuration_used SPACE = SPACE Set . new NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] . each SPACE do SPACE | action_type | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE document . xpath ( LITERALLITERALLITERALaction_type LITERALLITERAL) . each SPACE do SPACE | node | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_configuration SPACE = SPACE node [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_configuration_used SPACE << SPACE build_configuration SPACE if SPACE build_configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE build_configuration_used . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALscheme_name LITERALLITERALLITERALproject_path LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_configuration_used NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE normalize_setting_value ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE LITERALSPACE if SPACE value SPACE == SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE LITERALSPACE if SPACE value SPACE == SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE value . to_s . downcase . to_sym NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERAL, SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERAL, SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALvalue . inspect LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE wanted_warnings_to_flags ( * warnings ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wanted_flags SPACE = SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options SPACE = SPACE Support . extract_options! ( warnings ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warnings . each SPACE do SPACE | name | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE name SPACE = SPACE name . to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE setting SPACE = SPACE XCODE_SETTINGS [ name ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wanted_flags SPACE << SPACE XCODE_SETTINGS [ name ] [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE name . start_with? ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wanted_flags SPACE << SPACE name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERAL. match ( name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wanted_flags SPACE << SPACE LITERALLITERALLITERALname LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE setting SPACE = SPACE XCODE_SETTINGS . values . find SPACE { | setting | SPACE setting [ LITERAL] SPACE == SPACE name SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE setting NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wanted_flags SPACE << SPACE setting [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALname LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options . each SPACE do SPACE | name , SPACE value | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE name SPACE = SPACE name . to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE normalized_value SPACE = SPACE normalize_setting_value ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE setting SPACE = SPACE XCODE_SETTINGS [ name ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flags SPACE = SPACE setting [ LITERAL] [ normalized_value ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALvalue . inspect LITERALLITERALLITERALname LITERALLITERALSPACE unless SPACE flags NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wanted_flags SPACE << SPACE flags NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERAL. match ( name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE normalized_value SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wanted_flags SPACE << SPACE LITERALLITERALLITERALname LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE normalized_value SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wanted_flags SPACE << SPACE LITERALLITERALLITERALname LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE normalized_value SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wanted_flags SPACE << SPACE LITERALLITERALLITERALname LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALname . inspect LITERALLITERALLITERALvalue . inspect LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE setting SPACE = SPACE XCODE_SETTINGS . values . find SPACE { | setting | SPACE setting [ LITERAL] SPACE == SPACE name SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE setting NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flags SPACE = SPACE setting [ LITERAL] [ normalized_value ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALvalue . inspect LITERALLITERALLITERALname LITERALLITERALSPACE unless SPACE flags NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wanted_flags SPACE << SPACE flags NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALname LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE clean_up_flags ( wanted_flags ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( environment , SPACE path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @environment SPACE = SPACE environment NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @project SPACE = SPACE Xcodeproj :: Project . open ( path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE read_build_setting ( setting_name , SPACE project_level_build_settings , SPACE target_build_settings ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE value SPACE = SPACE target_build_settings [ setting_name ] SPACE || SPACE project_level_build_settings [ setting_name ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE value SPACE if SPACE value NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE setting SPACE = SPACE XCODE_SETTINGS [ setting_name ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE setting [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE read_build_setting ( setting [ LITERAL] , SPACE project_level_build_settings , SPACE target_build_settings ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE setting [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE setting [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALsetting_name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE clean_up_flags ( flags ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flags . flatten . map SPACE { | flag | SPACE flag . split ( LITERALLITERALLITERALLITERAL) SPACE } . flatten . map SPACE { | flag | SPACE flag . strip SPACE } . reject ( & LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE flag_and_each_child ( flag ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE yield SPACE flag NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE children SPACE = SPACE WARNING_GROUPS [ flag ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE children . each SPACE { | child_flag | SPACE yield SPACE child_flag SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE resolve_flags ( target_name , SPACE build_configuration_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flags SPACE = SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE project_level_build_configuration SPACE = SPACE @project . build_configurations . find SPACE { | configuration | SPACE configuration . name SPACE == SPACE build_configuration_name SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALbuild_configuration_name LITERALLITERALLITERALSPACE unless SPACE project_level_build_configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE project_level_build_settings SPACE = SPACE project_level_build_configuration . build_settings NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE target SPACE = SPACE @project . targets . find SPACE { | target | SPACE target . name SPACE == SPACE target_name SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE target_build_configuration SPACE = SPACE target . build_configurations . find SPACE { | configuration | SPACE configuration . name SPACE == SPACE build_configuration_name SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALbuild_configuration_name LITERALLITERALLITERALtarget . name LITERALLITERALLITERALSPACE unless SPACE target_build_configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE target_build_settings SPACE = SPACE target_build_configuration . build_settings NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE XCODE_SETTINGS . each SPACE do SPACE | setting_name , SPACE setting | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE unless SPACE setting [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE value SPACE = SPACE read_build_setting ( setting_name , SPACE project_level_build_settings , SPACE target_build_settings ) . to_sym NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flags_for_setting SPACE = SPACE setting [ LITERAL] [ value ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALvalue . inspect LITERALLITERALLITERALname LITERALLITERALLITERALSPACE unless SPACE flags_for_setting NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flags SPACE << SPACE flags_for_setting NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flags SPACE << SPACE read_build_setting ( LITERALLITERALLITERAL, SPACE project_level_build_settings , SPACE target_build_settings ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flags SPACE << SPACE read_build_setting ( LITERALLITERALLITERAL, SPACE project_level_build_settings , SPACE target_build_settings ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE clean_up_flags ( flags ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE resolve_warnings ( flags ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warning_states SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warnings_as_errors SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flags . each SPACE do SPACE | flag | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE flag NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warnings_as_errors SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flag_and_each_child ( $1 ) SPACE { | key | SPACE warning_states [ key ] SPACE = SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flag_and_each_child ( $1 ) SPACE { | key | SPACE warning_states [ key ] SPACE = SPACE true SPACE if SPACE warning_states [ key ] SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flag_and_each_child ( $1 ) SPACE { | key | SPACE warning_states [ key ] SPACE = SPACE false SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE flag_and_each_child ( $1 ) SPACE { | key | SPACE warning_states [ key ] SPACE = SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE default_value SPACE = SPACE warnings_as_errors SPACE ? SPACE LITERALSPACE : SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warning_states . keys . each SPACE do SPACE | flag | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warning_states [ flag ] SPACE = SPACE default_value SPACE if SPACE warning_states [ flag ] SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE warning_states NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Tool NEWLINE SPACE SPACE SPACE SPACE class SPACE Xcode NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE ProjectHelper NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Entitlement NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( plist ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @plist SPACE = SPACE plist NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE update_application_groups ( & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . update_hash! ( @plist , SPACE LITERALLITERALLITERAL, SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE InfoPlist NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( plist ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @plist SPACE = SPACE plist NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE update_bundle_identifier ( & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . update_hash! ( @plist , SPACE LITERALLITERALLITERAL, SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE bundle_version = ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . update_hash! ( @plist , SPACE LITERALLITERALLITERAL, SPACE value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE update_watch_app_bundle_identifier_if_present ( & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . update_hash! ( @plist , SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . update_hash! ( @plist , SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE bundle_version NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @plist [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE bundle_identifier NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @plist [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( xcodeproj_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @xcodeproj_path SPACE = SPACE Support . make_pathname ( xcodeproj_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @xcodeproj SPACE = SPACE Xcodeproj :: Project . open ( @xcodeproj_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE overwrite_in_all_build_settings ( key , SPACE value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE each_build_settings SPACE do SPACE | build_settings | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings . keys . each SPACE do SPACE | setting_name | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings . delete ( setting_name ) SPACE if SPACE setting_name . start_with? ( LITERALLITERALkey LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings [ key ] SPACE = SPACE value NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @xcodeproj . save NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE remove_in_all_build_settings ( key ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE each_build_settings SPACE do SPACE | build_settings | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings . keys . each SPACE do SPACE | setting_name | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings . delete ( setting_name ) SPACE if SPACE setting_name . start_with? ( LITERALLITERALkey LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings . delete ( key ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @xcodeproj . save NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE code_signing_identity = ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE overwrite_in_all_build_settings ( LITERALLITERALLITERAL, SPACE value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE provisioning_profile = ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE overwrite_in_all_build_settings ( LITERALLITERALLITERAL, SPACE value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE overwrite_target_attribute ( key , SPACE value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attributes SPACE = SPACE @xcodeproj . root_object . attributes NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attributes [ LITERALLITERALLITERAL] SPACE || = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @xcodeproj . targets . each SPACE do SPACE | target | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attributes [ LITERALLITERALLITERAL] [ target . uuid ] SPACE || = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE value SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attributes [ LITERALLITERALLITERAL] [ target . uuid ] . delete ( key ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attributes [ LITERALLITERALLITERAL] [ target . uuid ] [ key ] SPACE = SPACE value NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @xcodeproj . save NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE development_team = ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE overwrite_target_attribute ( LITERALLITERALLITERAL, SPACE value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE overwrite_in_all_build_settings ( LITERALLITERALLITERAL, SPACE value ) SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE update_provisioning_profiles ( provisioning_profiles ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE each_build_settings SPACE do SPACE | build_settings | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE bundle_identifier SPACE = SPACE build_settings [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE unless SPACE bundle_identifier NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE provisioning_profile SPACE = SPACE provisioning_profiles [ bundle_identifier ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE unless SPACE provisioning_profile NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings . keys . each SPACE do SPACE | setting_name | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings . delete ( setting_name ) SPACE if SPACE setting_name . start_with? ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings [ LITERALLITERALLITERAL] SPACE = SPACE provisioning_profile NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @xcodeproj . save NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE update_provisioning_profile_specifiers ( provisioning_profile_specifiers ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE each_build_settings SPACE do SPACE | build_settings | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE bundle_identifier SPACE = SPACE build_settings [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE unless SPACE bundle_identifier NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE provisioning_profile_specifier SPACE = SPACE provisioning_profile_specifiers [ bundle_identifier ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE unless SPACE provisioning_profile_specifier NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings . keys . each SPACE do SPACE | setting_name | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings . delete ( setting_name ) SPACE if SPACE setting_name . start_with? ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings [ LITERALLITERALLITERAL] SPACE = SPACE provisioning_profile_specifier NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @xcodeproj . save NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE update_existing_build_setting_values ( setting_name_to_update , SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE each_build_settings SPACE do SPACE | build_settings | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings . keys . each SPACE do SPACE | setting_name | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE setting_name_to_update SPACE == SPACE setting_name SPACE or SPACE setting_name . start_with? ( LITERALLITERALsetting_name_to_update LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_settings [ setting_name ] SPACE = SPACE block . call ( build_settings [ setting_name ] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @xcodeproj . save NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE update_product_bundle_identifier ( & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_existing_build_setting_values ( LITERALLITERALLITERAL, SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE update_entitlements ( & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_all_plists_for_build_setting ( LITERALLITERALLITERAL) SPACE do SPACE | plist_content | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE block . call ( Entitlement . new ( plist_content ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE update_info_plists ( & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_all_plists_for_build_setting ( LITERALLITERALLITERAL) SPACE do SPACE | plist_content | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE block . call ( InfoPlist . new ( plist_content ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE icon_paths NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_paths SPACE = SPACE [ ] NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_names SPACE = SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE all_plists_for_build_setting ( LITERALLITERALLITERAL) . each SPACE do SPACE | path , SPACE plist_content | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE keys SPACE = SPACE plist_content . keys . select SPACE { | key | SPACE key . start_with? ( LITERALLITERALLITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_names SPACE << SPACE keys . map SPACE { | key | SPACE plist_content [ key ] [ LITERALLITERALLITERAL] [ LITERALLITERALLITERAL] SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_names SPACE = SPACE icon_names . flatten . uniq NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_name_regexps SPACE = SPACE icon_names . map SPACE do SPACE | icon_name | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_name_extension SPACE = SPACE File . extname ( icon_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE icon_name_extension . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Regexp . new ( LITERALLITERALLITERALLITERALRegexp . escape ( icon_name ) LITERALLITERALLITERALLITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Regexp . new ( LITERALLITERALLITERALLITERALRegexp . escape ( File . basename ( icon_name , SPACE icon_name_extension ) ) LITERALLITERALLITERALRegexp . escape ( icon_name_extension ) LITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_paths SPACE << SPACE find_files_in_project SPACE do SPACE | project_file_path | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE basenames SPACE = SPACE [ SPACE project_file_path . basename . to_s , SPACE project_file_path . basename ( project_file_path . extname ) . to_s SPACE ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_name_regexps . any? SPACE { | re | SPACE re . match ( project_file_path . basename . to_s ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_asset_names SPACE = SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE each_build_settings SPACE do SPACE | build_settings | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE name SPACE = SPACE build_settings [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_asset_names SPACE << SPACE name SPACE if SPACE name SPACE and SPACE ! name . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_asset_names . uniq! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE asset_paths SPACE = SPACE find_files_in_project SPACE { | project_file_path | SPACE project_file_path . extname SPACE == SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_asset_names . each SPACE do SPACE | asset_name | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE asset_paths . each SPACE do SPACE | asset_path | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE json_path SPACE = SPACE asset_path . join ( LITERALLITERALasset_name LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE unless SPACE json_path . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE JSON . parse ( IO . read ( json_path ) ) [ LITERALLITERALLITERAL] . each SPACE do SPACE | image | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE unless SPACE image [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_path SPACE = SPACE json_path . dirname . join ( image [ LITERALLITERALLITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_paths SPACE << SPACE icon_path SPACE if SPACE icon_path . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE icon_paths . flatten . uniq NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE find_files_in_project NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE files SPACE = SPACE @xcodeproj . files . map SPACE { | file | SPACE file . real_path SPACE rescue SPACE nil SPACE } . compact . uniq NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE files . select SPACE do SPACE | project_file_path | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to_keep SPACE = SPACE yield SPACE project_file_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE each_build_settings NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @xcodeproj . build_configurations . each SPACE do SPACE | build_configuration | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE yield SPACE build_configuration . build_settings NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @xcodeproj . targets . each SPACE do SPACE | target | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE target . build_configurations . each SPACE do SPACE | build_configuration | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE yield SPACE build_configuration . build_settings NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE all_plists_for_build_setting ( build_setting_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_paths SPACE = SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE each_build_settings SPACE do SPACE | build_settings | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE path SPACE = SPACE build_settings [ build_setting_name ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_paths SPACE << SPACE path SPACE if SPACE path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_paths SPACE = SPACE file_paths . uniq . map SPACE { | relative_path | SPACE @xcodeproj_path . dirname . join ( relative_path ) . expand_path SPACE } . sort NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_paths . reject SPACE { | path | SPACE ! path . exist? SPACE } . map SPACE { | path | SPACE [ SPACE path , SPACE Xcodeproj :: Plist . read_from_path ( path ) SPACE ] SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE update_all_plists_for_build_setting ( build_setting_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE all_plists_for_build_setting ( build_setting_name ) . each SPACE do SPACE | path , SPACE plist_content | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE yield SPACE plist_content NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Xcodeproj :: Plist . write_to_path ( plist_content , SPACE path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE Tool NEWLINE SPACE SPACE SPACE SPACE class SPACE Xcode NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE UnchangedStoryboardFinder NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . read_xml_tag ( text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE h SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE s SPACE = SPACE StringScanner . new ( text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE nil SPACE unless SPACE s . scan ( LITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE tag_type SPACE = SPACE s [ LITERAL] . to_sym NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE while SPACE s . scan ( LITERALLITERALLITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE name , SPACE value SPACE = SPACE s [ LITERAL] , SPACE s [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE h [ name . to_sym ] SPACE = SPACE value NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE tag_type , SPACE h NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . find_issues ( environment ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE local_copy SPACE = SPACE environment . options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE unless SPACE local_copy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE status_for SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE diff SPACE = SPACE local_copy . diff_with_merge_base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE diff . rugged_diff . each_patch SPACE do SPACE | patch | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_path SPACE = SPACE patch . delta . new_file [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE if SPACE file_path SPACE == SPACE nil SPACE or SPACE patch . delta . binary? SPACE or SPACE ! LITERALLITERALLITERALLITERALLITERALLITERAL. match ( file_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE status_for [ file_path ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE status_for [ file_path ] SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE [ ] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE [ ] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE patch . each_hunk SPACE do SPACE | hunk | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE hunk . each_line SPACE do SPACE | line | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE unless SPACE line . deletion? SPACE or SPACE line . addition? SPACE or SPACE line . content . strip . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE line_content SPACE = SPACE line . content NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE tag_type , SPACE attributes SPACE = SPACE read_xml_tag ( line_content ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE tag_type SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attributes . delete ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attributes . delete ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE tag_type SPACE == SPACE LITERALSPACE and SPACE attributes [ LITERAL] SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attributes . delete ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE status_for [ file_path ] [ LITERAL] SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE break NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE line . addition? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE status_for [ file_path ] [ LITERAL] SPACE << SPACE [ tag_type , SPACE attributes ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE status_for [ file_path ] [ LITERAL] SPACE << SPACE [ tag_type , SPACE attributes ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE break SPACE if SPACE status_for [ file_path ] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE break SPACE if SPACE status_for [ file_path ] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE files_not_changed SPACE = SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE status_for . each SPACE do SPACE | file_path , SPACE status | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE found_other_changes SPACE = SPACE status_for [ file_path ] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE if SPACE found_other_changes NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE deleted_left SPACE = SPACE status [ LITERAL] . dup NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE status [ LITERAL] . each SPACE do SPACE | tag_type , SPACE attribute | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE index SPACE = SPACE deleted_left . index ( [ tag_type , SPACE attribute ] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE index NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE found_other_changes SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE break NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE deleted_left . delete_at SPACE index NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE if SPACE found_other_changes NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE files_not_changed SPACE << SPACE file_path SPACE if SPACE deleted_left . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE files_not_changed . each SPACE do SPACE | file_path | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE environment . add_issue ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE file_path , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE diff . file_line_to_diff_line ( file_path ) . keys . max , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE VersionControl NEWLINE SPACE SPACE SPACE SPACE module SPACE Git NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE LocalCopy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Reference SPACE = SPACE Support :: FrozenStruct . make_class ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE last_commit NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE local_copy . local_repo . ref ( LITERALLITERALLITERALself . remote LITERALLITERALLITERALself . ref LITERALLITERAL) . target NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE last_commit_id NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE last_commit . oid NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE content_of_file_from_last_commit ( file_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_path SPACE = SPACE Support . make_pathname ( file_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE unless SPACE file_path . relative? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE tree SPACE = SPACE self . last_commit . tree NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE object SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE object SPACE = SPACE tree . path ( file_path . to_s ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE Rugged :: TreeError NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE nil SPACE if SPACE object [ LITERAL] SPACE != SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Rugged :: Blob . lookup ( local_copy . local_repo , SPACE object [ LITERAL] ) . content NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE file_in_last_commit? ( file_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE last_commit . tree . include_file? ( local_copy . relative_path ( file_path ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE relative_path ( file_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_path SPACE = SPACE Support . make_pathname ( file_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE file_path . relative? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_path . relative_path_from ( directory ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( source , SPACE directory ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @directory SPACE = SPACE Support . make_pathname ( directory ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @source SPACE = SPACE source NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE source_has_base SPACE = SPACE source . respond_to? ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE directory . mkpath SPACE unless SPACE directory . exist? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALdirectory LITERALLITERALLITERALSPACE unless SPACE directory . directory? NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE File . exist? ( directory . join ( LITERALLITERALLITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ssh_url SPACE = SPACE source_has_base SPACE ? SPACE source . base . ssh_url SPACE : SPACE source . head . ssh_url NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE ssh_url , SPACE directory NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @local_repo SPACE = SPACE Rugged :: Repository . new ( directory . to_s ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE source_has_base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @base SPACE = SPACE Reference . merge ( source . base , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE local_repo . create_remote_if_needed ( source . base . ssh_url , SPACE source . base . owner ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE self , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @head SPACE = SPACE Reference . merge ( source . head , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE local_repo . create_remote_if_needed ( source . head . ssh_url , SPACE source . head . owner ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE self , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE change_directory SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE source_has_base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE base . remote NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE head . remote SPACE if SPACE base . remote SPACE != SPACE head . remote NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE head . remote NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE not_cleaned SPACE = SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration_content SPACE = SPACE @head . content_of_file_from_last_commit SPACE BuildEnvironment :: LOCAL_CONFIGURATION_FILE_NAME NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE configuration_content SPACE != SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration SPACE = SPACE Support . symbolize_keys ( YAML . load ( configuration_content ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE configuration [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE not_cleaned SPACE = SPACE [ SPACE configuration [ LITERAL] SPACE ] . flatten NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE additional_arguments_for_clean SPACE = SPACE not_cleaned . map SPACE { | pattern | SPACE [ LITERALLITERALLITERAL, SPACE pattern ] SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE * additional_arguments_for_clean . flatten NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE head . ref_type SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALhead . remote LITERALLITERALLITERALhead . ref LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALhead . ref LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support :: Shell . run SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE change_directory ( & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . debug SPACE LITERALLITERALLITERALdirectory LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Dir . chdir ( directory , SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . debug SPACE LITERALLITERALLITERALDir . pwd LITERALLITERALSPACE if SPACE block NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE file_in_head? ( file_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE local_repo . last_commit . tree . include_file? ( relative_path ( file_path ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE diff_with_merge_base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE unless SPACE base NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE head_commit SPACE = SPACE local_repo . last_commit NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE base_commit SPACE = SPACE local_repo . ref ( LITERALLITERALLITERALbase . remote LITERALLITERALLITERALbase . ref LITERALLITERAL) . target NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE merge_base_id SPACE = SPACE local_repo . merge_base ( head_commit , SPACE base_commit ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE merge_base SPACE = SPACE local_repo . lookup ( merge_base_id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE diff SPACE = SPACE merge_base . diff ( head_commit ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE diff . find_similar! ( LITERAL: SPACE true ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Git :: Diff . new ( head_commit . oid , SPACE diff , SPACE self ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Diff NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERAL, SPACE LITERAL, SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( head_commit_id , SPACE rugged_diff , SPACE source ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @head_commit_id SPACE = SPACE head_commit_id NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @rugged_diff SPACE = SPACE rugged_diff NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @source SPACE = SPACE source NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE file_line_to_diff_line ( file_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_name SPACE = SPACE file_name . to_s SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE @file_line_to_diff_line [ file_name ] SPACE if SPACE @file_line_to_diff_line NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @file_line_to_diff_line SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @rugged_diff . each_patch SPACE do SPACE | patch | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_path SPACE = SPACE patch . delta . new_file [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE if SPACE patch . delta . binary? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @file_line_to_diff_line [ file_path ] SPACE || = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE current_diff_line SPACE = SPACE - LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE patch . each_hunk SPACE do SPACE | hunk | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE current_diff_line SPACE += SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE line_number SPACE = SPACE hunk . new_start SPACE - SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE hunk . each_line SPACE do SPACE | line | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE current_diff_line SPACE += SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE [ LITERAL, SPACE LITERAL] . include? ( line . line_origin ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE line_number SPACE += SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @file_line_to_diff_line [ file_path ] [ line_number ] SPACE = SPACE current_diff_line NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @file_line_to_diff_line [ file_name ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE line_in_diff ( relative_path , SPACE line_in_file ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE nil SPACE if SPACE changed_binary_file? ( relative_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE nil SPACE unless SPACE file_line_to_diff_line ( relative_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_line_to_diff_line ( relative_path ) [ line_in_file ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE changed_binary_file? ( relative_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE relative_path SPACE = SPACE relative_path . to_s SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE @changed_binary_files . include? ( relative_path ) SPACE if SPACE @changed_binary_files NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @changed_binary_files SPACE = SPACE Set . new NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @rugged_diff . each_delta SPACE do SPACE | delta | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @changed_binary_files SPACE << SPACE delta . new_file [ LITERAL] SPACE if SPACE delta . binary? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @changed_binary_files . include? ( relative_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE file_changed? ( relative_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE relative_path SPACE = SPACE relative_path . to_s SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE changed_binary_file? ( relative_path ) SPACE or SPACE file_line_to_diff_line ( relative_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE line_related_to_changes? ( relative_path , SPACE line_in_file , SPACE opts SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE opts , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE true SPACE if SPACE changed_binary_file? ( relative_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE lines_around_related SPACE = SPACE opts [ LITERAL] SPACE || SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_line_to_diff_line_for_file SPACE = SPACE file_line_to_diff_line ( relative_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE false SPACE unless SPACE file_line_to_diff_line_for_file NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE true SPACE if SPACE file_line_to_diff_line_for_file [ line_in_file ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE false SPACE if SPACE lines_around_related SPACE == SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE lines_range SPACE = SPACE ( line_in_file SPACE - SPACE lines_around_related ) .. ( line_in_file SPACE + SPACE lines_around_related ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE lines_in_diff SPACE = SPACE file_line_to_diff_line_for_file . keys NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE lines_in_diff . any? SPACE { | line | SPACE lines_range . include? ( line ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE filter_out_unrelated_issues ( issues , SPACE options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE options , SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE issues . select SPACE do SPACE | issue | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( file_path SPACE = SPACE issue [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ( issue [ LITERAL] SPACE == SPACE LITERALSPACE or NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ( file_changed? ( file_path ) SPACE and SPACE line_related_to_changes? ( file_path , SPACE issue [ LITERAL] , SPACE LITERAL: SPACE options [ LITERAL] ) ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Dokumi NEWLINE SPACE SPACE module SPACE VersionControl NEWLINE SPACE SPACE SPACE SPACE module SPACE GitHub NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . read_configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration_path SPACE = SPACE BASE_DIRECTORY . join ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raw_configuration SPACE = SPACE YAML . load ( IO . read ( configuration_path ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raw_configuration . each SPACE do SPACE | host , SPACE configuration_for_host | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration_for_host SPACE = SPACE Support . symbolize_keys ( configuration_for_host ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE configuration_for_host , SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration [ host ] SPACE = SPACE configuration_for_host NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALSPACE if SPACE configuration . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . make_client ( host ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration SPACE = SPACE read_configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALhost LITERALLITERALLITERALSPACE unless SPACE configuration [ host ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Octokit :: Client . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE configuration [ host ] [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE configuration [ host ] [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE configuration [ host ] [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE true , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . branch_or_tag ( host , SPACE owner , SPACE repo , SPACE branch_or_tag_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( md SPACE = SPACE LITERALLITERALLITERALLITERALLITERALLITERAL. match ( branch_or_tag_name ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE LITERAL, SPACE md [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE github_client SPACE = SPACE GitHub . make_client ( host ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE branches SPACE = SPACE github_client . branches ( LITERALLITERALowner LITERALLITERALLITERALrepo LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE LITERAL, SPACE branch_or_tag_name SPACE if SPACE branches . any? SPACE { | branch | SPACE branch [ LITERAL] SPACE == SPACE branch_or_tag_name SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE tags SPACE = SPACE github_client . tags ( LITERALLITERALowner LITERALLITERALLITERALrepo LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE LITERAL, SPACE branch_or_tag_name SPACE if SPACE tags . any? SPACE { | tag | SPACE tag [ LITERAL] SPACE == SPACE branch_or_tag_name SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALbranch_or_tag_name LITERALLITERALLITERALowner LITERALLITERALLITERALrepo LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Branch NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Reference SPACE = SPACE Support :: FrozenStruct . make_class ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( host , SPACE owner , SPACE repo , SPACE branch_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @github_client SPACE = SPACE GitHub . make_client ( host ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @github_repository SPACE = SPACE @github_client . repository ( { LITERAL: SPACE owner , SPACE LITERAL: SPACE repo } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @head SPACE = SPACE Reference . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE owner , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE repo , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @github_repository . ssh_url , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE branch_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE fetch_into ( directory ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Git :: LocalCopy . new ( self , SPACE directory ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Tag NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Reference SPACE = SPACE Support :: FrozenStruct . make_class ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( host , SPACE owner , SPACE repo , SPACE tag_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @github_client SPACE = SPACE GitHub . make_client ( host ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @github_repository SPACE = SPACE @github_client . repository ( { LITERAL: SPACE owner , SPACE LITERAL: SPACE repo } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @head SPACE = SPACE Reference . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE owner , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE repo , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @github_repository . ssh_url , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE tag_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE fetch_into ( directory ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Git :: LocalCopy . new ( self , SPACE directory ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE PullRequest NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERAL, SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Reference SPACE = SPACE Support :: FrozenStruct . make_class ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE request_github_pull_request NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @github_client . pull_request ( { LITERAL: SPACE @owner , SPACE LITERAL: SPACE @repo } , SPACE @number ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( host , SPACE owner , SPACE repo , SPACE number ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @host , SPACE @owner , SPACE @repo , SPACE @number SPACE = SPACE host , SPACE owner , SPACE repo , SPACE number NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @github_client SPACE = SPACE GitHub . make_client ( host ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @github_pull_request SPACE = SPACE request_github_pull_request NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @github_commits SPACE = SPACE @github_pull_request . rels [ LITERAL] . get . data NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE github_base SPACE = SPACE @github_pull_request . base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @base SPACE = SPACE Reference . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE owner , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE repo , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE github_base . repo . ssh_url , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE github_base . ref , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE github_head SPACE = SPACE @github_pull_request . head NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @head SPACE = SPACE Reference . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE github_head . user . login , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE github_head . repo . name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE github_head . repo . ssh_url , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE github_head . ref , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE fetch_into ( directory ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Git :: LocalCopy . new ( self , SPACE directory ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE validate_comment ( comment ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE comment , SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL] . any? SPACE { | key | SPACE comment [ key ] SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL] . all? SPACE { | key | SPACE comment [ key ] SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE add_comment ( comment ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE validate_comment SPACE comment NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE repo SPACE = SPACE { LITERAL: SPACE base . owner , SPACE LITERAL: SPACE base . repo } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE comment [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @github_client . create_pull_request_comment ( repo , SPACE @number , SPACE comment [ LITERAL] , SPACE comment [ LITERAL] , SPACE comment [ LITERAL] , SPACE comment [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @github_client . add_comment ( repo , SPACE @number , SPACE comment [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE Octokit :: UnprocessableEntity SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . logger . error SPACE LITERALLITERALLITERALcomment . inspect LITERALLITERALLITERALe . inspect LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE has_comment? ( comment ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE validate_comment SPACE comment NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE comment [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @review_comments SPACE || = SPACE @github_pull_request . rels [ LITERAL] . get . data NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @review_comments . any? SPACE do SPACE | github_comment | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE github_comment . body SPACE == SPACE comment [ LITERAL] SPACE and NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE github_comment . commit_id SPACE == SPACE comment [ LITERAL] SPACE and NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE github_comment . path SPACE == SPACE comment [ LITERAL] SPACE and NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE github_comment . position SPACE == SPACE comment [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @comments SPACE || = SPACE @github_pull_request . rels [ LITERAL] . get . data NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @comments . any? SPACE { | github_comment | SPACE github_comment . body SPACE == SPACE comment [ LITERAL] SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE body NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @github_pull_request [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE web_url_for_file_in_commit ( relative_path , SPACE commit_id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERAL@github_pull_request . head . repo . html_url LITERALLITERALLITERALcommit_id LITERALLITERALLITERALrelative_path LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . markdown_for_issue ( issue ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Support . validate_hash SPACE issue , SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE tool_name SPACE = SPACE issue [ LITERAL] . to_s . capitalize . gsub ( LITERALLITERALLITERAL) SPACE { | string | SPACE LITERALLITERALLITERALSPACE + SPACE string [ - LITERAL] . upcase SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALtool_name LITERALLITERALLITERALissue [ LITERAL] LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALtool_name LITERALLITERALLITERALissue [ LITERAL] LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALissue [ LITERAL] LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE add_comments_for_issues ( issues , SPACE diff ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE issues SPACE = SPACE issues . sort_by SPACE { | issue | SPACE [ issue [ LITERAL] SPACE || SPACE Pathname . new ( LITERALLITERAL) , SPACE issue [ LITERAL] SPACE || SPACE LITERAL] SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE comment_markdown SPACE = SPACE LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE previous_file_path SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE issues . each SPACE do SPACE | issue | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE line_in_file SPACE = SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE line_in_diff SPACE = SPACE diff . line_in_diff ( issue [ LITERAL] , SPACE line_in_file ) SPACE if SPACE line_in_file NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE line_in_file SPACE and SPACE line_in_diff NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE body SPACE = SPACE self . class . markdown_for_issue ( issue ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE comment SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE body , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE issue [ LITERAL] . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE line_in_diff , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE diff . head_commit_id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE add_comment ( comment ) SPACE unless SPACE has_comment? ( comment ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_in_tree SPACE = SPACE diff . source . file_in_head? ( issue [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE file_url SPACE = SPACE web_url_for_file_in_commit ( issue [ LITERAL] , SPACE diff . head_commit_id ) SPACE if SPACE file_in_tree NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE previous_file_path SPACE != SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE file_in_tree NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE comment_markdown SPACE << SPACE LITERALLITERALLITERALLITERALissue [ LITERAL] LITERALLITERALLITERALfile_url LITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE comment_markdown SPACE << SPACE LITERALLITERALLITERALissue [ LITERAL] LITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE comment_markdown SPACE << SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE line SPACE = SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE comment_markdown SPACE << SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE line NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE file_in_tree NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE comment_markdown SPACE << SPACE LITERALLITERALLITERALline LITERALLITERALLITERALfile_url LITERALLITERALLITERALLITERALline LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE comment_markdown SPACE << SPACE LITERALLITERALLITERALline LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE comment_markdown SPACE << SPACE LITERALLITERALself . class . markdown_for_issue ( issue ) LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE previous_file_path SPACE = SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE comment_markdown . strip! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE comment SPACE = SPACE { LITERAL: SPACE comment_markdown } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE add_comment ( comment ) SPACE if SPACE comment_markdown . length SPACE > SPACE LITERALSPACE and SPACE ! has_comment? ( comment ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Rugged :: Repository NEWLINE SPACE SPACE def SPACE create_remote_if_needed ( remote_url_wanted , SPACE remote_name_suggestion ) NEWLINE SPACE SPACE SPACE SPACE remotes . each SPACE do SPACE | remote | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE remote . name SPACE if SPACE remote . url SPACE == SPACE remote_url_wanted NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE remote_name_used SPACE = SPACE remote_name_suggestion NEWLINE SPACE SPACE SPACE SPACE number SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE while SPACE remotes . any? SPACE { | remote | SPACE remote . name SPACE == SPACE remote_name_suggestion SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE number SPACE += SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE remote_name_used SPACE = SPACE LITERALLITERALremote_name_suggestion LITERALLITERALnumber LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE remotes . create SPACE remote_name_used , SPACE remote_url_wanted NEWLINE SPACE SPACE SPACE SPACE remote_name_used NEWLINE SPACE SPACE end NEWLINE end NEWLINE NEWLINE class SPACE Rugged :: Tree NEWLINE SPACE SPACE def SPACE include_file? ( relative_path ) NEWLINE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE path ( relative_path . to_s ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE true NEWLINE SPACE SPACE SPACE SPACE rescue SPACE Rugged :: TreeError NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE false NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
NEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE $LOAD_PATH . unshift SPACE File . expand_path ( File . join ( File . dirname ( $0 ) , SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) ) NEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE class SPACE TestFindbugs SPACE < SPACE Minitest :: Test NEWLINE SPACE SPACE def SPACE build_script NEWLINE SPACE SPACE SPACE SPACE File . expand_path ( File . join ( File . dirname ( $0 ) , SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE test_static_analysis NEWLINE SPACE SPACE SPACE SPACE issues SPACE = SPACE Dokumi :: Command . review ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE build_script ) NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues . length NEWLINE NEWLINE SPACE SPACE SPACE SPACE issues . each SPACE do SPACE | issue | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE assert_equal SPACE Dokumi :: Support . make_pathname ( LITERALLITERALLITERAL) , SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
NEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE $LOAD_PATH . unshift SPACE File . expand_path ( File . join ( File . dirname ( $0 ) , SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) ) NEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE class SPACE TestInfer SPACE < SPACE Minitest :: Test NEWLINE SPACE SPACE def SPACE build_script NEWLINE SPACE SPACE SPACE SPACE File . expand_path ( File . join ( File . dirname ( $0 ) , SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE test_static_analysis NEWLINE SPACE SPACE SPACE SPACE issues SPACE = SPACE Dokumi :: Command . review ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE build_script ) NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues . length NEWLINE NEWLINE SPACE SPACE SPACE SPACE issues . each SPACE do SPACE | issue | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE assert_equal SPACE Dokumi :: Support . make_pathname ( LITERALLITERALLITERAL) , SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
NEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE $LOAD_PATH . unshift SPACE File . expand_path ( File . join ( File . dirname ( $0 ) , SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) ) NEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE class SPACE TestFindbugs SPACE < SPACE Minitest :: Test NEWLINE SPACE SPACE def SPACE build_script NEWLINE SPACE SPACE SPACE SPACE File . expand_path ( File . join ( File . dirname ( $0 ) , SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE test_static_analysis NEWLINE SPACE SPACE SPACE SPACE issues SPACE = SPACE Dokumi :: Command . review ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE build_script ) NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues . length NEWLINE SPACE SPACE SPACE SPACE issues . each SPACE { SPACE | issue | SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues [ LITERAL] [ LITERAL] NEWLINE NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
NEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE $LOAD_PATH . unshift SPACE File . expand_path ( File . join ( File . dirname ( $0 ) , SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) ) NEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE class SPACE TestReviewXcodeProject SPACE < SPACE Minitest :: Test NEWLINE SPACE SPACE def SPACE build_script NEWLINE SPACE SPACE SPACE SPACE File . expand_path ( File . join ( File . dirname ( $0 ) , SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE test_review_without_error NEWLINE SPACE SPACE SPACE SPACE issues SPACE = SPACE Dokumi :: Command . review ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE build_script ) NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE [ ] , SPACE issues NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE test_review_with_failing_test NEWLINE SPACE SPACE SPACE SPACE issues SPACE = SPACE Dokumi :: Command . review ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE build_script ) NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues . length NEWLINE SPACE SPACE SPACE SPACE issue SPACE = SPACE issues . first NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE Dokumi :: Support . make_pathname ( LITERALLITERALLITERAL) , SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE test_review_with_unchanged_xib NEWLINE SPACE SPACE SPACE SPACE issues SPACE = SPACE Dokumi :: Command . review ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE build_script ) NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues . length NEWLINE SPACE SPACE SPACE SPACE issue SPACE = SPACE issues . first NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE Dokumi :: Support . make_pathname ( LITERALLITERALLITERAL) , SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE test_static_analysis NEWLINE SPACE SPACE SPACE SPACE issues SPACE = SPACE Dokumi :: Command . review ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE build_script ) NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues . length NEWLINE SPACE SPACE SPACE SPACE issue SPACE = SPACE issues . first NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE Dokumi :: Support . make_pathname ( LITERALLITERALLITERAL) , SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE test_review_with_linker_error NEWLINE SPACE SPACE SPACE SPACE issues SPACE = SPACE Dokumi :: Command . review ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE build_script ) NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues . length NEWLINE SPACE SPACE SPACE SPACE issue SPACE = SPACE issues . first NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE test_import_non_existing_file NEWLINE SPACE SPACE SPACE SPACE issues SPACE = SPACE Dokumi :: Command . review ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE build_script ) NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues . length NEWLINE SPACE SPACE SPACE SPACE issue SPACE = SPACE issues . first NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE Dokumi :: Support . make_pathname ( LITERALLITERALLITERAL) , SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE test_important_warning_removed NEWLINE SPACE SPACE SPACE SPACE issues SPACE = SPACE Dokumi :: Command . review ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE build_script ) NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues . length NEWLINE SPACE SPACE SPACE SPACE issues . each SPACE do SPACE | issue | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE assert_nil SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE assert_nil SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE assert_includes SPACE issue [ LITERAL] , SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE test_review_with_misplaced_xib NEWLINE SPACE SPACE SPACE SPACE issues SPACE = SPACE Dokumi :: Command . review ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE build_script ) NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issues . length NEWLINE SPACE SPACE SPACE SPACE issue SPACE = SPACE issues . first NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE Dokumi :: Support . make_pathname ( LITERALLITERALLITERAL) , SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE issue [ LITERAL] , SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE assert_equal SPACE LITERAL, SPACE issue [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE assert_includes SPACE issue [ LITERAL] , SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
target_project SPACE = SPACE LITERALLITERALLITERALNEWLINE NEWLINE case SPACE action NEWLINE when SPACE LITERALNEWLINE SPACE SPACE android . findbugs SPACE target_project NEWLINE else NEWLINE SPACE SPACE raise SPACE LITERALLITERALLITERALaction . inspect LITERALLITERALNEWLINE end NEWLINE 
target_project SPACE = SPACE LITERALLITERALLITERALNEWLINE NEWLINE case SPACE action NEWLINE when SPACE LITERALNEWLINE SPACE SPACE android . infer SPACE target_project NEWLINE else NEWLINE SPACE SPACE raise SPACE LITERALLITERALLITERALaction . inspect LITERALLITERALNEWLINE end NEWLINE 
target_project SPACE = SPACE LITERALLITERALLITERALNEWLINE NEWLINE case SPACE action NEWLINE when SPACE LITERALNEWLINE SPACE SPACE android . lint SPACE target_project NEWLINE else NEWLINE SPACE SPACE raise SPACE LITERALLITERALLITERALaction . inspect LITERALLITERALNEWLINE end NEWLINE 
project_name SPACE = SPACE LITERALLITERALLITERALNEWLINE to_build SPACE = SPACE File . exist? ( LITERALLITERALLITERAL) SPACE ? SPACE LITERALLITERALLITERALSPACE : SPACE project_name NEWLINE scheme SPACE = SPACE LITERALLITERALLITERALNEWLINE simulator_destinations SPACE = SPACE [ NEWLINE SPACE SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE LITERALLITERALLITERAL, NEWLINE ] NEWLINE NEWLINE xcode . install_pods SPACE if SPACE File . exist? ( LITERALLITERALLITERAL) NEWLINE NEWLINE case SPACE action NEWLINE when SPACE LITERALNEWLINE SPACE SPACE xcode . require_warnings SPACE to_build , SPACE LITERAL: SPACE scheme , SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE xcode . find_unchanged_storyboards NEWLINE SPACE SPACE xcode . find_misplaced_constraints NEWLINE SPACE SPACE xcode . analyze ( to_build , SPACE LITERAL: SPACE scheme ) SPACE unless SPACE error_found? NEWLINE SPACE SPACE xcode . test ( to_build , SPACE LITERAL: SPACE scheme , SPACE LITERAL: SPACE simulator_destinations ) SPACE unless SPACE error_found? NEWLINE else NEWLINE SPACE SPACE raise SPACE LITERALLITERALLITERALaction . inspect LITERALLITERALNEWLINE end NEWLINE 
require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE begin NEWLINE SPACE SPACE require SPACE LITERALNEWLINE rescue SPACE LoadError NEWLINE else NEWLINE SPACE SPACE require SPACE LITERALNEWLINE end NEWLINE NEWLINE module SPACE GarageClient NEWLINE SPACE SPACE class SPACE << SPACE self NEWLINE SPACE SPACE SPACE SPACE GarageClient :: Configuration . keys . each SPACE do SPACE | key | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE delegate SPACE key , SPACE LITERALLITERALkey LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE delegate SPACE LITERAL, SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @configuration SPACE || = SPACE GarageClient :: Configuration . new NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE configure ( & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE configuration . instance_eval ( & block ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GarageClient NEWLINE SPACE SPACE class SPACE Client NEWLINE SPACE SPACE SPACE SPACE include SPACE GarageClient :: Request NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . property ( key ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE define_method ( key ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options . fetch ( key ) SPACE { SPACE GarageClient . configuration . send ( key ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE define_method ( LITERALLITERALkey LITERALLITERALLITERAL) SPACE do SPACE | value | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options [ key ] SPACE = SPACE value NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE attr_reader SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE property SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE property SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE property SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE property SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE property SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE initialize ( options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require_necessaries ( options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @options SPACE = SPACE options NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE headers NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @headers SPACE || = SPACE GarageClient . configuration . headers . merge ( given_headers . stringify_keys ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE alias SPACE LITERALSPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE headers = ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @headers SPACE = SPACE value NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE alias SPACE LITERAL= SPACE LITERAL= NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE access_token NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE access_token = ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE = SPACE value NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE me ( params SPACE = SPACE { } , SPACE options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE get ( LITERAL, SPACE params , SPACE options ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE conn NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @conn SPACE || = SPACE connection NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE apply_auth_middleware ( faraday_builder ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE faraday_builder . authorization SPACE LITERAL, SPACE access_token SPACE if SPACE access_token NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE connection NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Faraday . new ( LITERAL: SPACE headers , SPACE LITERAL: SPACE endpoint ) SPACE do SPACE | builder | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE builder . use SPACE Faraday :: Response :: Logger SPACE if SPACE verbose NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE builder . use SPACE FaradayMiddleware :: Mashify NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE builder . use SPACE Faraday :: Response :: ParseJson , SPACE LITERALSPACE = > SPACE LITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE builder . use SPACE GarageClient :: Response :: Cacheable , SPACE LITERAL: SPACE cacher SPACE if SPACE cacher NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE builder . use SPACE GarageClient :: Response :: RaiseHttpException NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE builder . use SPACE Faraday :: Request :: Multipart NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE builder . use SPACE GarageClient :: Request :: JsonEncoded NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE builder . use SPACE GarageClient :: Request :: PropagateRequestId NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE apply_auth_middleware SPACE builder NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE builder . adapter ( * adapter ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE given_headers NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE || SPACE options [ LITERAL] SPACE || SPACE { } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE require_necessaries ( options ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ! options [ LITERAL] SPACE && SPACE ! default_options . endpoint NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE default_options NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient . configuration NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GarageClient NEWLINE SPACE SPACE class SPACE Configuration NEWLINE SPACE SPACE SPACE SPACE DEFAULTS SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE nil , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false , NEWLINE SPACE SPACE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . keys NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE DEFAULTS . keys SPACE + SPACE [ LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE initialize ( options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @options SPACE = SPACE options NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE options NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @options SPACE || = SPACE { } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE reset NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @options SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE DEFAULTS . keys . each SPACE do SPACE | key | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE define_method ( key ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options . fetch ( key , SPACE DEFAULTS [ key ] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE define_method ( LITERALLITERALkey LITERALLITERALLITERAL) SPACE do SPACE | value | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options [ key ] SPACE = SPACE value NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE endpoint NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE or SPACE raise SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE endpoint = ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE = SPACE value NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE or SPACE raise SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE name = ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE = SPACE value NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE default_user_agent NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALGarageClient :: VERSION LITERALLITERALLITERALname LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE headers NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE options . fetch ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE default_user_agent , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE headers = ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE = SPACE value NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE alias SPACE LITERALSPACE LITERALNEWLINE SPACE SPACE SPACE SPACE alias SPACE LITERAL= SPACE LITERAL= NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GarageClient NEWLINE SPACE SPACE class SPACE Error SPACE < SPACE StandardError NEWLINE SPACE SPACE SPACE SPACE attr_accessor SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE initialize ( response SPACE = SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @response SPACE = SPACE response NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE case NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE String SPACE === SPACE response NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE response . respond_to? ( LITERAL) SPACE && SPACE response [ LITERAL] . respond_to? ( LITERAL) SPACE && SPACE response [ LITERAL] . is_a? ( URI :: HTTP ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALresponse [ LITERAL] . upcase LITERALLITERALLITERALresponse [ LITERAL] LITERALLITERALLITERALresponse [ LITERAL] LITERALLITERALLITERALresponse [ LITERAL] LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE super NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE class SPACE ClientError SPACE < SPACE Error ; SPACE end NEWLINE SPACE SPACE class SPACE BadRequest SPACE < SPACE ClientError ; SPACE end NEWLINE SPACE SPACE class SPACE Unauthorized SPACE < SPACE ClientError ; SPACE end NEWLINE SPACE SPACE class SPACE Forbidden SPACE < SPACE ClientError ; SPACE end NEWLINE SPACE SPACE class SPACE NotFound SPACE < SPACE ClientError ; SPACE end NEWLINE SPACE SPACE class SPACE NotAcceptable SPACE < SPACE ClientError ; SPACE end NEWLINE SPACE SPACE class SPACE Conflict SPACE < SPACE ClientError ; SPACE end NEWLINE SPACE SPACE class SPACE UnsupportedMediaType SPACE < SPACE ClientError ; SPACE end NEWLINE SPACE SPACE class SPACE UnprocessableEntity SPACE < SPACE ClientError ; SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE class SPACE ServerError SPACE < SPACE Error ; SPACE end NEWLINE SPACE SPACE class SPACE InternalServerError SPACE < SPACE ServerError ; SPACE end NEWLINE SPACE SPACE class SPACE ServiceUnavailable SPACE < SPACE ServerError ; SPACE end NEWLINE SPACE SPACE class SPACE GatewayTimeout SPACE < SPACE ServerError ; SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE class SPACE UnsupportedResource SPACE < SPACE Error ; SPACE end NEWLINE SPACE SPACE class SPACE InvalidResponseType SPACE < SPACE Error ; SPACE end NEWLINE end NEWLINE 
module SPACE GarageClient NEWLINE SPACE SPACE class SPACE Railtie SPACE < SPACE :: Rails :: Railtie NEWLINE SPACE SPACE SPACE SPACE initializer SPACE LITERALSPACE do SPACE | app | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE RailsInitializer . set_default_name NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE module SPACE RailsInitializer NEWLINE SPACE SPACE SPACE SPACE def SPACE self . set_default_name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE GarageClient . configuration . options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient . configure SPACE do SPACE | c | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE c . name SPACE = SPACE :: Rails . application . class . parent_name . underscore NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GarageClient NEWLINE SPACE SPACE module SPACE Request NEWLINE SPACE SPACE SPACE SPACE MIME_DICT SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE get ( path , SPACE params SPACE = SPACE nil , SPACE options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE request ( LITERAL, SPACE path , SPACE params , SPACE nil , SPACE options ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE post ( path , SPACE body SPACE = SPACE nil , SPACE options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE request ( LITERAL, SPACE path , SPACE { } , SPACE body , SPACE options ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE put ( path , SPACE body SPACE = SPACE nil , SPACE options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE request ( LITERAL, SPACE path , SPACE { } , SPACE body , SPACE options ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE delete ( path , SPACE options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE request ( LITERAL, SPACE path , SPACE options ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE private NEWLINE SPACE SPACE SPACE SPACE def SPACE request ( method , SPACE path , SPACE params SPACE = SPACE { } , SPACE body SPACE = SPACE nil , SPACE options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE conn . send ( method ) SPACE do SPACE | request | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request . url ( path , SPACE params ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request . body SPACE = SPACE body SPACE if SPACE body NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request . headers . update ( options [ LITERAL] ) SPACE if SPACE options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request . options . timeout SPACE = SPACE options [ LITERAL] SPACE if SPACE options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request . options . open_timeout SPACE = SPACE options [ LITERAL] SPACE if SPACE options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE ? SPACE response SPACE : SPACE GarageClient :: Response . new ( self , SPACE response ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE request_with_prefix ( method , SPACE path , SPACE * args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE path SPACE = SPACE LITERALLITERALpath_prefix LITERALLITERALpath LITERALLITERALSPACE unless SPACE path . start_with? ( path_prefix ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE request_without_prefix ( method , SPACE path , SPACE * args ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE alias SPACE request_without_prefix SPACE request NEWLINE SPACE SPACE SPACE SPACE alias SPACE request SPACE request_with_prefix NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALLITERALLITERALNEWLINE NEWLINE module SPACE GarageClient NEWLINE SPACE SPACE class SPACE Resource NEWLINE SPACE SPACE SPACE SPACE attr_accessor SPACE LITERAL, SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . resource? ( hash ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE hash . kind_of? ( Hash ) SPACE && SPACE hash . has_key? ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE initialize ( client , SPACE data ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @client SPACE = SPACE client NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @data SPACE = SPACE Hashie :: Mash . new ( data ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE properties NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @properties SPACE || = SPACE data . keys . map ( & LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE links NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @links SPACE || = SPACE data . _links SPACE ? SPACE data . _links . keys . map ( & LITERAL) SPACE : SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @self_path SPACE || = SPACE data . _links . self . href NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE update ( body SPACE = SPACE nil , SPACE options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . put ( self_path , SPACE body , SPACE options ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE destroy ( options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . delete ( self_path , SPACE options ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE method_missing ( name , SPACE * args , SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE properties . include? ( name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE value SPACE = SPACE data [ name ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE self . class . resource? ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient :: Resource . new ( client , SPACE value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE value NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE links . include? ( name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE path SPACE = SPACE data . _links [ name ] . href NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . get ( path , SPACE * args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE nested_resource_creation_method? ( name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE path SPACE = SPACE data . _links [ name . to_s . sub ( LITERALLITERALLITERAL, SPACE LITERAL) ] . href NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . post ( path , SPACE * args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE NoMethodError . new ( LITERALLITERALLITERALname LITERALLITERALLITERALdata LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE respond_to_missing? ( name , SPACE include_private ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ! ! ( properties . include? ( name ) SPACE || SPACE links . include? ( name ) SPACE || SPACE nested_resource_creation_method? ( name ) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE nested_resource_creation_method? ( name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ! ! ( name SPACE =~ SPACE LITERALLITERALLITERALLITERALLITERALLITERALSPACE && SPACE links . include? ( $1 . to_sym ) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALLITERALLITERALNEWLINE NEWLINE module SPACE GarageClient NEWLINE SPACE SPACE class SPACE Response NEWLINE SPACE SPACE SPACE SPACE MIME_DICT SPACE = SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE ACCEPT_BODY_TYPES SPACE = SPACE [ Array , SPACE Hash , SPACE NilClass ] NEWLINE NEWLINE SPACE SPACE SPACE SPACE attr_accessor SPACE LITERAL, SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE initialize ( client , SPACE response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @client SPACE = SPACE client NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @response SPACE = SPACE response NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . env [ LITERAL] SPACE = SPACE nil SPACE if SPACE response . env [ LITERAL] SPACE == SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE ACCEPT_BODY_TYPES . any? SPACE { | type | SPACE type SPACE === SPACE response . body SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: InvalidResponseType , SPACE LITERALLITERALLITERALresponse . body . class LITERALLITERALLITERALresponse . body LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE link NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @link SPACE || = SPACE response . headers [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE total_count NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE @total_count NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @total_count SPACE = SPACE response . headers [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @total_count SPACE = SPACE @total_count . to_i SPACE if SPACE @total_count NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @total_count NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE body NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @body SPACE || = SPACE case SPACE response . body NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE Array NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . body . map SPACE { | res | SPACE GarageClient :: Resource . new ( client , SPACE res ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE Hash NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE dictionary_response? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Hash [ response . body . map SPACE { | id , SPACE res | SPACE [ id , SPACE GarageClient :: Resource . new ( client , SPACE res ) ] SPACE } ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient :: Resource . new ( client , SPACE response . body ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE NilClass NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE next_page_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE next_page_link . try ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE prev_page_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE prev_page_link . try ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE first_page_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE first_page_link . try ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE last_page_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE last_page_link . try ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE has_next_page? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ! ! next_page_link NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE has_prev_page? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ! ! prev_page_link NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE has_first_page? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ! ! first_page_link NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE has_last_page? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ! ! last_page_link NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE next_page_link NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE parsed_link_header . try ( LITERAL, SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE prev_page_link NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE parsed_link_header . try ( LITERAL, SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE first_page_link NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE parsed_link_header . try ( LITERAL, SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE last_page_link NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE parsed_link_header . try ( LITERAL, SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE respond_to_missing? ( name , SPACE include_private ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE body . respond_to? ( name , SPACE include_private ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE method_missing ( name , SPACE * args , SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE body . send ( name , SPACE * args , SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE dictionary_response? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . headers [ LITERAL] SPACE =~ SPACE MIME_DICT NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE parsed_link_header NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @parsed_link_header SPACE || = SPACE LinkHeader . parse ( link ) SPACE if SPACE link NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GarageClient NEWLINE SPACE SPACE VERSION SPACE = SPACE LITERALNEWLINE end NEWLINE 
NEWLINE module SPACE GarageClient NEWLINE SPACE SPACE module SPACE Cachers NEWLINE SPACE SPACE SPACE SPACE class SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( env ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @env SPACE = SPACE env NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE call NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE store . read ( key , SPACE options ) SPACE if SPACE read_from_cache? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE response NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . env . merge! ( @env ) SPACE { | _ , SPACE self_val , SPACE other_val | SPACE self_val SPACE || SPACE other_val SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE yield NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE store . write ( key , SPACE response , SPACE options ) SPACE if SPACE written_to_cache? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE read_from_cache? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE NotImplementedError , SPACE LITERALLITERALLITERALself . class LITERALLITERALLITERAL__method__ LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE written_to_cache? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE NotImplementedError , SPACE LITERALLITERALLITERALself . class LITERALLITERALLITERAL__method__ LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE key NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE NotImplementedError , SPACE LITERALLITERALLITERALself . class LITERALLITERALLITERAL__method__ LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE store NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE NotImplementedError , SPACE LITERALLITERALLITERALself . class LITERALLITERALLITERAL__method__ LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE options NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GarageClient NEWLINE SPACE SPACE module SPACE Request NEWLINE SPACE SPACE SPACE SPACE class SPACE JsonEncoded SPACE < SPACE Faraday :: Middleware NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE call ( env ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request SPACE = SPACE Request . new ( env ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE request . json_compatible? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env [ LITERAL] [ LITERALLITERALLITERAL] SPACE || = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env [ LITERAL] SPACE = SPACE env [ LITERAL] . to_json NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @app . call ( env ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Request NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( env ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @env SPACE = SPACE env NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE json_compatible? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE has_json_compatible_body? SPACE && SPACE has_json_compatible_content_type? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE has_json_compatible_content_type? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE headers [ LITERALLITERALLITERAL] . nil? SPACE || SPACE headers [ LITERALLITERALLITERAL] SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE has_json_compatible_body? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE body NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE Array , SPACE Hash NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE body NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE headers NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE has_json_content_type? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE headers [ LITERALLITERALLITERAL] SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE has_content_type? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ! headers [ LITERALLITERALLITERAL] . nil? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GarageClient NEWLINE SPACE SPACE module SPACE Request NEWLINE SPACE SPACE SPACE SPACE class SPACE PropagateRequestId SPACE < SPACE Faraday :: Middleware NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE call ( env ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE Thread . current [ LITERAL] SPACE && SPACE ! env [ LITERAL] [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env [ LITERAL] [ LITERALLITERALLITERAL] SPACE = SPACE Thread . current [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @app . call ( env ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALLITERALLITERALNEWLINE NEWLINE module SPACE GarageClient NEWLINE SPACE SPACE class SPACE Response NEWLINE SPACE SPACE SPACE SPACE class SPACE Cacheable SPACE < SPACE Faraday :: Response :: Middleware NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE register_middleware SPACE LITERAL: SPACE self NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( app , SPACE args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE super ( app ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @cacher_class SPACE = SPACE args [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE validate! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE call ( env ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @cacher_class . new ( env ) . call SPACE { SPACE @app . call ( env ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE validate! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE @cacher_class NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE ArgumentError , SPACE LITERALLITERALLITERALself . class LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE module SPACE GarageClient NEWLINE SPACE SPACE class SPACE Response NEWLINE SPACE SPACE SPACE SPACE class SPACE RaiseHttpException SPACE < SPACE Faraday :: Response :: Middleware NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ClientErrorStatuses SPACE = SPACE LITERAL... LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ServerErrorStatuses SPACE = SPACE LITERAL... LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE call ( env ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @app . call ( env ) . on_complete SPACE do SPACE | response | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE resp SPACE = SPACE response NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE response [ LITERAL] . to_i NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: BadRequest . new ( resp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: Unauthorized . new ( resp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: Forbidden . new ( resp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: NotFound . new ( resp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: NotAcceptable . new ( resp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: Conflict . new ( resp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: UnsupportedMediaType . new ( resp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: UnprocessableEntity . new ( resp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: InternalServerError . new ( resp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: ServiceUnavailable . new ( resp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: GatewayTimeout . new ( resp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE ClientErrorStatuses NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: ClientError . new ( resp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE ServerErrorStatuses NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE GarageClient :: ServerError . new ( resp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALLITERALLITERALNEWLINE NEWLINE describe SPACE GarageClient SPACE do NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE described_class . adapter . should SPACE == SPACE described_class . configuration . adapter NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE described_class . endpoint . should SPACE == SPACE described_class . configuration . endpoint NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE described_class . headers . should SPACE == SPACE described_class . configuration . headers NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE described_class . headers . should SPACE == SPACE described_class . configuration . headers NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE described_class . path_prefix . should SPACE == SPACE described_class . configuration . path_prefix NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE described_class . verbose . should SPACE == SPACE described_class . configuration . verbose NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE described_class . configure SPACE do SPACE | configuration | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . headers SPACE = SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE described_class . headers . should SPACE == SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE if SPACE ENV [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SimpleCov . start SPACE do NEWLINE SPACE SPACE SPACE SPACE if SPACE ENV [ LITERALLITERALLITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SimpleCov . formatter SPACE = SPACE SimpleCov :: Formatter :: RcovFormatter NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE NEWLINE require SPACE LITERALNEWLINE NEWLINE GarageClient . configure SPACE do SPACE | c | NEWLINE SPACE SPACE c . path_prefix SPACE = SPACE LITERALNEWLINE SPACE SPACE c . endpoint SPACE = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE c . name SPACE = SPACE LITERALNEWLINE end NEWLINE NEWLINE NEWLINE def SPACE make_endpoint ( path ) NEWLINE SPACE SPACE LITERALLITERALLITERALLITERALLITERAL. match ( path ) SPACE ? SPACE path SPACE : SPACE URI . join ( GarageClient . endpoint , SPACE path ) . to_s NEWLINE end NEWLINE NEWLINE def SPACE stub_get ( path ) NEWLINE SPACE SPACE stub_request ( LITERAL, SPACE make_endpoint ( path ) ) NEWLINE end NEWLINE NEWLINE def SPACE stub_post ( path ) NEWLINE SPACE SPACE stub_request ( LITERAL, SPACE make_endpoint ( path ) ) NEWLINE end NEWLINE NEWLINE def SPACE stub_put ( path ) NEWLINE SPACE SPACE stub_request ( LITERAL, SPACE make_endpoint ( path ) ) NEWLINE end NEWLINE NEWLINE def SPACE stub_delete ( path ) NEWLINE SPACE SPACE stub_request ( LITERAL, SPACE make_endpoint ( path ) ) NEWLINE end NEWLINE NEWLINE def SPACE fixture ( file ) NEWLINE SPACE SPACE prefix SPACE = SPACE File . expand_path ( LITERAL, SPACE __FILE__ ) NEWLINE SPACE SPACE path SPACE = SPACE File . join ( prefix , SPACE file ) NEWLINE SPACE SPACE HashWithIndifferentAccess . new ( YAML . load_file ( path ) ) NEWLINE end NEWLINE NEWLINE RSpec . configure SPACE do SPACE | config | NEWLINE SPACE SPACE config . expect_with SPACE LITERALSPACE do SPACE | c | NEWLINE SPACE SPACE SPACE SPACE c . syntax SPACE = SPACE [ LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE GarageClient :: Client . new ( options ) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE { } SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE = SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_request ( LITERAL, SPACE LITERALLITERALLITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with ( LITERAL: SPACE { SPACE LITERAL= > LITERALSPACE } ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to_return ( LITERALSPACE = > SPACE LITERAL, SPACE LITERALSPACE = > SPACE LITERALLITERAL, SPACE LITERALSPACE = > SPACE { } ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . get ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE around SPACE do SPACE | example | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE prev SPACE = SPACE GarageClient . configuration NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient . instance_variable_set ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient :: Configuration . new ( LITERAL: SPACE LITERALLITERALLITERAL, SPACE name : SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE example . run NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient . instance_variable_set ( LITERAL, SPACE prev ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient . configure SPACE do SPACE | c | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE c . headers SPACE = SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_request ( LITERAL, SPACE LITERALLITERALLITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with ( LITERAL: SPACE { SPACE LITERAL= > LITERALSPACE } ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to_return ( LITERALSPACE = > SPACE LITERAL, SPACE LITERALSPACE = > SPACE LITERALLITERAL, SPACE LITERALSPACE = > SPACE { } ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . get ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALLITERALLITERALNEWLINE NEWLINE describe SPACE GarageClient :: Cachers :: Base SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE Class . new SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @table SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE read ( key , SPACE options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE value SPACE = SPACE @table [ key ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Marshal . load ( value ) SPACE if SPACE value NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE write ( key , SPACE value , SPACE options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @table [ key ] SPACE = SPACE Marshal . dump ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end . new NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE cache_store SPACE = SPACE store NEWLINE SPACE SPACE SPACE SPACE Class . new ( GarageClient :: Cachers :: Base ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @store SPACE = SPACE cache_store NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE << SPACE self NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE delegate SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE key NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @env [ LITERAL] . to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE read_from_cache? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE written_to_cache? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE GarageClient :: Client . new ( LITERAL: SPACE cacher_class ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERALLITERALLITERAL) . to_return ( fixture ( LITERALLITERALLITERAL) ) . times ( LITERAL) . then . to_raise ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERALLITERALLITERAL) . to_return ( fixture ( LITERALLITERALLITERAL) ) . times ( LITERAL) . then . to_raise ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . get ( LITERALLITERALLITERAL) . body . should SPACE be_a SPACE Array NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . get ( LITERALLITERALLITERAL) . body . should SPACE be_a SPACE Array NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . get ( LITERALLITERALLITERAL) . body . should SPACE be_a SPACE GarageClient :: Resource NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . get ( LITERALLITERALLITERAL) . body . should SPACE be_a SPACE GarageClient :: Resource NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE specify SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Faraday :: VERSION ) . to SPACE be SPACE < SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Marshal . load ( File . read ( File . expand_path ( LITERAL, SPACE __dir__ ) ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( res ) . to SPACE be_instance_of SPACE Faraday :: Response NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( res . env [ LITERAL] ) . to SPACE eq SPACE fixture ( LITERALLITERALLITERAL) [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Marshal . load ( File . read ( File . expand_path ( LITERAL, SPACE __dir__ ) ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( res ) . to SPACE be_instance_of SPACE Faraday :: Response NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( res . env [ LITERAL] ) . to SPACE eq SPACE fixture ( LITERALLITERALLITERAL) [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE GarageClient :: Client SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE GarageClient :: Client . new ( options ) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE { } SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE { SPACE allow ( GarageClient . configuration ) . to SPACE receive ( LITERAL) . and_raise ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE { SPACE LITERAL: SPACE LITERALSPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE client . endpoint SPACE } . not_to SPACE raise_error NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE client . endpoint SPACE } . to SPACE raise_error ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . adapter . should SPACE == SPACE GarageClient . configuration . adapter NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . adapter . should SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . endpoint . should SPACE == SPACE GarageClient . configuration . endpoint NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . endpoint . should SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . path_prefix . should SPACE == SPACE GarageClient . configuration . path_prefix NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . path_prefix . should SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . verbose . should SPACE == SPACE GarageClient . configuration . verbose NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . verbose . should SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . headers . should SPACE == SPACE GarageClient . configuration . headers NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE = SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . headers . should SPACE == SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALGarageClient :: VERSION LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE options [ LITERAL] SPACE = SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . headers [ LITERALLITERALLITERAL] . should SPACE eq SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . access_token SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . with ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE client . get ( LITERAL) SPACE } . not_to SPACE raise_error NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . adapter SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . adapter . should SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . endpoint SPACE = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . endpoint . should SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . headers SPACE = SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . headers . should SPACE == SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . adapter SPACE = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . adapter . should SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . verbose SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . verbose . should SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE client . get ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . should SPACE be_kind_of ( GarageClient :: Response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . body . should SPACE be_kind_of ( Array ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . body . first . should SPACE be_kind_of ( GarageClient :: Resource ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE client . get ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . should SPACE be_kind_of ( GarageClient :: Response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . body . should SPACE be_kind_of ( GarageClient :: Resource ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_post ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE client . post ( LITERAL, SPACE LITERALSPACE = > SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . should SPACE be_kind_of ( GarageClient :: Response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . body . should SPACE be_kind_of ( GarageClient :: Resource ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE client . me NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . should SPACE be_kind_of ( GarageClient :: Response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . body . should SPACE be_kind_of ( GarageClient :: Resource ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE around SPACE do SPACE | example | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE old , SPACE GarageClient . endpoint SPACE = SPACE GarageClient . endpoint , SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE example . run NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient . endpoint SPACE = SPACE old NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE client SPACE } . to SPACE raise_error ( RuntimeError , SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALLITERALLITERALNEWLINE NEWLINE describe SPACE GarageClient :: Configuration SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE described_class . new NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . adapter . should SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . adapter SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . adapter . should SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE configuration . endpoint SPACE } . to SPACE raise_error ( RuntimeError , SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . endpoint SPACE = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . endpoint . should SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE configuration . headers SPACE } . to SPACE raise_error ( RuntimeError , SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . name SPACE = SPACE name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . headers . should SPACE == SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALGarageClient :: VERSION LITERALLITERALLITERALname LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . headers SPACE = SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . headers . should SPACE == SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE configuration . name SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE configuration . default_headers . should SPACE == SPACE configuration . headers NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . path_prefix . should SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . path_prefix SPACE = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . path_prefix . should SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . verbose . should SPACE == SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . verbose SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE configuration . verbose . should SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE GarageClient :: Error SPACE do NEWLINE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE raise SPACE GarageClient :: Error SPACE } . to SPACE raise_error ( GarageClient :: Error , SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE raise SPACE GarageClient :: Error , SPACE message SPACE } . to SPACE raise_error ( GarageClient :: Error , SPACE message ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Faraday . new SPACE do SPACE | builder | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE builder . adapter SPACE LITERAL, SPACE Faraday :: Adapter :: Test :: Stubs . new SPACE do SPACE | stub | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub . get ( LITERAL) SPACE { SPACE [ LITERAL, SPACE { } , SPACE LITERAL] SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . get ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE raise SPACE GarageClient :: Error , SPACE response . env SPACE } . to SPACE raise_error ( GarageClient :: Error , SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
describe SPACE GarageClient :: Railtie SPACE do NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE allow ( Rails ) . to SPACE receive_message_chain ( LITERAL, SPACE LITERAL, SPACE LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE and_return ( parent_name ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient . configuration . name SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient :: RailsInitializer . set_default_name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient . configuration . options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . from ( nil ) . to ( parent_name . underscore ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient . configuration . name SPACE = SPACE name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient :: RailsInitializer . set_default_name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . to_not SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient . configuration . options [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . from ( name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE GarageClient :: Resource SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE GarageClient :: Client . new SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE JSON . parse ( fixture ( LITERAL) [ LITERAL] ) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE GarageClient :: Resource . new ( client , SPACE response_body ) SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE resource . properties . should SPACE includeend NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE resource . links . should SPACE include ( LITERAL, SPACE LITERAL, SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_put ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE resource . update ( LITERALSPACE = > SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . should SPACE be_kind_of ( GarageClient :: Response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . body . should SPACE be_kind_of ( GarageClient :: Resource ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_delete ( LITERAL) . to_return ( LITERALSPACE = > SPACE LITERAL, SPACE LITERALSPACE = > SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE resource . destroy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . should SPACE be_kind_of ( GarageClient :: Response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . body . should SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_post ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE resource . create_nested_examples ( LITERALSPACE = > SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . should SPACE be_kind_of ( GarageClient :: Response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . body . should SPACE be_kind_of ( GarageClient :: Resource ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE resource . non_existent_field SPACE } . to SPACE raise_error ( NoMethodError ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE resource . name . should SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE resource . user . should SPACE be_kind_of ( GarageClient :: Resource ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE resource . nested_examples NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . should SPACE be_kind_of ( GarageClient :: Response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . body . should SPACE be_kind_of ( Array ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE GarageClient :: Response SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE described_class . new ( client , SPACE raw_response ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE GarageClient :: Client . new NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE double ( LITERAL: SPACE headers , SPACE LITERAL: SPACE env . body , SPACE LITERAL: SPACE env ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE { SPACE LITERALSPACE = > SPACE link SPACE } NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE double ( LITERAL, SPACE LITERAL: SPACE body ) . tap SPACE do SPACE | e | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE allow ( e ) . to SPACE receive ( LITERAL) . with ( LITERAL) . and_return ( body ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE { } NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL. join ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE body [ LITERALLITERALLITERAL] SPACE = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . respond_to? ( LITERAL) . should SPACE == SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . respond_to? ( LITERAL) . should SPACE == SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . respond_to? ( LITERAL) . should SPACE == SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . respond_to? ( LITERAL) . should SPACE == SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . respond_to? ( LITERAL, SPACE true ) . should SPACE == SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE body [ LITERALLITERALLITERAL] SPACE = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . method ( LITERAL) . should SPACE be_kind_of ( Method ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE response . method ( LITERAL) SPACE } . to SPACE raise_error ( NameError ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE headers . delete ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . has_next_page? . should SPACE == SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . has_next_page? . should SPACE == SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . has_next_page? . should SPACE == SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE headers . delete ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . has_prev_page? . should SPACE == SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . has_prev_page? . should SPACE == SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . has_prev_page? . should SPACE == SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE headers . delete ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . has_first_page? . should SPACE == SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . has_first_page? . should SPACE == SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . has_first_page? . should SPACE == SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE headers . delete ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . has_last_page? . should SPACE == SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . has_last_page? . should SPACE == SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . has_last_page? . should SPACE == SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE headers . delete ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . next_page_path . should SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . next_page_path . should SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . next_page_path . should SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE headers . delete ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . prev_page_path . should SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . prev_page_path . should SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . prev_page_path . should SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE headers . delete ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . first_page_path . should SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . first_page_path . should SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . first_page_path . should SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE headers . delete ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . last_page_path . should SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . last_page_path . should SPACE == SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . last_page_path . should SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE NEWLINE describe SPACE Faraday :: Response SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE GarageClient :: Client . new SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE client . get ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . link . should SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . link . should SPACE == SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . total_count . should SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . total_count . should SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE client . get ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE client . get ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE client . get ( LITERAL, SPACE nil , SPACE LITERALSPACE = > SPACE { SPACE LITERALSPACE = > SPACE mime_dict SPACE } ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE single_response SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . body . should SPACE be_kind_of ( GarageClient :: Resource ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE array_response SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . body . should SPACE be_kind_of ( Array ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . body . first . should SPACE be_kind_of ( GarageClient :: Resource ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE dictionary_response SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . body . should SPACE be_kind_of ( Hash ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response . body [ LITERAL] . should SPACE be_kind_of ( GarageClient :: Resource ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( fixture ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . size . should SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response . first . should SPACE be_kind_of ( GarageClient :: Resource ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: BadRequest , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: Unauthorized , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: Forbidden , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: NotFound , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: NotAcceptable , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: Conflict , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: UnsupportedMediaType , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: UnprocessableEntity , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: InternalServerError , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: ServiceUnavailable , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: GatewayTimeout , NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: ClientError , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: ClientError , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: ClientError , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: ClientError , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE GarageClient :: ServerError , NEWLINE SPACE SPACE SPACE SPACE } . each SPACE do SPACE | status , SPACE exception | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALstatus LITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( LITERALSPACE = > SPACE status ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALexception . name LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE client . get ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . to SPACE raise_error ( exception ) SPACE { SPACE | e | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE e . should SPACE be_a_kind_of ( GarageClient :: Error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE e . response . should SPACE be_respond_to ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERAL) . to_return ( LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE client . get ( LITERAL) SPACE } . to SPACE raise_error ( GarageClient :: InvalidResponseType ) SPACE { | e | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE e . should SPACE be_a_kind_of ( GarageClient :: Error ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALLITERALLITERALNEWLINE NEWLINE describe SPACE GarageClient :: Request :: JsonEncoded SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE GarageClient :: Client . new ( LITERAL: SPACE headers ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE { } NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE { SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_post ( LITERALLITERALLITERAL) . with ( LITERAL: SPACE params . to_json ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE client . post ( LITERALLITERALLITERAL, SPACE params ) SPACE } . not_to SPACE raise_error NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_post ( LITERALLITERALLITERAL) . with ( LITERAL: SPACE params . to_json ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE client . post ( LITERALLITERALLITERAL, SPACE params ) SPACE } . not_to SPACE raise_error NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_post ( LITERALLITERALLITERAL) . with ( LITERAL: SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE client . post ( LITERALLITERALLITERAL, SPACE params ) SPACE } . not_to SPACE raise_error NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE NEWLINE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE pending SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_post ( LITERALLITERALLITERAL) . withjoin ( LITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE client . post ( LITERALLITERALLITERAL, SPACE params ) SPACE } . not_to SPACE raise_error NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALLITERALLITERALNEWLINE NEWLINE describe SPACE GarageClient :: Request :: PropagateRequestId SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE GarageClient :: Client . new NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE around SPACE do SPACE | example | NEWLINE SPACE SPACE SPACE SPACE original SPACE = SPACE Thread . current [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE Thread . current [ LITERAL] SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE example . run NEWLINE SPACE SPACE SPACE SPACE Thread . current [ LITERAL] SPACE = SPACE original NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE stub_get ( LITERALLITERALLITERAL) . with ( LITERAL: SPACE { SPACE LITERALSPACE = > SPACE LITERALSPACE } ) NEWLINE SPACE SPACE SPACE SPACE expect SPACE { SPACE client . get ( LITERALLITERALLITERAL) SPACE } . not_to SPACE raise_error NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Thread . current [ LITERAL] SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERALLITERALLITERAL) . with SPACE do SPACE | request | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ! request . headers . include? ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE client . get ( LITERALLITERALLITERAL) SPACE } . not_to SPACE raise_error NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE GarageClient :: Client . new ( LITERAL: SPACE { SPACE LITERALSPACE = > SPACE LITERALSPACE } ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_get ( LITERALLITERALLITERAL) . with ( LITERAL: SPACE { SPACE LITERALSPACE = > SPACE LITERALSPACE } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE client . get ( LITERALLITERALLITERAL) SPACE } . not_to SPACE raise_error NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GemCollector NEWLINE SPACE SPACE class SPACE ApplicationController SPACE < SPACE ActionController :: Base NEWLINE SPACE SPACE SPACE SPACE protect_from_forgery SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE GemCollector :: GemNewsController SPACE < SPACE GemCollector :: ApplicationController NEWLINE SPACE SPACE before_action SPACE GemCollector :: GemVersionValidationFilter NEWLINE SPACE SPACE before_action SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE def SPACE new NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE create NEWLINE SPACE SPACE SPACE SPACE repositories SPACE = SPACE GemCollector :: Repository . find_by_dependent_gem ( params [ LITERAL] , SPACE LITERAL: SPACE params [ LITERAL] , SPACE LITERAL: SPACE params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE GemCollector :: CreateGemNews . new ( request . origin , SPACE * params . permit ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) . values ) . run ( repositories ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE flash [ LITERAL] SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE rescue SPACE GemCollector :: CreateGemNews :: Error SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE flash [ LITERAL] SPACE = SPACE e . message NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE redirect_to SPACE repository_gem_path ( params . permit ( LITERAL, SPACE LITERAL, SPACE LITERAL) ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private SPACE def SPACE validate_body NEWLINE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALSPACE if SPACE params [ LITERAL] . blank? NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE GemCollector :: RepositoriesController SPACE < SPACE GemCollector :: ApplicationController NEWLINE SPACE SPACE skip_before_action SPACE LITERAL, SPACE LITERAL: SPACE % i [ github_webhook ] NEWLINE NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE @repositories SPACE = SPACE GemCollector :: Repository . all_with_version_point NEWLINE SPACE SPACE SPACE SPACE render SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE show NEWLINE SPACE SPACE SPACE SPACE @repository SPACE = SPACE GemCollector :: Repository . find ( params [ LITERAL] ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE new NEWLINE SPACE SPACE SPACE SPACE @repository SPACE = SPACE GemCollector :: Repository . new NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE create NEWLINE SPACE SPACE SPACE SPACE form SPACE = SPACE params . require ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE repository SPACE = SPACE GemCollector :: CreateRepository . new . run ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE form [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE form [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE redirect_to SPACE repository_path ( repository . id ) NEWLINE SPACE SPACE rescue SPACE GemCollector :: CreateRepository :: Error SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE redirect_to SPACE repositories_path , SPACE LITERAL: SPACE e . message NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE destroy NEWLINE SPACE SPACE SPACE SPACE repository SPACE = SPACE GemCollector :: Repository . find ( params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE GemCollector :: DeleteRepository . new . run ( repository ) NEWLINE SPACE SPACE SPACE SPACE redirect_to SPACE repositories_path NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE github_webhook NEWLINE SPACE SPACE SPACE SPACE event SPACE = SPACE request . headers [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE case SPACE event NEWLINE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE html_url SPACE = SPACE params [ LITERAL] [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE site SPACE = SPACE Addressable :: URI . parse ( html_url ) . host NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE has_valid_signature? ( site ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE repository SPACE = SPACE GemCollector :: UpdateRepository . new . run ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE params [ LITERAL] [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE params [ LITERAL] [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE html_url , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE params [ LITERAL] [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE GemCollector :: UpdateGemfileJob . perform_later ( repository . id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALevent LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE def SPACE has_valid_signature? ( site ) NEWLINE SPACE SPACE SPACE SPACE secret SPACE = SPACE Rails . application . config . octokit . fetch ( site ) [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE if SPACE secret NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE request . body . rewind NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE payload_body SPACE = SPACE request . body . read NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE given_signature SPACE = SPACE request . headers [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE given_signature NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expected_signature SPACE = SPACE LITERALSPACE + SPACE OpenSSL :: HMAC . hexdigest ( OpenSSL :: Digest . new ( LITERAL) , SPACE secret , SPACE payload_body ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Rack :: Utils . secure_compare ( expected_signature , SPACE given_signature ) NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE true NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE default_github_site NEWLINE SPACE SPACE SPACE SPACE ENV [ LITERAL] SPACE || SPACE LITERALNEWLINE SPACE SPACE end NEWLINE SPACE SPACE helper_method SPACE LITERALNEWLINE end NEWLINE 
class SPACE GemCollector :: RepositoryGemsController SPACE < SPACE GemCollector :: ApplicationController NEWLINE SPACE SPACE before_action SPACE GemCollector :: GemVersionValidationFilter , SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE count_col SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE order_by SPACE = SPACE [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE if SPACE order_by_popularity? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE order_by . unshift ( LITERALLITERALcount_col LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE @gems SPACE = SPACE GemCollector :: RepositoryGem . order ( order_by ) . group ( LITERAL) . pluck ( LITERAL, SPACE count_col ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE show NEWLINE SPACE SPACE SPACE SPACE @gem_name SPACE = SPACE params [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE @repositories SPACE = SPACE GemCollector :: Repository . find_by_dependent_gem ( @gem_name , SPACE LITERAL: SPACE params [ LITERAL] , SPACE LITERAL: SPACE params [ LITERAL] ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private SPACE def SPACE order_by_popularity? NEWLINE SPACE SPACE SPACE SPACE params [ LITERAL] SPACE == SPACE LITERALNEWLINE SPACE SPACE end NEWLINE SPACE SPACE helper_method SPACE LITERALNEWLINE end NEWLINE 
module SPACE GemCollector NEWLINE SPACE SPACE module SPACE ApplicationHelper NEWLINE SPACE SPACE SPACE SPACE def SPACE gem_news_body_template NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE << ~ TEMPLATE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE { { Write SPACE problem SPACE here } } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE { { Write SPACE required SPACE actions SPACE here } } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE { { Write SPACE background SPACE here } } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE { { Write SPACE your SPACE department SPACE or SPACE inquiry SPACE counter SPACE about SPACE this SPACE news } } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE TEMPLATE NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GemCollector NEWLINE SPACE SPACE class SPACE ApplicationJob SPACE < SPACE ActiveJob :: Base NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE GemCollector :: UpdateGemfileJob SPACE < SPACE GemCollector :: ApplicationJob NEWLINE SPACE SPACE def SPACE perform ( repository_id ) NEWLINE SPACE SPACE SPACE SPACE GemCollector :: UpdateGemfile . new . run ( GemCollector :: Repository . find ( repository_id ) ) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GemCollector NEWLINE SPACE SPACE class SPACE ApplicationMailer SPACE < SPACE ActionMailer :: Base NEWLINE SPACE SPACE SPACE SPACE default SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE layout SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GemCollector NEWLINE SPACE SPACE class SPACE ApplicationRecord SPACE < SPACE ActiveRecord :: Base NEWLINE SPACE SPACE SPACE SPACE self . abstract_class SPACE = SPACE true NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GemCollector::OctokitProvider NEWLINE SPACE SPACE def SPACE self . get ( site ) NEWLINE SPACE SPACE SPACE SPACE conf SPACE = SPACE Rails . application . config . octokit . fetch ( site ) NEWLINE SPACE SPACE SPACE SPACE Octokit :: Client . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE conf [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE conf [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE conf [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE GemCollector :: Repository SPACE < SPACE GemCollector :: ApplicationRecord NEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE def SPACE url ( path SPACE = SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE u SPACE = SPACE LITERALLITERALLITERALsite LITERALLITERALLITERALfull_name LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE if SPACE path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALu LITERALLITERALLITERALpath LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE u NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE canonical_name NEWLINE SPACE SPACE SPACE SPACE LITERALLITERALsite LITERALLITERALLITERALfull_name LITERALLITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE POINTS_FOR_GEMS_SQL SPACE = SPACE <<- LITERALLITERALLITERAL. strip_heredoc NEWLINE LITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE def SPACE gems_with_version_point NEWLINE SPACE SPACE SPACE SPACE GemCollector :: RepositoryGem . find_by_sql ( [ <<- LITERALLITERALLITERAL. strip_heredoc , SPACE LITERAL: SPACE id ] ) NEWLINE LITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE self . all_with_version_point NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE find_by_sql ( <<- LITERALLITERALLITERAL. strip_heredoc ) NEWLINE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE def SPACE self . find_by_dependent_gem ( gem_name , SPACE LITERAL: SPACE nil , SPACE LITERAL: SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE from_version SPACE = SPACE LITERALSPACE if SPACE from_version . blank? NEWLINE SPACE SPACE SPACE SPACE find_by_sql ( [ <<- LITERALLITERALLITERAL. strip_heredoc , SPACE LITERAL: SPACE gem_name , SPACE LITERAL: SPACE from_version , SPACE LITERAL: SPACE to_version ] ) NEWLINE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE SPACE end NEWLINE NEWLINE SPACE SPACE private_class_method SPACE def SPACE self . build_version_exp ( column_or_exp ) NEWLINE SPACE SPACE SPACE SPACE LITERALLITERALLITERALcolumn_or_exp LITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE GemCollector :: RepositoryGem SPACE < SPACE GemCollector :: ApplicationRecord NEWLINE end NEWLINE 
class SPACE GemCollector :: Webhooks NEWLINE SPACE SPACE def SPACE initialize ( octokit ) NEWLINE SPACE SPACE SPACE SPACE @octokit SPACE = SPACE octokit NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE create ( full_name ) NEWLINE SPACE SPACE SPACE SPACE hook SPACE = SPACE find_hook ( full_name ) NEWLINE SPACE SPACE SPACE SPACE unless SPACE hook NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @octokit . create_hook ( full_name , SPACE WEBHOOK_NAME , SPACE { SPACE LITERAL: SPACE WEBHOOK_URL , SPACE LITERAL: SPACE LITERALSPACE } , SPACE { SPACE LITERAL: SPACE WEBHOOK_EVENTS , SPACE LITERAL: SPACE true SPACE } ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE remove ( full_name ) NEWLINE SPACE SPACE SPACE SPACE hook SPACE = SPACE find_hook ( full_name ) NEWLINE SPACE SPACE SPACE SPACE if SPACE hook NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @octokit . remove_hook ( full_name , SPACE hook [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE WEBHOOK_NAME SPACE = SPACE LITERALNEWLINE SPACE SPACE WEBHOOK_URL SPACE = SPACE ENV [ LITERAL] NEWLINE SPACE SPACE WEBHOOK_EVENTS SPACE = SPACE [ LITERAL] NEWLINE NEWLINE SPACE SPACE def SPACE find_hook ( full_name ) NEWLINE SPACE SPACE SPACE SPACE @octokit . hooks ( full_name ) . find SPACE { SPACE | hook | SPACE hook . name SPACE == SPACE WEBHOOK_NAME SPACE && SPACE hook . config . url SPACE == SPACE WEBHOOK_URL SPACE && SPACE hook . events SPACE == SPACE WEBHOOK_EVENTS SPACE } NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE GemCollector :: CreateGemNews NEWLINE SPACE SPACE def SPACE initialize ( homepage , SPACE gem_name , SPACE title , SPACE body , SPACE from_version , SPACE to_version ) NEWLINE SPACE SPACE SPACE SPACE @gem_name , SPACE @body , SPACE @from_version , SPACE @to_version SPACE = SPACE gem_name , SPACE body , SPACE from_version , SPACE to_version NEWLINE SPACE SPACE SPACE SPACE @title SPACE = SPACE title . present? SPACE ? SPACE title SPACE : SPACE LITERALLITERALLITERALgem_name LITERALLITERALLITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE def SPACE run ( repositories ) NEWLINE SPACE SPACE SPACE SPACE repositories . each SPACE { | repo | SPACE create_news_issue ( repo ) SPACE } NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private SPACE def SPACE create_news_issue ( repo ) NEWLINE SPACE SPACE SPACE SPACE octokit SPACE = SPACE GemCollector :: OctokitProvider . get ( repo . site ) NEWLINE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE octokit . create_issue ( repo . full_name , SPACE @title , SPACE issue_body ) NEWLINE SPACE SPACE SPACE SPACE rescue SPACE Octokit :: NotFound NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Error . new ( LITERALLITERALLITERALrepo . full_name LITERALLITERALLITERALoctokit . login LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private SPACE def SPACE issue_body NEWLINE SPACE SPACE SPACE SPACE [ <<- LITERALLITERALLITERAL. strip_heredoc , SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE @body ] . join ( LITERALLITERALLITERAL) NEWLINE LITERALLITERALSPACE SPACE end NEWLINE NEWLINE SPACE SPACE private SPACE def SPACE gem_name_with_version NEWLINE SPACE SPACE SPACE SPACE [ NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL@gem_name LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @from_version . present? SPACE ? SPACE LITERALLITERALLITERAL@from_version LITERALLITERALLITERALSPACE : SPACE nil , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @to_version . present? SPACE ? SPACE LITERALLITERALLITERAL@to_version LITERALLITERALLITERALSPACE : SPACE nil , NEWLINE SPACE SPACE SPACE SPACE ] . compact . join ( LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE class SPACE Error SPACE < SPACE :: StandardError NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE GemCollector :: CreateRepository NEWLINE SPACE SPACE def SPACE run ( LITERAL: , SPACE LITERAL: ) NEWLINE SPACE SPACE SPACE SPACE octokit SPACE = SPACE GemCollector :: OctokitProvider . get ( site ) NEWLINE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE repo SPACE = SPACE octokit . repository ( full_name ) NEWLINE SPACE SPACE SPACE SPACE rescue SPACE Octokit :: NotFound NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Error . new ( LITERALLITERALLITERALfull_name LITERALLITERALLITERALoctokit . login LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE repository SPACE = SPACE GemCollector :: UpdateRepository . new . run ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE repo [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE repo [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE repo [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE repo [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE GemCollector :: UpdateGemfile . new . run ( repository ) NEWLINE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE register_webhook ( repository ) NEWLINE SPACE SPACE SPACE SPACE rescue SPACE Octokit :: NotFound NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Error . new ( LITERALLITERALLITERALoctokit . login LITERALLITERALLITERALfull_name LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE repository NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE register_webhook ( repository ) NEWLINE SPACE SPACE SPACE SPACE octokit SPACE = SPACE GemCollector :: OctokitProvider . get ( repository . site ) NEWLINE SPACE SPACE SPACE SPACE GemCollector :: Webhooks . new ( octokit ) . create ( repository . full_name ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE class SPACE Error SPACE < SPACE StandardError NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE GemCollector :: DeleteRepository NEWLINE SPACE SPACE def SPACE run ( repository ) NEWLINE SPACE SPACE SPACE SPACE octokit SPACE = SPACE GemCollector :: OctokitProvider . get ( repository . site ) NEWLINE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE GemCollector :: Webhooks . new ( octokit ) . remove ( repository . full_name ) NEWLINE SPACE SPACE SPACE SPACE rescue SPACE Octokit :: Error NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Rails . logger . warn ( LITERALLITERALLITERALrepository . full_name LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE repository . destroy! NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE class SPACE GemCollector :: UpdateGemfile NEWLINE SPACE SPACE def SPACE run ( repository ) NEWLINE SPACE SPACE SPACE SPACE Dir . mktmpdir ( LITERALLITERALLITERALrepository . id LITERALLITERAL) SPACE do SPACE | dir | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE dir_path SPACE = SPACE Pathname . new ( dir ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE system ! ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE repository . ssh_url , SPACE dir ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE retry_on_serialization_failure ( LITERAL: SPACE LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GemCollector :: RepositoryGem . transaction ( LITERAL: SPACE LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE GemCollector :: RepositoryGem . where ( LITERAL: SPACE repository . id ) . delete_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE each_gemfile_lock ( dir ) SPACE do SPACE | path | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_gemfile_lock ( repository , SPACE dir_path , SPACE path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE repository . touch ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE system! ( * args ) NEWLINE SPACE SPACE SPACE SPACE unless SPACE system ( * args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALargs LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE retry_on_serialization_failure ( LITERAL: , SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE tries . times SPACE do SPACE | i | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE block . call NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE ActiveRecord :: StatementInvalid SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE e . cause . is_a? ( PG :: TRSerializationFailure ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE $stderr . puts SPACE LITERALLITERALe . cause . class LITERALLITERALLITERALe . cause . message LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE sleep ( LITERAL** i ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE $stderr . puts SPACE LITERALLITERALLITERALi + LITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE raise SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE each_gemfile_lock ( dir , SPACE & block ) NEWLINE SPACE SPACE SPACE SPACE Find . find ( dir ) SPACE do SPACE | f | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE f SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Find . prune NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE path SPACE = SPACE Pathname . new ( f ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE path . basename . to_s SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE block . call ( path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE update_gemfile_lock ( repository , SPACE dir , SPACE path ) NEWLINE SPACE SPACE SPACE SPACE lockfile_parser SPACE = SPACE Bundler :: LockfileParser . new ( path . read ) NEWLINE SPACE SPACE SPACE SPACE lock_path SPACE = SPACE path . relative_path_from ( dir ) . to_s NEWLINE SPACE SPACE SPACE SPACE records SPACE = SPACE lockfile_parser . specs . map SPACE do SPACE | spec | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE repository . repository_gems . build ( LITERAL: SPACE lock_path , SPACE name : SPACE spec . name , SPACE LITERAL: SPACE spec . version . to_s ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE GemCollector :: RepositoryGem . import ( records ) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE GemCollector :: UpdateRepository NEWLINE SPACE SPACE def SPACE run ( LITERAL: , SPACE LITERAL: , SPACE LITERAL: , SPACE LITERAL: ) NEWLINE SPACE SPACE SPACE SPACE host SPACE = SPACE Addressable :: URI . parse ( html_url ) . host NEWLINE SPACE SPACE SPACE SPACE repo SPACE = SPACE GemCollector :: Repository . find_or_initialize_by ( LITERAL: SPACE host , SPACE LITERAL: SPACE repository_id ) NEWLINE SPACE SPACE SPACE SPACE repo . full_name SPACE = SPACE full_name NEWLINE SPACE SPACE SPACE SPACE repo . ssh_url SPACE = SPACE ssh_url NEWLINE SPACE SPACE SPACE SPACE repo . save! NEWLINE SPACE SPACE SPACE SPACE repo NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
GemCollector :: Engine . routes . draw SPACE do NEWLINE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE % i [ index SPACE show SPACE new SPACE create SPACE destroy ] NEWLINE SPACE SPACE post SPACE LITERALSPACE = > SPACE LITERALNEWLINE NEWLINE SPACE SPACE get SPACE LITERALSPACE = > SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE get SPACE LITERALSPACE = > SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE get SPACE LITERALSPACE = > SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE post SPACE LITERALSPACE = > SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE end NEWLINE 
class SPACE CreateGemCollectorRepository SPACE < SPACE ActiveRecord :: Migration [ LITERAL. LITERAL] NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . timestamps NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . index SPACE [ LITERAL, SPACE LITERAL] , SPACE LITERAL: SPACE true , SPACE name : SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateGemCollectorRepositoryGem SPACE < SPACE ActiveRecord :: Migration [ LITERAL. LITERAL] NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . timestamps NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . index SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL] , SPACE LITERAL: SPACE true , SPACE name : SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE require SPACE LITERALNEWLINE 
module SPACE GemCollector::GemVersionValidationFilter NEWLINE SPACE SPACE def SPACE self . before ( controller ) NEWLINE SPACE SPACE SPACE SPACE [ controller . params [ LITERAL] , SPACE controller . params [ LITERAL] ] . each SPACE do SPACE | v | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE controller . render SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALv LITERALLITERALSPACE unless SPACE valid_version? ( v ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE self . valid_version? ( v ) NEWLINE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE :: Gem :: Version . new ( v ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE true NEWLINE SPACE SPACE SPACE SPACE rescue SPACE ArgumentError NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE false NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GemCollector NEWLINE SPACE SPACE class SPACE Engine SPACE < SPACE :: Rails :: Engine NEWLINE SPACE SPACE SPACE SPACE isolate_namespace SPACE GemCollector NEWLINE NEWLINE SPACE SPACE SPACE SPACE config . autoload_paths SPACE << SPACE root . join ( LITERAL) . to_s NEWLINE SPACE SPACE SPACE SPACE config . eager_load_paths SPACE << SPACE root . join ( LITERAL) . to_s NEWLINE NEWLINE SPACE SPACE SPACE SPACE initializer SPACE LITERALSPACE do SPACE | app | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE app . config . octokit SPACE = SPACE app . config_for ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE GemCollector NEWLINE SPACE SPACE VERSION SPACE = SPACE LITERALNEWLINE end NEWLINE 
ENV [ LITERAL] SPACE || = SPACE LITERALNEWLINE require SPACE File . expand_path ( LITERALLITERALLITERAL, SPACE __FILE__ ) NEWLINE NEWLINE abort ( LITERALLITERALLITERAL) SPACE if SPACE Rails . env . production? NEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE RSpec . configure SPACE do SPACE | config | NEWLINE SPACE SPACE config . fixture_path SPACE = SPACE LITERALLITERAL:: Rails . root LITERALLITERALLITERALNEWLINE SPACE SPACE config . use_transactional_fixtures SPACE = SPACE true NEWLINE SPACE SPACE config . infer_spec_type_from_file_location! NEWLINE end NEWLINE 
RSpec . configure SPACE do SPACE | config | NEWLINE SPACE SPACE config . expect_with SPACE LITERALSPACE do SPACE | expectations | NEWLINE SPACE SPACE SPACE SPACE expectations . include_chain_clauses_in_custom_matcher_descriptions SPACE = SPACE true NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE config . mock_with SPACE LITERALSPACE do SPACE | mocks | NEWLINE SPACE SPACE SPACE SPACE mocks . verify_partial_doubles SPACE = SPACE true NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE config . shared_context_metadata_behavior SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE config . filter_run_when_matching SPACE LITERALNEWLINE NEWLINE SPACE SPACE config . disable_monkey_patching! NEWLINE NEWLINE SPACE SPACE config . order SPACE = SPACE LITERALNEWLINE SPACE SPACE Kernel . srand SPACE config . seed NEWLINE end NEWLINE 
module SPACE ApplicationCable NEWLINE SPACE SPACE class SPACE Channel SPACE < SPACE ActionCable :: Channel :: Base NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE ApplicationCable NEWLINE SPACE SPACE class SPACE Connection SPACE < SPACE ActionCable :: Connection :: Base NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE ApplicationController SPACE < SPACE ActionController :: Base NEWLINE SPACE SPACE protect_from_forgery SPACE LITERAL: SPACE LITERALNEWLINE end NEWLINE 
module SPACE ApplicationHelper NEWLINE end NEWLINE 
class SPACE ApplicationJob SPACE < SPACE ActiveJob :: Base NEWLINE end NEWLINE 
class SPACE ApplicationMailer SPACE < SPACE ActionMailer :: Base NEWLINE SPACE SPACE default SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE layout SPACE LITERALNEWLINE end NEWLINE 
class SPACE ApplicationRecord SPACE < SPACE ActiveRecord :: Base NEWLINE SPACE SPACE self . abstract_class SPACE = SPACE true NEWLINE end NEWLINE 
require_relative SPACE LITERALNEWLINE NEWLINE require SPACE LITERALNEWLINE NEWLINE Bundler . require ( * Rails . groups ) NEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE module SPACE Dummy NEWLINE SPACE SPACE class SPACE Application SPACE < SPACE Rails :: Application NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
NEWLINE ENV [ LITERAL] SPACE || = SPACE File . expand_path ( LITERAL, SPACE __dir__ ) NEWLINE NEWLINE require SPACE LITERALSPACE if SPACE File . exist? ( ENV [ LITERAL] ) NEWLINE $LOAD_PATH . unshift SPACE File . expand_path ( LITERAL, SPACE __dir__ ) NEWLINE 
NEWLINE require_relative SPACE LITERALNEWLINE NEWLINE NEWLINE Rails . application . initialize! NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE threads_count SPACE = SPACE ENV . fetch ( LITERALLITERALLITERAL) SPACE { SPACE LITERALSPACE } . to_i NEWLINE threads SPACE threads_count , SPACE threads_count NEWLINE NEWLINE NEWLINE NEWLINE port SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ENV . fetch ( LITERALLITERALLITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE NEWLINE NEWLINE environment SPACE ENV . fetch ( LITERALLITERALLITERAL) SPACE { SPACE LITERALLITERALLITERALSPACE } NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE plugin SPACE LITERALNEWLINE 
Rails . application . routes . draw SPACE do NEWLINE SPACE SPACE mount SPACE GemCollector :: Engine SPACE = > SPACE LITERALLITERALLITERALNEWLINE end NEWLINE 
LITERALLITERALLITERAL. each SPACE { SPACE | path | SPACE Spring . watch ( path ) SPACE } NEWLINE 
Rails . application . configure SPACE do NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . cache_classes SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . eager_load SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . consider_all_requests_local SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE if SPACE Rails . root . join ( LITERAL) . exist? NEWLINE SPACE SPACE SPACE SPACE config . action_controller . perform_caching SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE SPACE SPACE config . cache_store SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE config . public_file_server . headers SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE config . action_controller . perform_caching SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE SPACE SPACE config . cache_store SPACE = SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_mailer . raise_delivery_errors SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE config . action_mailer . perform_caching SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_support . deprecation SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_record . migration_error SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . debug SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . quiet SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE end NEWLINE 
Rails . application . configure SPACE do NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . cache_classes SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . eager_load SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . consider_all_requests_local SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE false NEWLINE SPACE SPACE config . action_controller . perform_caching SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . public_file_server . enabled SPACE = SPACE ENV [ LITERAL] . present? NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . js_compressor SPACE = SPACE LITERALNEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . compile SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . log_level SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . log_tags SPACE = SPACE [ SPACE LITERALSPACE ] NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_mailer . perform_caching SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . i18n . fallbacks SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_support . deprecation SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . log_formatter SPACE = SPACE :: Logger :: Formatter . new NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE if SPACE ENV [ LITERALLITERALLITERAL] . present? NEWLINE SPACE SPACE SPACE SPACE logger SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE ActiveSupport :: Logger . new ( STDOUT ) NEWLINE SPACE SPACE SPACE SPACE logger . formatter SPACE = SPACE config . log_formatter NEWLINE SPACE SPACE SPACE SPACE config . logger SPACE = SPACE ActiveSupport :: TaggedLogging . new ( logger ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_record . dump_schema_after_migration SPACE = SPACE false NEWLINE end NEWLINE 
Rails . application . configure SPACE do NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . cache_classes SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . eager_load SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . public_file_server . enabled SPACE = SPACE true NEWLINE SPACE SPACE config . public_file_server . headers SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE LITERALNEWLINE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . consider_all_requests_local SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE true NEWLINE SPACE SPACE config . action_controller . perform_caching SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_dispatch . show_exceptions SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_controller . allow_forgery_protection SPACE = SPACE false NEWLINE SPACE SPACE config . action_mailer . perform_caching SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_mailer . delivery_method SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_support . deprecation SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE end NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE Rails . application . config . assets . version SPACE = SPACE LITERALNEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE Rails . application . config . action_dispatch . cookies_serializer SPACE = SPACE LITERALNEWLINE 
NEWLINE NEWLINE NEWLINE Rails . application . config . filter_parameters SPACE += SPACE [ LITERAL] NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE Rails . application . config . action_controller . per_form_csrf_tokens SPACE = SPACE true NEWLINE NEWLINE NEWLINE Rails . application . config . action_controller . forgery_protection_origin_check SPACE = SPACE true NEWLINE NEWLINE NEWLINE NEWLINE ActiveSupport . to_time_preserves_timezone SPACE = SPACE true NEWLINE NEWLINE NEWLINE Rails . application . config . active_record . belongs_to_required_by_default SPACE = SPACE true NEWLINE NEWLINE NEWLINE ActiveSupport . halt_callback_chains_on_return_false SPACE = SPACE false NEWLINE NEWLINE NEWLINE Rails . application . config . ssl_options SPACE = SPACE { SPACE LITERAL: SPACE { SPACE LITERAL: SPACE true SPACE } SPACE } NEWLINE 
NEWLINE NEWLINE Rails . application . config . session_store SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE ActiveSupport . on_load ( LITERAL) SPACE do NEWLINE SPACE SPACE wrap_parameters SPACE format : SPACE [ LITERAL] NEWLINE end NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE ActiveRecord :: Schema . define ( LITERAL: SPACE LITERAL) SPACE do NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE enable_extension SPACE LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE GemCollector :: Repository SPACE do NEWLINE SPACE SPACE SPACE SPACE sequence ( LITERAL) SPACE { | n | SPACE n SPACE } NEWLINE SPACE SPACE SPACE SPACE sequence ( LITERAL) SPACE { | n | SPACE LITERALLITERALLITERALn LITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE sequence ( LITERAL) SPACE { | n | SPACE LITERALLITERALLITERALn LITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE ssh_url SPACE { SPACE LITERALLITERALLITERALfull_name LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE GemCollector :: RepositoryGem SPACE do NEWLINE SPACE SPACE SPACE SPACE sequence ( LITERAL) SPACE { | n | SPACE LITERALLITERALLITERALn LITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE sequence ( LITERAL) SPACE { | n | SPACE LITERALLITERALLITERALn LITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE path SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE repository_id SPACE { SPACE create ( LITERAL) . id SPACE } NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE GemCollector :: Repository SPACE do NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL. each SPACE do SPACE | v | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE FactoryGirl . create ( LITERAL, SPACE name : SPACE gem_name , SPACE LITERAL: SPACE v ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE FactoryGirl . create ( LITERAL, SPACE name : SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( described_class . find_by_dependent_gem ( gem_name ) . size ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE FactoryGirl . create ( LITERAL, SPACE name : SPACE gem_name , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( described_class . find_by_dependent_gem ( gem_name ) . size ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE repos SPACE = SPACE described_class . find_by_dependent_gem ( gem_name , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( repos . map ( & LITERAL) ) . to SPACE contain_exactly ( * LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE repos SPACE = SPACE described_class . find_by_dependent_gem ( gem_name , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( repos . map ( & LITERAL) ) . to SPACE contain_exactly ( * LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE repos SPACE = SPACE described_class . find_by_dependent_gem ( gem_name , SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( repos . map ( & LITERAL) ) . to SPACE contain_exactly ( * LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
NEWLINE NEWLINE gsub_file SPACE LITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALNEWLINE gsub_file SPACE LITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALNEWLINE gsub_file SPACE LITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALNEWLINE gsub_file SPACE LITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALNEWLINE gsub_file SPACE LITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERALNEWLINE NEWLINE gem SPACE LITERALNEWLINE NEWLINE gem_group SPACE LITERALSPACE do NEWLINE SPACE SPACE gem SPACE LITERALNEWLINE end NEWLINE NEWLINE route SPACE LITERALNEWLINE NEWLINE create_file SPACE LITERALLITERALLITERAL, SPACE <<- LITERALLITERALLITERALNEWLINE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE NEWLINE create_file SPACE LITERALLITERALLITERAL, SPACE <<- LITERALLITERALLITERALNEWLINE LITERALLITERALLITERALLITERALLITERALNEWLINE run SPACE LITERALNEWLINE rake SPACE LITERALNEWLINE rake SPACE LITERALNEWLINE rake SPACE LITERALNEWLINE NEWLINE say SPACE <<- LITERALLITERALLITERALNEWLINE LITERALLITERALLITERALLITERAL
class SPACE Kuroko2 :: ApplicationController SPACE < SPACE ActionController :: Base NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE protect_from_forgery SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE helper_method SPACE LITERAL, SPACE LITERALNEWLINE SPACE SPACE before_action SPACE LITERALNEWLINE NEWLINE SPACE SPACE rescue_from SPACE HTTP :: BadRequest SPACE do NEWLINE SPACE SPACE SPACE SPACE respond_to SPACE do SPACE | format | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE format . html SPACE { SPACE render SPACE LITERAL, SPACE LITERAL: SPACE false , SPACE LITERAL: SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE format . json SPACE { SPACE render SPACE LITERAL: SPACE { SPACE LITERAL: SPACE LITERALSPACE } , SPACE LITERAL: SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE current_user NEWLINE SPACE SPACE SPACE SPACE @_current_user SPACE || = SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( id SPACE = SPACE session [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: User . active . find ( id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE rescue SPACE ActiveRecord :: RecordNotFound NEWLINE SPACE SPACE SPACE SPACE reset_session NEWLINE SPACE SPACE SPACE SPACE redirect_to SPACE sign_in_path ( LITERAL: SPACE url_for ( params . permit! . to_h . merge ( LITERAL: SPACE true ) ) ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE current_user = ( user ) NEWLINE SPACE SPACE SPACE SPACE session [ LITERAL] SPACE = SPACE user . id NEWLINE SPACE SPACE SPACE SPACE @_current_user SPACE SPACE SPACE SPACE = SPACE user NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE signed_in? NEWLINE SPACE SPACE SPACE SPACE current_user . present? NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE require_sign_in NEWLINE SPACE SPACE SPACE SPACE unless SPACE signed_in? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE redirect_to SPACE sign_in_path ( LITERAL: SPACE url_for ( params . permit! . to_h . merge ( LITERAL: SPACE true ) ) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: DashboardController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE @definitions SPACE = SPACE current_user . job_definitions . includes ( LITERAL, SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE @input_tags SPACE SPACE = SPACE params [ LITERAL] SPACE || SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE if SPACE @input_tags . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @definitions SPACE = SPACE @definitions . tagged_by ( @input_tags ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE @instances SPACE SPACE SPACE SPACE = SPACE Kuroko2 :: JobInstance . working . where ( LITERAL: SPACE @definitions ) NEWLINE SPACE SPACE SPACE SPACE @related_tags SPACE = SPACE @definitions . includes ( LITERAL) . map ( & LITERAL) . flatten . uniq NEWLINE NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE osd NEWLINE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE <<- LITERALLITERALLITERAL. strip_heredoc NEWLINE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: ExecutionLogsController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE @definition SPACE = SPACE Kuroko2 :: JobDefinition . find ( logs_params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE @instance SPACE SPACE SPACE = SPACE Kuroko2 :: JobInstance . find ( logs_params [ LITERAL] ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE execution_logger SPACE = SPACE Kuroko2 :: ExecutionLogger . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE get_logger ( LITERAL: SPACE LITERALLITERALLITERALsprintf ( LITERALLITERALLITERAL, SPACE @definition . id ) LITERALLITERALLITERAL@instance . id LITERALLITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE @response SPACE = SPACE execution_logger . get_logs ( logs_params [ LITERAL] ) NEWLINE SPACE SPACE rescue SPACE Kuroko2 :: ExecutionLogger :: NotFound NEWLINE SPACE SPACE SPACE SPACE head SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE logs_params NEWLINE SPACE SPACE SPACE SPACE params . permit ( LITERAL, SPACE LITERAL, SPACE LITERAL) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: ExecutionsController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE NEWLINE SPACE SPACE before_action SPACE LITERAL, SPACE LITERAL: SPACE % i ( destroy ) NEWLINE NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE @executions SPACE = SPACE Kuroko2 :: Execution . where ( LITERAL: SPACE nil ) . order ( LITERAL: SPACE LITERAL) . includes ( LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE destroy NEWLINE SPACE SPACE SPACE SPACE if SPACE @execution . try ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE hostname SPACE = SPACE Kuroko2 :: Worker . executing ( @execution . id ) . try ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: ProcessSignal . create! ( LITERAL: SPACE @execution . pid , SPACE LITERAL: SPACE hostname ) SPACE if SPACE hostname NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE redirect_to SPACE job_definition_job_instance_path ( LITERAL: SPACE execution_params [ LITERAL] , SPACE id : SPACE execution_params [ LITERAL] ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE set_execution NEWLINE SPACE SPACE SPACE SPACE @execution SPACE = SPACE Kuroko2 :: Execution . where ( LITERAL: SPACE execution_params [ LITERAL] , SPACE LITERAL: SPACE execution_params [ LITERAL] , SPACE id : SPACE execution_params [ LITERAL] ) . take NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE execution_params NEWLINE SPACE SPACE SPACE SPACE params . permit ( LITERAL, SPACE LITERAL, SPACE LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE end NEWLINE 
class SPACE Kuroko2 :: JobDefinitionStatsController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE set_definition NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE execution_time NEWLINE SPACE SPACE SPACE SPACE set_definition NEWLINE SPACE SPACE SPACE SPACE set_period NEWLINE NEWLINE SPACE SPACE SPACE SPACE @logs SPACE = SPACE Kuroko2 :: JobInstance . where ( LITERAL: SPACE params [ LITERAL] ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE order ( LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE if SPACE @start_at NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @logs SPACE = SPACE @logs . where ( LITERAL: SPACE @start_at .. @end_at ) NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @logs SPACE = SPACE @logs . limit ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE memory NEWLINE SPACE SPACE SPACE SPACE set_definition NEWLINE SPACE SPACE SPACE SPACE set_period NEWLINE NEWLINE SPACE SPACE SPACE SPACE target_instance SPACE = SPACE Kuroko2 :: JobInstance . where ( LITERAL: SPACE params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE if SPACE @start_at NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE target_instance SPACE = SPACE target_instance . where ( LITERAL: SPACE @start_at .. @end_at ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE @logs SPACE = SPACE Kuroko2 :: MemoryConsumptionLog . joins ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE merge ( target_instance ) . order ( LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE @logs SPACE = SPACE @logs . limit ( LITERAL) SPACE unless SPACE @start_at NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE set_period NEWLINE SPACE SPACE SPACE SPACE @end_at SPACE SPACE SPACE = SPACE Time . current NEWLINE NEWLINE SPACE SPACE SPACE SPACE @start_at SPACE = NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE params [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE $1 . to_i . days . ago ( @end_at ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE $1 . to_i . weeks . ago ( @end_at ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE $1 . to_i . month . ago ( @end_at ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE set_definition NEWLINE SPACE SPACE SPACE SPACE @definition SPACE = SPACE SPACE Kuroko2 :: JobDefinition . find ( params [ LITERAL] ) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: JobDefinitionsController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE SPACE SPACE before_action SPACE LITERAL, SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL] NEWLINE NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE rel SPACE = SPACE Kuroko2 :: JobDefinition . joins ( LITERAL) . includes ( LITERAL, SPACE LITERAL, SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE query SPACE = SPACE query_params [ LITERAL] NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE query . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE rel SPACE = SPACE rel . search_by ( query ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE @input_tags SPACE = SPACE query_params [ LITERAL] SPACE || SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE if SPACE @input_tags . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE rel SPACE = SPACE rel . tagged_by ( @input_tags ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE query . present? SPACE || SPACE @input_tags . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @related_tags SPACE = SPACE rel . includes ( LITERAL) . map ( & LITERAL) . flatten . uniq NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @related_tags SPACE = SPACE Kuroko2 :: Tag . all NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE @definitions SPACE = SPACE rel . ordered . page ( page_params [ LITERAL] ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE show NEWLINE SPACE SPACE SPACE SPACE @instances SPACE = SPACE @definition . job_instances . page ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE @schedules SPACE = SPACE @definition . job_schedules NEWLINE SPACE SPACE SPACE SPACE @suspend_schedules SPACE = SPACE @definition . job_suspend_schedules NEWLINE NEWLINE SPACE SPACE SPACE SPACE @schedule SPACE SPACE = SPACE Kuroko2 :: JobSchedule . new ( LITERAL: SPACE @definitions ) NEWLINE SPACE SPACE SPACE SPACE @suspend_schedule SPACE = SPACE Kuroko2 :: JobSuspendSchedule . new ( LITERAL: SPACE @definitions ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE new NEWLINE SPACE SPACE SPACE SPACE @definition SPACE = SPACE Kuroko2 :: JobDefinition . new NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE create NEWLINE SPACE SPACE SPACE SPACE @definition SPACE = SPACE Kuroko2 :: JobDefinition . new ( definition_params ) NEWLINE SPACE SPACE SPACE SPACE @definition . admins SPACE << SPACE current_user NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE @definition . save NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE current_user . stars . create ( LITERAL: SPACE @definition ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE redirect_to SPACE @definition , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE edit NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE update NEWLINE SPACE SPACE SPACE SPACE success SPACE = SPACE ActiveRecord :: Base . transaction SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @definition . attributes SPACE = SPACE definition_params NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @definition . admins SPACE SPACE SPACE SPACE SPACE = SPACE Kuroko2 :: User . active . with ( admin_id_params ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @definition . save NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE success NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE redirect_to SPACE @definition , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE destroy NEWLINE SPACE SPACE SPACE SPACE @definition . destroy NEWLINE NEWLINE SPACE SPACE SPACE SPACE redirect_to SPACE job_definitions_path , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE admin_id_params NEWLINE SPACE SPACE SPACE SPACE params . require ( LITERAL) . permit ( LITERAL: SPACE [ ] ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE try ( LITERAL, SPACE LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE try ( LITERAL, SPACE & LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE try ( LITERAL, SPACE & LITERAL) SPACE || SPACE [ ] NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE definition_params NEWLINE SPACE SPACE SPACE SPACE params . require ( LITERAL) . permit ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE query_params NEWLINE SPACE SPACE SPACE SPACE params . permit ( LITERAL, SPACE LITERAL: SPACE [ ] ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE page_params NEWLINE SPACE SPACE SPACE SPACE params . permit ( LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE set_definition NEWLINE SPACE SPACE SPACE SPACE @definition SPACE = SPACE Kuroko2 :: JobDefinition . find ( params [ LITERAL] ) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: JobInstancesController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE SPACE SPACE before_action SPACE LITERAL, SPACE LITERAL: SPACE % i ( index SPACE create SPACE show SPACE destroy SPACE force_destroy ) NEWLINE SPACE SPACE before_action SPACE LITERAL, SPACE LITERAL: SPACE % i ( show SPACE destroy SPACE force_destroy ) NEWLINE NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE @instances SPACE = SPACE @definition . job_instances . page ( page_params [ LITERAL] ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE false NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE create NEWLINE SPACE SPACE SPACE SPACE creation_params SPACE = SPACE { SPACE LITERAL: SPACE current_user . name SPACE } NEWLINE SPACE SPACE SPACE SPACE if SPACE params [ LITERAL] . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE creation_params . merge! ( params . require ( LITERAL) . permit ( LITERAL) . to_h . symbolize_keys ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE @instance SPACE = SPACE @definition . create_instance ( creation_params ) NEWLINE SPACE SPACE SPACE SPACE redirect_to SPACE job_definition_job_instance_path ( @definition , SPACE @instance ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE show NEWLINE SPACE SPACE SPACE SPACE @logs SPACE SPACE SPACE = SPACE @instance . logs . order ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE @tokens SPACE = SPACE @instance . tokens . order ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE params [ LITERAL] SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE destroy NEWLINE SPACE SPACE SPACE SPACE if SPACE @instance . cancelable? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ActiveRecord :: Base . transaction SPACE { SPACE @instance . cancel ( LITERAL: SPACE current_user . name ) SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE redirect_to SPACE job_definition_job_instance_path ( @definition , SPACE @instance ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE force_destroy NEWLINE SPACE SPACE SPACE SPACE ActiveRecord :: Base . transaction SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @instance . executions . each SPACE do SPACE | execution | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution SPACE = SPACE Kuroko2 :: Worker . executing ( execution . id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . update_column ( LITERAL, SPACE nil ) SPACE if SPACE execution NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @instance . cancel ( LITERAL: SPACE current_user . name ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALcurrent_user . name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE @instance . logs . warn ( message ) NEWLINE SPACE SPACE SPACE SPACE Kuroko2 . logger . warn ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE redirect_to SPACE job_definition_job_instance_path ( @definition , SPACE @instance ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE working NEWLINE SPACE SPACE SPACE SPACE @instances SPACE = SPACE Kuroko2 :: JobInstance . working . order ( id : SPACE LITERAL) . joins ( LITERAL: SPACE LITERAL) . includes ( LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE SPACE SPACE def SPACE job_instance_params NEWLINE SPACE SPACE SPACE SPACE params . permit ( LITERAL, SPACE LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE page_params NEWLINE SPACE SPACE SPACE SPACE params . permit ( LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE set_definition NEWLINE SPACE SPACE SPACE SPACE @definition SPACE = SPACE Kuroko2 :: JobDefinition . find ( job_instance_params [ LITERAL] ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE set_instance NEWLINE SPACE SPACE SPACE SPACE @instance SPACE = SPACE @definition . job_instances . find ( job_instance_params [ LITERAL] ) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: JobSchedulesController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE SPACE SPACE before_action SPACE LITERAL, SPACE LITERAL: SPACE % i ( index SPACE create SPACE destroy ) NEWLINE NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE @schedules SPACE = SPACE @definition . job_schedules NEWLINE SPACE SPACE SPACE SPACE @schedule SPACE SPACE = SPACE Kuroko2 :: JobSchedule . new NEWLINE NEWLINE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE false NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE create NEWLINE SPACE SPACE SPACE SPACE schedule SPACE = SPACE @definition . job_schedules . create ( job_schedule_params ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE schedule . valid? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE schedule , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE schedule , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE destroy NEWLINE SPACE SPACE SPACE SPACE schedule SPACE = SPACE Kuroko2 :: JobSchedule . find ( params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE if SPACE schedule . destroy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE schedule , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE schedule , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE job_schedule_params NEWLINE SPACE SPACE SPACE SPACE params . require ( LITERAL) . permit ( LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE set_definition NEWLINE SPACE SPACE SPACE SPACE @definition SPACE = SPACE Kuroko2 :: JobDefinition . find ( params [ LITERAL] ) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: JobSuspendSchedulesController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE SPACE SPACE before_action SPACE LITERAL, SPACE LITERAL: SPACE % i ( index SPACE create SPACE destroy ) NEWLINE NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE @suspend_schedules SPACE = SPACE @definition . job_suspend_schedules NEWLINE SPACE SPACE SPACE SPACE @suspend_schedule SPACE SPACE = SPACE Kuroko2 :: JobSuspendSchedule . new NEWLINE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE false NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE create NEWLINE SPACE SPACE SPACE SPACE suspend_schedule SPACE = SPACE @definition . job_suspend_schedules . create ( job_suspend_schedule_params ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE suspend_schedule . valid? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE suspend_schedule , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE suspend_schedule , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE destroy NEWLINE SPACE SPACE SPACE SPACE suspend_schedule SPACE = SPACE Kuroko2 :: JobSuspendSchedule . find ( params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE if SPACE suspend_schedule . destroy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE suspend_schedule , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE suspend_schedule , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE job_suspend_schedule_params NEWLINE SPACE SPACE SPACE SPACE params . require ( LITERAL) . permit ( LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE set_definition NEWLINE SPACE SPACE SPACE SPACE @definition SPACE = SPACE Kuroko2 :: JobDefinition . find ( params [ LITERAL] ) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: JobTimelinesController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE find_user NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE dataset NEWLINE SPACE SPACE SPACE SPACE find_user NEWLINE SPACE SPACE SPACE SPACE set_period NEWLINE NEWLINE SPACE SPACE SPACE SPACE definition_ids SPACE = SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE definition_ids SPACE << SPACE my_difinitions . pluck ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE definition_ids SPACE << SPACE assigned_definitions . pluck ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE @instances SPACE = SPACE Kuroko2 :: JobInstance . includes ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE where ( LITERAL: SPACE definition_ids . flatten . uniq , SPACE LITERAL: SPACE @start_at .. @end_at ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE order ( LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE my_difinitions NEWLINE SPACE SPACE SPACE SPACE rel SPACE = SPACE @user . job_definitions NEWLINE SPACE SPACE SPACE SPACE rel SPACE = SPACE rel . tagged_by ( params [ LITERAL] ) SPACE if SPACE params [ LITERAL] . present? NEWLINE SPACE SPACE SPACE SPACE rel NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE assigned_definitions NEWLINE SPACE SPACE SPACE SPACE rel SPACE = SPACE @user . assigned_job_definitions NEWLINE SPACE SPACE SPACE SPACE rel SPACE = SPACE rel . tagged_by ( params [ LITERAL] ) SPACE if SPACE params [ LITERAL] . present? NEWLINE SPACE SPACE SPACE SPACE rel NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE find_user NEWLINE SPACE SPACE SPACE SPACE if SPACE params [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @user SPACE = SPACE Kuroko2 :: User . find ( params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @user SPACE = SPACE current_user NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE set_period NEWLINE SPACE SPACE SPACE SPACE @end_at SPACE SPACE SPACE = SPACE Time . current NEWLINE NEWLINE SPACE SPACE SPACE SPACE @start_at SPACE = NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE params [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE $1 . to_i . hours . ago ( @end_at ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE $1 . to_i . days . ago ( @end_at ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE $1 . to_i . weeks . ago ( @end_at ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL. hour . ago ( @end_at ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: LogsController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE @definition SPACE = SPACE Kuroko2 :: JobDefinition . find ( logs_params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE @instance SPACE SPACE SPACE = SPACE Kuroko2 :: JobInstance . find ( logs_params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE @logs SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE @instance . logs . order ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE false NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE logs_params NEWLINE SPACE SPACE SPACE SPACE params . permit ( LITERAL, SPACE LITERAL) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: SessionsController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE SPACE SPACE skip_before_action SPACE LITERALNEWLINE NEWLINE SPACE SPACE def SPACE new NEWLINE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE false NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE create NEWLINE SPACE SPACE SPACE SPACE return_to SPACE = SPACE params [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE reset_session NEWLINE NEWLINE SPACE SPACE SPACE SPACE unless SPACE valid_google_hosted_domain? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE return NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE self . current_user SPACE = SPACE Kuroko2 :: User . find_or_create_user ( auth_hash [ LITERAL] , SPACE auth_hash [ LITERAL] ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE unless SPACE Kuroko2 :: ReturnToValidator . valid? ( return_to ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE return_to SPACE = SPACE root_path NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE redirect_to SPACE return_to NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE destroy NEWLINE SPACE SPACE SPACE SPACE reset_session NEWLINE NEWLINE SPACE SPACE SPACE SPACE redirect_to SPACE sign_in_path NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE auth_hash NEWLINE SPACE SPACE SPACE SPACE request . env [ LITERAL] NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE valid_google_hosted_domain? NEWLINE SPACE SPACE SPACE SPACE hd SPACE = SPACE Kuroko2 . config . app_authentication . google_oauth2 . options . hd NEWLINE SPACE SPACE SPACE SPACE if SPACE hd . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE hd SPACE == SPACE auth_hash . extra . id_info . hd NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE true NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: StarsController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE SPACE SPACE def SPACE create NEWLINE SPACE SPACE SPACE SPACE star SPACE = SPACE Kuroko2 :: Star . new SPACE do SPACE | star | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE star . job_definition SPACE = SPACE Kuroko2 :: JobDefinition . find ( star_params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE star . user SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE current_user NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE ( star . save ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE star , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE HTTP :: BadRequest NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE destroy NEWLINE SPACE SPACE SPACE SPACE star SPACE = SPACE Kuroko2 :: Star . find ( params [ LITERAL] ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE ( star . destroy ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE star , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE HTTP :: BadRequest NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE star_params NEWLINE SPACE SPACE SPACE SPACE params . permit ( LITERAL) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: TokensController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE NEWLINE SPACE SPACE before_action SPACE LITERAL, SPACE LITERAL: SPACE % i ( update ) NEWLINE SPACE SPACE before_action SPACE LITERAL, SPACE LITERAL: SPACE % i ( update ) NEWLINE NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE @definition SPACE = SPACE Kuroko2 :: JobDefinition . find ( tokens_params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE @instance SPACE SPACE SPACE = SPACE Kuroko2 :: JobInstance . find ( tokens_params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE @tokens SPACE SPACE SPACE SPACE SPACE = SPACE @instance . tokens NEWLINE NEWLINE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE false NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE update NEWLINE SPACE SPACE SPACE SPACE @instance SPACE = SPACE @token . job_instance NEWLINE NEWLINE SPACE SPACE SPACE SPACE case NEWLINE SPACE SPACE SPACE SPACE when SPACE params [ LITERAL] SPACE == SPACE LITERALSPACE && SPACE @token . skippable? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @instance . logs . info ( LITERALLITERALLITERALcurrent_user . name LITERALLITERALLITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @engine . skip ( @token ) NEWLINE SPACE SPACE SPACE SPACE when SPACE params [ LITERAL] SPACE == SPACE LITERALSPACE && SPACE @token . retryable? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @instance . logs . info ( LITERALLITERALLITERALcurrent_user . name LITERALLITERALLITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @engine . retry ( @token ) NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE HTTP :: BadRequest NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE redirect_to SPACE job_definition_job_instance_path ( LITERAL: SPACE @token . job_definition_id , SPACE id : SPACE @token . job_instance . id ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE set_engine NEWLINE SPACE SPACE SPACE SPACE @engine SPACE = SPACE Kuroko2 :: Workflow :: Engine . new NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE set_token NEWLINE SPACE SPACE SPACE SPACE @token SPACE = SPACE Kuroko2 :: Token . where ( LITERAL: SPACE params [ LITERAL] , SPACE LITERAL: SPACE params [ LITERAL] ) . find ( params [ LITERAL] ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE tokens_params NEWLINE SPACE SPACE SPACE SPACE params . permit ( LITERAL, SPACE LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE end NEWLINE 
class SPACE Kuroko2 :: UsersController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE SPACE SPACE before_action SPACE LITERAL, SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE before_action SPACE LITERAL, SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL] NEWLINE NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE @user SPACE SPACE = SPACE Kuroko2 :: User . new NEWLINE SPACE SPACE SPACE SPACE if SPACE params [ LITERAL] SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @users SPACE = SPACE Kuroko2 :: User . group_user . all . page ( page_params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @users SPACE = SPACE Kuroko2 :: User . all . page ( page_params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE show NEWLINE SPACE SPACE SPACE SPACE @user SPACE = SPACE Kuroko2 :: User . find ( params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE @input_tags SPACE SPACE = SPACE params [ LITERAL] SPACE || SPACE [ ] NEWLINE NEWLINE SPACE SPACE SPACE SPACE @definitions SPACE = SPACE @user . assigned_job_definitions NEWLINE SPACE SPACE SPACE SPACE if SPACE @input_tags . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @definitions SPACE = SPACE @definitions . tagged_by ( @input_tags ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE @instances SPACE SPACE SPACE SPACE = SPACE Kuroko2 :: JobInstance . working . where ( LITERAL: SPACE @definitions ) NEWLINE SPACE SPACE SPACE SPACE @related_tags SPACE = SPACE @definitions . includes ( LITERAL) . map ( & LITERAL) . flatten . uniq NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE edit NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE update NEWLINE SPACE SPACE SPACE SPACE if SPACE @user . update ( user_params ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE redirect_to SPACE user_path ( @user ) NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE create NEWLINE SPACE SPACE SPACE SPACE @user SPACE = SPACE Kuroko2 :: User . new ( user_params ) NEWLINE SPACE SPACE SPACE SPACE @user . provider SPACE = SPACE Kuroko2 :: User :: GROUP_PROVIDER NEWLINE SPACE SPACE SPACE SPACE @user . uid SPACE SPACE SPACE SPACE SPACE SPACE = SPACE @user . email NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE @user . save NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE redirect_to SPACE users_path NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @users SPACE = SPACE Kuroko2 :: User . all NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE destroy NEWLINE SPACE SPACE SPACE SPACE if SPACE @user . destroy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE redirect_to SPACE users_url NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @users SPACE = SPACE Kuroko2 :: User . all NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE render SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE SPACE SPACE def SPACE set_user NEWLINE SPACE SPACE SPACE SPACE @user SPACE = SPACE Kuroko2 :: User . find ( params [ LITERAL] ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE user_params NEWLINE SPACE SPACE SPACE SPACE params . require ( LITERAL) . permit ( LITERAL, SPACE LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE page_params NEWLINE SPACE SPACE SPACE SPACE params . permit ( LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE require_group_user NEWLINE SPACE SPACE SPACE SPACE head SPACE LITERALSPACE if SPACE @user . google_account? NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: WorkersController SPACE < SPACE Kuroko2 :: ApplicationController NEWLINE SPACE SPACE def SPACE index NEWLINE SPACE SPACE SPACE SPACE @workers SPACE = SPACE Kuroko2 :: Worker . ordered . all NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: Api :: ApplicationController SPACE < SPACE ActionController :: Base NEWLINE SPACE SPACE include SPACE Garage :: ControllerHelper NEWLINE NEWLINE SPACE SPACE before_action SPACE LITERALNEWLINE NEWLINE SPACE SPACE rescue_from SPACE ActiveRecord :: RecordNotFound SPACE do SPACE | exception | NEWLINE SPACE SPACE SPACE SPACE respond_with_error ( LITERAL, SPACE LITERAL, SPACE exception . message ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE rescue_from SPACE HTTP :: Forbidden SPACE do SPACE | exception | NEWLINE SPACE SPACE SPACE SPACE respond_with_error ( LITERAL, SPACE LITERAL, SPACE exception . message ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE rescue_from SPACE HTTP :: Unauthorized SPACE do SPACE | exception | NEWLINE SPACE SPACE SPACE SPACE respond_with_error ( LITERAL, SPACE LITERAL, SPACE exception . message ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE rescue_from SPACE WeakParameters :: ValidationError SPACE do SPACE | exception | NEWLINE SPACE SPACE SPACE SPACE respond_with_error ( LITERAL, SPACE LITERAL, SPACE exception . message ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE def SPACE respond_with_error ( status_code , SPACE error_code , SPACE message ) NEWLINE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE { SPACE LITERAL: SPACE status_code , SPACE LITERAL: SPACE error_code , SPACE LITERAL: SPACE message SPACE } , SPACE LITERAL: SPACE status_code NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE api_authentication NEWLINE SPACE SPACE SPACE SPACE service_name SPACE = SPACE authenticate_with_http_basic SPACE do SPACE | name , SPACE api_key | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stored SPACE = SPACE Kuroko2 . config . api_basic_authentication_applications . try! ( name . to_sym ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE Rack :: Utils . secure_compare ( api_key , SPACE stored ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE name . to_sym NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE service_name . nil? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE HTTP :: Unauthorized NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE basic_user_name NEWLINE SPACE SPACE SPACE SPACE ActionController :: HttpAuthentication :: Basic . user_name_and_password ( request ) . first NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: Api :: JobInstancesController SPACE < SPACE Kuroko2 :: Api :: ApplicationController NEWLINE SPACE SPACE include SPACE Garage :: RestfulActions NEWLINE NEWLINE SPACE SPACE validates SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE hash SPACE LITERAL, SPACE LITERAL: SPACE LITERALSPACE do SPACE | env | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE env . to_h . all? SPACE { SPACE | _ , SPACE v | SPACE v . is_a? ( String ) SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE require_resources NEWLINE SPACE SPACE SPACE SPACE protect_resource_as SPACE Kuroko2 :: Api :: JobInstanceResource NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE create_resource NEWLINE SPACE SPACE SPACE SPACE definition SPACE = SPACE Kuroko2 :: JobDefinition . find ( params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE unless SPACE definition . api_allowed? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE HTTP :: Forbidden . new ( LITERALLITERALdefinition . name LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE instance SPACE = SPACE definition . create_instance ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE definition . script . prepend ( env_script ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERALbasic_user_name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE Kuroko2 :: Api :: JobInstanceResource . new ( instance ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE require_resource NEWLINE SPACE SPACE SPACE SPACE instance SPACE = SPACE Kuroko2 :: JobInstance . find ( params [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE @resource SPACE = SPACE Kuroko2 :: Api :: JobInstanceResource . new ( instance ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE env_script NEWLINE SPACE SPACE SPACE SPACE return SPACE LITERALSPACE unless SPACE params [ LITERAL] NEWLINE NEWLINE SPACE SPACE SPACE SPACE params [ LITERAL] . permit! . to_h . map SPACE { SPACE | key , SPACE value | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALkey LITERALLITERALLITERALvalue . gsub ( LITERALLITERALLITERAL, SPACE LITERALLITERALLITERALLITERALLITERAL) LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE } . join ( LITERALLITERALLITERAL) . concat ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE def SPACE location NEWLINE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: Api :: StatsController SPACE < SPACE Kuroko2 :: Api :: ApplicationController NEWLINE SPACE SPACE skip_before_action SPACE LITERALNEWLINE NEWLINE SPACE SPACE COUNT_INSTANCES_SQL SPACE = SPACE <<- LITERALLITERALLITERALNEWLINE LITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE def SPACE instance NEWLINE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE ActiveRecord :: Base . connection . select_one ( COUNT_INSTANCES_SQL ) . to_hash NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE waiting_execution NEWLINE SPACE SPACE SPACE SPACE waiting_executions_count SPACE = SPACE Kuroko2 :: Execution . select ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE where ( LITERAL, SPACE LITERAL. minutes . ago ) . group ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE render SPACE LITERAL: SPACE Kuroko2 :: Worker . pluck ( LITERAL) . uniq . inject ( { } ) SPACE { SPACE | result , SPACE queue | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE result . merge ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALqueue LITERALLITERALSPACE = > SPACE waiting_executions_count . find SPACE { SPACE | count | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE count . queue SPACE == SPACE queue NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . try! ( LITERAL, SPACE LITERALLITERALLITERAL) SPACE || SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE HTTP NEWLINE SPACE SPACE class SPACE BadRequest SPACE < SPACE StandardError NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE HTTP NEWLINE SPACE SPACE class SPACE Forbidden SPACE < SPACE StandardError NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE HTTP NEWLINE SPACE SPACE class SPACE Unauthorized SPACE < SPACE StandardError NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE ApplicationHelper NEWLINE SPACE SPACE SPACE SPACE include SPACE RailsRinku NEWLINE SPACE SPACE SPACE SPACE alias_method SPACE LITERAL, SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE DashboardHelper NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE ExecutionsHelper NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE JobDefinitionsHelper NEWLINE SPACE SPACE SPACE SPACE def SPACE first_line ( text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE truncate ( text . split ( LITERALLITERALLITERAL) . first , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE markdown_format ( text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE pipeline SPACE = SPACE HTML :: Pipeline . new ( [ HTML :: Pipeline :: MarkdownFilter ] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raw ( pipeline . call ( text ) [ LITERAL] . to_s ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE stared_with ( definition ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE current_user . stars . find SPACE { | star | SPACE star . job_definition_id SPACE == SPACE definition . id SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE star_link_for ( definition ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE stared_with ( definition ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE link_to ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raw ( LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job_definition_star_path ( id : SPACE stared_with ( definition ) , SPACE LITERAL: SPACE definition ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE true , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE method : SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id , SPACE LITERAL: SPACE stared_with ( definition ) . id , SPACE LITERAL: SPACE job_definitions_path SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE link_to ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raw ( LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job_definition_stars_path ( definition . id ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE true , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE method : SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id , SPACE LITERAL: SPACE job_definitions_path SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE format_kuroko_script ( script_text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE script_text . each_line . map SPACE { SPACE | line | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE matched SPACE = SPACE Kuroko2 :: Workflow :: ScriptParser :: LINE_REGEXP . match ( line . chomp ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE matched SPACE && SPACE matched [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE format_wait_task ( line , SPACE matched ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE format_sub_process_task ( line , SPACE matched ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ERB :: Util . html_escape ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } . join ( LITERAL) . html_safe NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE format_wait_task ( line , SPACE matched ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE definition_names SPACE = SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE formatted_line SPACE = SPACE line . gsub ( Kuroko2 :: Workflow :: Task :: Wait :: OPTION_REGEXP ) SPACE { SPACE | option | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE definition SPACE = SPACE Kuroko2 :: JobDefinition . find_by ( id : SPACE $1 . to_i ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE definition . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE definition_names SPACE << SPACE definition . name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE link_to ( option , SPACE job_definition_path ( definition . id ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ERB :: Util . html_escape ( option ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } . chomp NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE formatted_line SPACE << SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE formatted_line SPACE << SPACE content_tag ( LITERAL, SPACE LITERALLITERALLITERALLITERALdefinition_names . join ( LITERAL) LITERALLITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE formatted_line SPACE << SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE format_sub_process_task ( line , SPACE matched ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE definition SPACE = SPACE Kuroko2 :: JobDefinition . find_by ( id : SPACE matched [ LITERAL] . to_i ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE definition . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE formatted_line SPACE = SPACE link_to ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE line . chomp , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job_definition_path ( definition . id ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE formatted_line SPACE << SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE formatted_line SPACE << SPACE content_tag ( LITERAL, SPACE LITERALLITERALLITERALLITERALdefinition . name LITERALLITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE formatted_line SPACE << SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ERB :: Util . html_escape ( line ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE JobInstancesHelper NEWLINE SPACE SPACE SPACE SPACE def SPACE labeled_log_level ( level ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE modifier SPACE = SPACE case SPACE level NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE content_tag ( LITERAL, SPACE level , SPACE LITERAL: SPACE LITERALLITERALLITERALmodifier LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE labeled_token_status ( status ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE modifier SPACE = SPACE case SPACE status NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE content_tag ( LITERAL, SPACE status . upcase , SPACE LITERAL: SPACE LITERALLITERALLITERALmodifier LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE labeled_status ( instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE LITERALSPACE if SPACE instance . nil? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE modifier SPACE = SPACE case SPACE instance . status NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE content_tag ( LITERAL, SPACE instance . status . upcase , SPACE LITERAL: SPACE LITERALLITERALLITERALmodifier LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE first_line ( lines ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE lines . split ( LITERALLITERALLITERAL) . first NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE distance_of_time ( from , SPACE to ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE secs SPACE SPACE = SPACE ( to SPACE - SPACE from ) . to_i NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE mins SPACE SPACE = SPACE secs SPACE / SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE hours SPACE = SPACE mins SPACE / SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE days SPACE SPACE = SPACE hours SPACE / SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE text SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE days SPACE > SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE text SPACE << SPACE LITERALLITERALdays LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE text SPACE << SPACE LITERALLITERALsprintf ( LITERAL, SPACE hours SPACE % SPACE LITERAL) LITERALLITERALLITERALsprintf ( LITERAL, SPACE mins SPACE % SPACE LITERAL) LITERALLITERALLITERALsprintf ( LITERAL, SPACE secs SPACE % SPACE LITERAL) LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE text NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE JobSchedulesHelper NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE LogsHelper NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE SessionsHelper NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE StarsHelper NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE TokensHelper NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE UsersHelper NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE WorkersHelper NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE class SPACE ApplicationJob SPACE < SPACE ActiveJob :: Base NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE class SPACE ApplicationMailer SPACE < SPACE ActionMailer :: Base NEWLINE SPACE SPACE SPACE SPACE default SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE layout SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE class SPACE Notifications SPACE < SPACE ApplicationMailer NEWLINE SPACE SPACE SPACE SPACE default ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE Kuroko2 . config . notifiers . mail . mail_from , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE Kuroko2 . config . notifiers . mail . mail_to , NEWLINE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE helper_method SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE job_failure ( job_instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @definition SPACE = SPACE job_instance . job_definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @instance SPACE SPACE SPACE = SPACE job_instance NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE attachments . inline [ LITERAL] SPACE = SPACE Kuroko2 :: Engine . root . join ( LITERAL) . read NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE mail ( LITERAL: SPACE LITERALLITERALLITERAL@definition . name LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE @definition . admins . map ( & LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . notifiers . mail . mail_to ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE remind_failure ( job_instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @definition SPACE = SPACE job_instance . job_definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @instance SPACE SPACE SPACE = SPACE job_instance NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE attachments . inline [ LITERAL] SPACE = SPACE Kuroko2 :: Engine . root . join ( LITERAL) . read NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE mail ( LITERAL: SPACE LITERALLITERALLITERAL@definition . name LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE @definition . admins . map ( & LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . notifiers . mail . mail_to ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE process_absence ( execution , SPACE hostname ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @execution SPACE SPACE = SPACE execution NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @definition SPACE = SPACE execution . job_definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @instance SPACE SPACE SPACE = SPACE execution . job_instance NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @hostname SPACE SPACE SPACE = SPACE hostname NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE mail ( LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE executor_not_assigned ( execution , SPACE hostname ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @execution SPACE SPACE = SPACE execution NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @definition SPACE = SPACE execution . job_definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @instance SPACE SPACE SPACE = SPACE execution . job_instance NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE mail ( LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE notify_long_elapsed_time ( job_instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @definition SPACE = SPACE job_instance . job_definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @instance SPACE SPACE SPACE = SPACE job_instance NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE mail ( LITERAL: SPACE LITERALLITERALLITERAL@definition . name LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE @definition . admins . map ( & LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . notifiers . mail . mail_to ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE job_instance_url NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE job_definition_job_instance_url ( @definition , SPACE @instance ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE TableNameCustomizable NEWLINE SPACE SPACE SPACE SPACE extend SPACE ActiveSupport :: Concern NEWLINE NEWLINE SPACE SPACE SPACE SPACE included SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE self . table_name SPACE = SPACE self . kuroko2_table_name NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE module SPACE ClassMethods NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE kuroko2_table_name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . table_name_prefix SPACE + NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE self . name . gsub ( LITERALLITERALLITERAL, SPACE LITERAL) . underscore . pluralize NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: AdminAssignment SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE class SPACE ApplicationRecord SPACE < SPACE ActiveRecord :: Base NEWLINE SPACE SPACE SPACE SPACE self . abstract_class SPACE = SPACE true NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: Execution SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE DEFAULT_QUEUE SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > ( token ) SPACE { SPACE where ( LITERAL: SPACE token ) SPACE } NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > ( queue ) SPACE { SPACE where ( LITERAL: SPACE queue ) SPACE } NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE { SPACE where ( LITERAL: SPACE nil ) SPACE } NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE { SPACE where . not ( LITERAL: SPACE nil ) SPACE } NEWLINE NEWLINE SPACE SPACE serialize SPACE LITERAL, SPACE JSON NEWLINE NEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE SPACE SPACE belongs_to SPACE LITERAL, SPACE LITERAL: SPACE true NEWLINE NEWLINE SPACE SPACE has_one SPACE LITERALNEWLINE NEWLINE SPACE SPACE before_create SPACE LITERALNEWLINE NEWLINE SPACE SPACE delegate SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE def SPACE completed? NEWLINE SPACE SPACE SPACE SPACE started_at? SPACE && SPACE finished_at? NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE success? NEWLINE SPACE SPACE SPACE SPACE exit_status SPACE == SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE self . poll ( queue SPACE = SPACE DEFAULT_QUEUE ) NEWLINE SPACE SPACE SPACE SPACE self . transaction SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE unstarted . with ( queue ) . lock . take . tap SPACE do SPACE | execution | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . touch ( LITERAL) SPACE if SPACE execution NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE finish ( LITERAL: , SPACE LITERAL: ) NEWLINE SPACE SPACE SPACE SPACE update! ( LITERAL: SPACE output , SPACE LITERAL: SPACE exit_status , SPACE LITERAL: SPACE Time . current ) NEWLINE SPACE SPACE SPACE SPACE job_definition . memory_expectancy . calculate! NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE finish_by_signal ( LITERAL: , SPACE LITERAL: ) NEWLINE SPACE SPACE SPACE SPACE update! ( LITERAL: SPACE output , SPACE LITERAL: SPACE term_signal , SPACE LITERAL: SPACE Time . current ) NEWLINE SPACE SPACE SPACE SPACE job_definition . memory_expectancy . calculate! NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE set_default_values NEWLINE SPACE SPACE SPACE SPACE self . uuid SPACE SPACE SPACE SPACE || = SPACE SecureRandom . uuid NEWLINE SPACE SPACE SPACE SPACE self . context SPACE || = SPACE { } NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: JobDefinition SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE module SPACE PreventMultiStatus NEWLINE SPACE SPACE SPACE SPACE NONE SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE WORKING_OR_ERROR SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE WORKING SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE ERROR SPACE = SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE PREVENT_TOKEN_STATUSES SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE PreventMultiStatus :: NONE SPACE = > SPACE [ ] , NEWLINE SPACE SPACE SPACE SPACE PreventMultiStatus :: WORKING_OR_ERROR SPACE = > SPACE [ NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token :: WORKING , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token :: FAILURE , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token :: CRITICAL NEWLINE SPACE SPACE SPACE SPACE ] , NEWLINE SPACE SPACE SPACE SPACE PreventMultiStatus :: WORKING SPACE = > SPACE [ Kuroko2 :: Token :: WORKING ] , NEWLINE SPACE SPACE SPACE SPACE PreventMultiStatus :: ERROR SPACE = > SPACE [ Kuroko2 :: Token :: FAILURE , SPACE Kuroko2 :: Token :: CRITICAL ] , NEWLINE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE self . locking_column SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE paginates_per SPACE LITERALNEWLINE NEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE - > SPACE { SPACE active SPACE } , SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE - > SPACE { SPACE order ( LITERAL) . reverse_order SPACE } NEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE has_many SPACE LITERALNEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE has_one SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE before_destroy SPACE LITERALNEWLINE SPACE SPACE after_initialize SPACE LITERALNEWLINE SPACE SPACE after_save SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE { SPACE order ( LITERAL) SPACE } NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > ( tags ) SPACE { NEWLINE SPACE SPACE SPACE SPACE where ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE id : SPACE Kuroko2 :: JobDefinitionTag . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE where ( LITERAL: SPACE Kuroko2 :: Tag . where ( name : SPACE tags ) . pluck ( LITERAL) ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE group ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE having ( LITERAL, SPACE tags . size ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE pluck ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE } NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > ( query ) SPACE { NEWLINE SPACE SPACE SPACE SPACE column SPACE = SPACE arel_table NEWLINE SPACE SPACE SPACE SPACE or_query SPACE = SPACE column [ LITERAL] . matches ( LITERALLITERALLITERALquery LITERALLITERALLITERAL) . or ( column [ LITERAL] . matches ( LITERALLITERALLITERALquery LITERALLITERALLITERAL) ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE search_by_tag_definition_ids SPACE = SPACE Kuroko2 :: JobDefinitionTag . joins ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE where ( LITERALLITERALKuroko2 :: Tag . table_name LITERALLITERALLITERAL, SPACE LITERALLITERALLITERALquery LITERALLITERALLITERAL) . distinct . pluck ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE search_by_tag_definition_ids . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE or_query SPACE = SPACE or_query . or ( column [ LITERAL] . in ( search_by_tag_definition_ids ) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE where ( or_query ) NEWLINE SPACE SPACE } NEWLINE NEWLINE NEWLINE SPACE SPACE validates SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE LITERALSPACE } , SPACE LITERAL: SPACE true NEWLINE SPACE SPACE validates SPACE LITERAL, SPACE LITERAL: SPACE true NEWLINE SPACE SPACE validates SPACE LITERAL, SPACE LITERAL: SPACE true NEWLINE SPACE SPACE validate SPACE LITERALNEWLINE SPACE SPACE validate SPACE LITERALNEWLINE SPACE SPACE validates SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE LITERALSPACE } NEWLINE SPACE SPACE validates SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE LITERALSPACE } , SPACE format : SPACE { NEWLINE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERAL, SPACE LITERAL: SPACE true , NEWLINE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE } NEWLINE SPACE SPACE validates SPACE LITERAL, SPACE format : SPACE { SPACE LITERAL: SPACE LITERALLITERALLITERALLITERALURI :: regexp ( LITERALLITERALLITERAL) LITERALLITERALLITERALLITERAL, SPACE LITERAL: SPACE true SPACE } NEWLINE NEWLINE SPACE SPACE def SPACE proceed_multi_instance? NEWLINE SPACE SPACE SPACE SPACE tokens SPACE = SPACE Kuroko2 :: Token . where ( LITERAL: SPACE self . id ) NEWLINE SPACE SPACE SPACE SPACE ( tokens . map ( & LITERAL) SPACE & SPACE PREVENT_TOKEN_STATUSES [ self . prevent_multi ] ) . empty? NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE text_tags NEWLINE SPACE SPACE SPACE SPACE tags . pluck ( LITERAL) . join ( LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE text_tags = ( text_tags ) NEWLINE SPACE SPACE SPACE SPACE self . tags SPACE = SPACE text_tags . gsub ( LITERALLITERALLITERAL, SPACE LITERAL) . split ( LITERALLITERALLITERAL) . uniq . map SPACE do SPACE | name | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Tag . find_or_create_by ( name : SPACE name ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE create_instance ( LITERAL: SPACE nil , SPACE LITERAL: , SPACE LITERAL: SPACE nil SPACE ) NEWLINE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALlaunched_by LITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE token . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALmessage LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE job_instances . create! ( LITERAL: SPACE script , SPACE LITERAL: SPACE message ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE confirm_active_instances NEWLINE SPACE SPACE SPACE SPACE if SPACE Kuroko2 :: Token . joins ( LITERAL) . merge ( job_instances ) . exists? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE errors . add ( LITERAL, SPACE I18n . t ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE throw SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE set_default_values NEWLINE SPACE SPACE SPACE SPACE self . description SPACE || = SPACE <<- LITERALLITERALLITERAL. strip_heredoc NEWLINE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE create_default_memory_expectancy NEWLINE SPACE SPACE SPACE SPACE create_memory_expectancy! SPACE unless SPACE memory_expectancy NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE script_syntax NEWLINE SPACE SPACE SPACE SPACE Kuroko2 :: Workflow :: ScriptParser . new ( script ) . parse NEWLINE NEWLINE SPACE SPACE SPACE SPACE true NEWLINE SPACE SPACE rescue SPACE Kuroko2 :: Workflow :: SyntaxError SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE errors . add ( LITERAL, SPACE I18n . t ( LITERAL, SPACE LITERAL: SPACE e . message ) ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE false NEWLINE SPACE SPACE rescue SPACE Kuroko2 :: Workflow :: AssertionError SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE errors . add ( LITERAL, SPACE I18n . t ( LITERAL, SPACE LITERAL: SPACE e . message ) ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE false NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE validate_number_of_admins NEWLINE SPACE SPACE SPACE SPACE if SPACE self . admins . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE errors . add ( LITERAL, SPACE I18n . t ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: JobDefinitionTag SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE end NEWLINE 
class SPACE Kuroko2 :: JobInstance SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE NEWLINE SPACE SPACE attr_accessor SPACE LITERALNEWLINE NEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE LITERAL: SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE def SPACE info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE add ( LITERAL, SPACE message ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE warn ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE add ( LITERAL, SPACE message ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE error ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE add ( LITERAL, SPACE message ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE private NEWLINE SPACE SPACE SPACE SPACE def SPACE add ( level , SPACE message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE self . create ( LITERAL: SPACE level , SPACE LITERAL: SPACE message ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE has_one SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE before_create SPACE LITERALNEWLINE SPACE SPACE after_create SPACE LITERALNEWLINE SPACE SPACE after_create SPACE LITERALNEWLINE NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE { SPACE where ( LITERAL: SPACE nil , SPACE LITERAL: SPACE nil ) SPACE } NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE { SPACE where . not ( LITERAL: SPACE nil ) SPACE } NEWLINE NEWLINE SPACE SPACE def SPACE error? NEWLINE SPACE SPACE SPACE SPACE working? SPACE && SPACE error_at? NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE working? NEWLINE SPACE SPACE SPACE SPACE ! finished_at? SPACE && SPACE ! canceled_at? NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE cancelable? NEWLINE SPACE SPACE SPACE SPACE tokens . first . try ( LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE cancel ( LITERAL: ) NEWLINE SPACE SPACE SPACE SPACE self . tokens . destroy ( * self . tokens ) NEWLINE SPACE SPACE SPACE SPACE self . executions . destroy ( * self . executions ) NEWLINE SPACE SPACE SPACE SPACE self . touch ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALby LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE self . logs . warn ( message ) NEWLINE SPACE SPACE SPACE SPACE Kuroko2 . logger . warn ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE Kuroko2 :: Workflow :: Notifier . notify ( LITERAL, SPACE self ) SPACE if SPACE job_definition . hipchat_notify_finished? NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE def SPACE log_memory_consumption ( value ) NEWLINE SPACE SPACE SPACE SPACE if SPACE memory_consumption_log NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE max SPACE = SPACE [ value , SPACE memory_consumption_log . value ] . max NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE memory_consumption_log . update ( LITERAL: SPACE max ) NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create_memory_consumption_log ( LITERAL: SPACE value ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE execution_minutes NEWLINE SPACE SPACE SPACE SPACE ( ( ( error_at SPACE || SPACE canceled_at SPACE || SPACE finished_at SPACE || SPACE Time . current ) SPACE - SPACE created_at ) . to_f SPACE / SPACE LITERAL) . round ( LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE status NEWLINE SPACE SPACE SPACE SPACE if SPACE finished_at? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE elsif SPACE canceled_at? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE elsif SPACE error_at? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE copy_script NEWLINE SPACE SPACE SPACE SPACE self . script SPACE = SPACE job_definition . try ( LITERAL) SPACE if SPACE self . script . blank? NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE notify_launch NEWLINE SPACE SPACE SPACE SPACE if SPACE log_message NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( log_message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE self . logs . info ( log_message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Workflow :: Notifier . notify ( LITERAL, SPACE self ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE generate_token NEWLINE SPACE SPACE SPACE SPACE unless SPACE self . job_definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE job_definition . proceed_multi_instance? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE self . tokens SPACE << SPACE Kuroko2 :: Token . new SPACE do SPACE | token | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE definition SPACE = SPACE self . job_definition NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_definition SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_definition_version SPACE = SPACE definition . version NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . script SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE self . script NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE Time . current , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE definition . id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE definition . name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE self . touch ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE self . logs . warn ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . warn ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Workflow :: Notifier . notify ( LITERAL, SPACE self ) SPACE if SPACE job_definition . notify_cancellation NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: JobSchedule SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE belongs_tovalidates SPACE LITERAL, SPACE format : SPACE { SPACE LITERAL: SPACE CRON_FORMAT SPACE } , SPACE LITERAL: SPACE { SPACE LITERAL: SPACE LITERALSPACE } NEWLINE SPACE SPACE validate SPACE LITERALNEWLINE NEWLINE SPACE SPACE def SPACE next ( now SPACE = SPACE Time . current ) NEWLINE SPACE SPACE SPACE SPACE if SPACE LITERAL. month . ago ( now ) . future? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . warn ( LITERALLITERALLITERALnow LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE return NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE next_time SPACE = SPACE Chrono :: Iterator . new ( self . cron , SPACE LITERAL: SPACE now ) . next NEWLINE SPACE SPACE SPACE SPACE suspend_times SPACE = SPACE suspend_times ( now , SPACE next_time ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE if SPACE suspend_times . include? ( next_time ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE self . next ( next_time ) NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE next_time NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE scheduled_times ( time_from , SPACE time_to ) NEWLINE SPACE SPACE SPACE SPACE it SPACE = SPACE Chrono :: Iterator . new ( cron , SPACE LITERAL: SPACE time_from ) NEWLINE SPACE SPACE SPACE SPACE scheduled_times SPACE = SPACE [ ] NEWLINE NEWLINE SPACE SPACE SPACE SPACE loop SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE next_time SPACE = SPACE it . next NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE next_time SPACE < = SPACE time_to NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE scheduled_times SPACE << SPACE next_time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE break NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE scheduled_times . map ( & LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE suspend_times ( time_from , SPACE time_to ) NEWLINE SPACE SPACE SPACE SPACE if SPACE job_definition SPACE && SPACE job_definition . job_suspend_schedules . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE job_definition . job_suspend_schedules . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE map SPACE { SPACE | schedule | SPACE schedule . suspend_times ( time_from , SPACE time_to ) SPACE } . flatten . uniq NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE [ ] NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE validate_cron_schedule NEWLINE SPACE SPACE SPACE SPACE if SPACE CRON_FORMAT SPACE === SPACE cron NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE self . next NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE rescue SPACE Chrono :: Fields :: Base :: InvalidField SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE errors . add ( LITERAL, SPACE LITERALLITERALLITERALe . message LITERALLITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE self . launch_scheduled_jobs! ( time_from , SPACE time_to ) NEWLINE SPACE SPACE SPACE SPACE includes ( LITERAL: SPACE LITERAL) . find_each SPACE do SPACE | schedule | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE definition SPACE = SPACE schedule . job_definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE suspend_times SPACE = SPACE schedule . suspend_times ( time_from , SPACE time_to ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE schedule . scheduled_times ( time_from , SPACE time_to ) . each SPACE do SPACE | time | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE definition . suspended? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( LITERALLITERALLITERALLITERALLITERALdefinition . id LITERALLITERALLITERALdefinition . name LITERALLITERALLITERALLITERALI18n . l ( time , SPACE format : SPACE LITERAL) LITERALLITERALLITERALschedule . cron LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE suspend_times . include? ( time ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( LITERALLITERALLITERALLITERALLITERALdefinition . id LITERALLITERALLITERALdefinition . name LITERALLITERALLITERALLITERALI18n . l ( time , SPACE format : SPACE LITERAL) LITERALLITERALLITERALschedule . cron LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE launched_by SPACE = SPACE LITERALLITERALLITERALLITERALdefinition . id LITERALLITERALLITERALdefinition . name LITERALLITERALLITERALLITERALI18n . l ( time , SPACE format : SPACE LITERAL) LITERALLITERALLITERALschedule . cron LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE definition . create_instance ( LITERAL: SPACE launched_by ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: JobSuspendSchedule SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE NEWLINE SPACE SPACE validates SPACE LITERAL, SPACE format : SPACE { SPACE LITERAL: SPACE Kuroko2 :: JobSchedule :: CRON_FORMAT SPACE } , SPACE LITERAL: SPACE { SPACE LITERAL: SPACE LITERALSPACE } NEWLINE SPACE SPACE validate SPACE LITERALNEWLINE NEWLINE SPACE SPACE def SPACE suspend_times ( time_from , SPACE time_to ) NEWLINE SPACE SPACE SPACE SPACE it SPACE = SPACE Chrono :: Iterator . new ( cron , SPACE LITERAL: SPACE time_from SPACE - SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE suspend_times SPACE = SPACE [ ] NEWLINE NEWLINE SPACE SPACE SPACE SPACE loop SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE next_time SPACE = SPACE it . next NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE next_time SPACE < = SPACE time_to NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE suspend_times SPACE << SPACE next_time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE break NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE suspend_times . map ( & LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE validate_cron_schedule NEWLINE SPACE SPACE SPACE SPACE if SPACE Kuroko2 :: JobSchedule :: CRON_FORMAT SPACE === SPACE cron NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Chrono :: Iterator . new ( self . cron ) . next NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE rescue SPACE Chrono :: Fields :: Base :: InvalidField SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE errors . add ( LITERAL, SPACE LITERALLITERALLITERALe . message LITERALLITERAL) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: Log SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE end NEWLINE 
class SPACE Kuroko2 :: MemoryConsumptionLog SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE NEWLINE SPACE SPACE validates SPACE LITERAL, SPACE LITERAL: SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE class SPACE Interval NEWLINE SPACE SPACE SPACE SPACE INITIAL_INTERVAL_PERIOD SPACE = SPACE LITERAL. second . to_i NEWLINE SPACE SPACE SPACE SPACE MAX_INTERVAL_PERIOD SPACE = SPACE LITERAL. minutes . to_i NEWLINE SPACE SPACE SPACE SPACE INCREMENT SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE attr_reader SPACE LITERAL, SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE initialize ( base_time , SPACE count SPACE = SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @base_time SPACE = SPACE base_time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @count SPACE = SPACE [ count , SPACE LITERAL] . min NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE reached? ( now ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ( now SPACE - SPACE @base_time ) SPACE > SPACE current_length NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE next NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE self . class . new ( Time . at ( @base_time . to_i SPACE + SPACE current_length ) , SPACE @count . succ ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE current_length NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE [ [ @count SPACE ** SPACE INCREMENT , SPACE INITIAL_INTERVAL_PERIOD ] . max , SPACE MAX_INTERVAL_PERIOD ] . min NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: MemoryExpectancy SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE DEFAULT_VALUE SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE NEWLINE SPACE SPACE validates SPACE LITERAL, SPACE LITERAL: SPACE true NEWLINE NEWLINE SPACE SPACE def SPACE memory_consumption_logs NEWLINE SPACE SPACE SPACE SPACE Kuroko2 :: MemoryConsumptionLog . joins ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE merge ( Kuroko2 :: JobInstance . where ( LITERAL: SPACE job_definition_id ) ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE def SPACE calculate! NEWLINE SPACE SPACE SPACE SPACE if SPACE calculated_value SPACE = SPACE memory_consumption_logs . maximum ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE update! ( LITERAL: SPACE calculated_value ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: ProcessSignal SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE { SPACE where ( LITERAL: SPACE nil ) SPACE } NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > ( hostname ) SPACE { SPACE where ( LITERAL: SPACE hostname ) SPACE } NEWLINE NEWLINE SPACE SPACE def SPACE self . poll ( hostname ) NEWLINE SPACE SPACE SPACE SPACE self . transaction SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE unstarted . on ( hostname ) . lock . take . tap SPACE do SPACE | signal | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE signal . touch ( LITERAL) SPACE if SPACE signal NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: Star SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE end NEWLINE 
class SPACE Kuroko2 :: Tag SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE has_many SPACE LITERALNEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE validates SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE LITERALSPACE } NEWLINE end NEWLINE 
class SPACE Kuroko2 :: Tick SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE def SPACE self . fetch_then_update ( now ) NEWLINE SPACE SPACE SPACE SPACE tick SPACE = SPACE self . first_or_create NEWLINE SPACE SPACE SPACE SPACE last SPACE = SPACE tick . at SPACE || SPACE now NEWLINE NEWLINE SPACE SPACE SPACE SPACE tick . update_column ( LITERAL, SPACE now ) NEWLINE SPACE SPACE SPACE SPACE last NEWLINE SPACE SPACE end NEWLINE NEWLINE end NEWLINE 
class SPACE Kuroko2 :: Token SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE WORKING SPACE SPACE = SPACE LITERALNEWLINE SPACE SPACE FINISHED SPACE = SPACE LITERALNEWLINE SPACE SPACE FAILURE SPACE SPACE = SPACE LITERALNEWLINE SPACE SPACE WAITING SPACE SPACE = SPACE LITERALNEWLINE SPACE SPACE CRITICAL SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE STATUSES SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE WORKING SPACE SPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE FINISHED SPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE FAILURE SPACE SPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE CRITICAL SPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE WAITING SPACE SPACE = > SPACE LITERAL, NEWLINE SPACE SPACE } . freeze NEWLINE NEWLINE SPACE SPACE serialize SPACE LITERAL, SPACE JSON NEWLINE NEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE SPACE SPACE belongs_to SPACE LITERALNEWLINE NEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE belongs_to SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE true NEWLINE NEWLINE SPACE SPACE has_one SPACE LITERALNEWLINE NEWLINE SPACE SPACE before_create SPACE LITERALNEWLINE NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE { SPACE where ( LITERAL: SPACE [ WORKING , SPACE WAITING ] ) } NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE { SPACE where ( LITERAL: SPACE WORKING ) SPACE } NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE { SPACE where ( LITERAL: SPACE FINISHED ) SPACE } NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE { SPACE where ( LITERAL: SPACE WAITING ) SPACE } NEWLINE NEWLINE SPACE SPACE def SPACE working? NEWLINE SPACE SPACE SPACE SPACE status SPACE == SPACE WORKING NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE failure? NEWLINE SPACE SPACE SPACE SPACE status SPACE == SPACE FAILURE NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE finished? NEWLINE SPACE SPACE SPACE SPACE status SPACE == SPACE FINISHED NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE critical? NEWLINE SPACE SPACE SPACE SPACE status SPACE == SPACE CRITICAL NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE waiting? NEWLINE SPACE SPACE SPACE SPACE status SPACE == SPACE WAITING NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE mark_as_failure NEWLINE SPACE SPACE SPACE SPACE self . status SPACE = SPACE FAILURE NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE mark_as_critical ( error ) NEWLINE SPACE SPACE SPACE SPACE self . status SPACE SPACE = SPACE CRITICAL NEWLINE SPACE SPACE SPACE SPACE self . message SPACE = SPACE error . message NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE mark_as_finished NEWLINE SPACE SPACE SPACE SPACE self . status SPACE = SPACE FINISHED NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE mark_as_working NEWLINE SPACE SPACE SPACE SPACE self . status SPACE = SPACE WORKING NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE mark_as_waiting NEWLINE SPACE SPACE SPACE SPACE self . status SPACE = SPACE WAITING NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE status_name NEWLINE SPACE SPACE SPACE SPACE STATUSES [ status ] . to_s NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE cancelable? NEWLINE SPACE SPACE SPACE SPACE case SPACE status NEWLINE SPACE SPACE SPACE SPACE when SPACE WORKING , SPACE WAITING NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE children . many? SPACE && SPACE children . all? SPACE do SPACE | child | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE child . status SPACE == SPACE FINISHED SPACE || SPACE child . cancelable? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE when SPACE FAILURE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE true NEWLINE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE false NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE skippable? NEWLINE SPACE SPACE SPACE SPACE failure? SPACE || SPACE waiting? NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE retryable? NEWLINE SPACE SPACE SPACE SPACE failure? NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE set_default_values NEWLINE SPACE SPACE SPACE SPACE self . uuid SPACE SPACE SPACE SPACE || = SPACE SecureRandom . uuid NEWLINE SPACE SPACE SPACE SPACE self . message SPACE || = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE self . context SPACE || = SPACE { } NEWLINE SPACE SPACE SPACE SPACE self . status SPACE SPACE || = SPACE WORKING NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: User SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE GRAVATAR_URL SPACE = SPACE LITERALNEWLINE SPACE SPACE GOOGLE_OAUTH2_PROVIDER SPACE = SPACE LITERALNEWLINE SPACE SPACE GROUP_PROVIDER SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE paginates_per SPACE LITERALNEWLINE NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE { SPACE where ( LITERAL: SPACE nil ) SPACE } NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE ( ids ) SPACE { SPACE where ( id : SPACE ids ) SPACE } NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE { SPACE where ( LITERAL: SPACE GROUP_PROVIDER ) SPACE } NEWLINE NEWLINE SPACE SPACE has_many SPACE LITERALNEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE has_many SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE validates SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE false } SPACE , SPACE LITERAL: SPACE true NEWLINE SPACE SPACE validates SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE false } , SPACE LITERAL: SPACE true NEWLINE NEWLINE SPACE SPACE before_create SPACE LITERALNEWLINE NEWLINE SPACE SPACE def SPACE self . find_or_create_user ( uid , SPACE attributes ) NEWLINE SPACE SPACE SPACE SPACE find_or_create_by ( LITERAL: SPACE uid ) SPACE do SPACE | user | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE user . name SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE attributes [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE user . email SPACE SPACE SPACE SPACE SPACE SPACE = SPACE attributes [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE user . first_name SPACE = SPACE attributes [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE user . last_name SPACE SPACE = SPACE attributes [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE google_account? NEWLINE SPACE SPACE SPACE SPACE self . provider SPACE == SPACE GOOGLE_OAUTH2_PROVIDER NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE set_gravatar_image NEWLINE SPACE SPACE SPACE SPACE self . image SPACE = SPACE gravatar_url ( self . email ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE gravatar_url ( email ) NEWLINE SPACE SPACE SPACE SPACE GRAVATAR_URL SPACE % SPACE Digest :: MD5 :: hexdigest ( email . strip . downcase ) NEWLINE SPACE SPACE end NEWLINE NEWLINE end NEWLINE 
class SPACE Kuroko2 :: Worker SPACE < SPACE Kuroko2 :: ApplicationRecord NEWLINE SPACE SPACE include SPACE Kuroko2 :: TableNameCustomizable NEWLINE NEWLINE SPACE SPACE belongs_to SPACE LITERAL, SPACE LITERAL: SPACE true NEWLINE NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE ( hostname ) SPACE { SPACE where ( LITERAL: SPACE hostname ) SPACE } NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE - > SPACE { SPACE order ( LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE def SPACE self . executing ( id ) NEWLINE SPACE SPACE SPACE SPACE where ( LITERAL: SPACE id ) . take NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: Api :: ApplicationResource NEWLINE SPACE SPACE include SPACE Garage :: Representer NEWLINE SPACE SPACE include SPACE Garage :: Authorizable NEWLINE NEWLINE SPACE SPACE attr_reader SPACE LITERALNEWLINE NEWLINE SPACE SPACE def SPACE initialize ( model SPACE = SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE @model SPACE = SPACE model NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE Kuroko2 :: Api :: JobInstanceResource SPACE < SPACE Kuroko2 :: Api :: ApplicationResource NEWLINE SPACE SPACE property SPACE LITERALNEWLINE NEWLINE SPACE SPACE property SPACE LITERALNEWLINE NEWLINE SPACE SPACE delegate SPACE LITERAL, SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE end NEWLINE 
old_instances SPACE = SPACE Kuroko2 :: JobInstance . where ( LITERAL, SPACE LITERAL. months . ago ) NEWLINE NEWLINE count SPACE = SPACE old_instances . count NEWLINE NEWLINE Kuroko2 :: JobInstance . transaction SPACE do NEWLINE SPACE SPACE old_instances . destroy_all NEWLINE end NEWLINE NEWLINE puts SPACE LITERALLITERALLITERALcount LITERALLITERALLITERALNEWLINE 
Kuroko2 :: JobInstance . working . where ( LITERAL, SPACE LITERAL. days . ago ) . each SPACE do SPACE | instance | NEWLINE SPACE SPACE Kuroko2 :: Notifications . remind_failure ( instance ) . deliver_now NEWLINE NEWLINE SPACE SPACE puts SPACE LITERALLITERALLITERALinstance . job_definition . admins . map ( & LITERAL) . join ( LITERAL) LITERALLITERALLITERALNEWLINE end NEWLINE 
Kuroko2 :: Engine . routes . draw SPACE do NEWLINE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE delete SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE { SPACE format : SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE { SPACE format : SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE SPACE SPACE resources SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE % i ( index ) NEWLINE NEWLINE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE { SPACE format : SPACE LITERALSPACE } NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE delete SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE lambda SPACE { SPACE | _env | SPACE [ LITERAL, SPACE { } , SPACE LITERAL] SPACE } NEWLINE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE root SPACE LITERALNEWLINE SPACE SPACE get SPACE LITERALSPACE = > SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE scope SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE [ ] SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE resources SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE [ LITERAL, SPACE LITERAL] NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE namespace SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
URI . parse ( Kuroko2 . config . url ) . tap SPACE do SPACE | url | NEWLINE SPACE SPACE Kuroko2 . config . url_host SPACE SPACE SPACE = SPACE url . host NEWLINE SPACE SPACE Kuroko2 . config . url_scheme SPACE = SPACE url . scheme NEWLINE SPACE SPACE Kuroko2 . config . url_port SPACE SPACE SPACE = SPACE url . port NEWLINE end NEWLINE NEWLINE Rails . application . config . action_mailer . default_url_options SPACE = SPACE { NEWLINE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . url_host , NEWLINE SPACE SPACE LITERAL: SPACE Kuroko2 . config . url_scheme , NEWLINE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . url_port NEWLINE } NEWLINE NEWLINE Rails . application . config . action_mailer . delivery_method SPACE = NEWLINE SPACE SPACE Kuroko2 . config . action_mailer . delivery_method . to_sym NEWLINE Rails . application . config . action_mailer . smtp_settings SPACE = NEWLINE SPACE SPACE Kuroko2 . config . action_mailer . smtp_settings . to_h . symbolize_keys SPACE || SPACE { } NEWLINE 
NEWLINE NEWLINE NEWLINE Rails . application . config . assets . version SPACE = SPACE LITERALNEWLINE NEWLINE NEWLINE NEWLINE NEWLINE Rails . application . config . assets . precompile SPACE += SPACE LITERALLITERALLITERALNEWLINE 
Garage . configure SPACE { } NEWLINE Garage . configuration . strategy SPACE = SPACE Garage :: Strategy :: NoAuthentication NEWLINE 
Kaminari . configure SPACE do SPACE | config | NEWLINE SPACE SPACE config . default_per_page SPACE = SPACE LITERALNEWLINE end NEWLINE 
SPACE require SPACE LITERALNEWLINE Rails . application . config . middleware . use SPACE OmniAuth :: Builder SPACE do NEWLINE SPACE SPACE config SPACE = SPACE Kuroko2 . config . app_authentication . google_oauth2 NEWLINE SPACE SPACE provider SPACE LITERAL, SPACE config . client_id , SPACE config . client_secret , SPACE config . options . to_h . symbolize_keys NEWLINE end NEWLINE 
class SPACE CreateJobDefinitions SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . boolean SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false , SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . boolean SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE true , SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . boolean SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE true , SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . boolean SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false , SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateJobInstances SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL] , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateJobSchedules SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateTicks SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateLogs SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALSPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateTokens SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateExecutions SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateProcessSignals SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateUsers SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateAdminAssignments SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateStars SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateWorkers SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . boolean SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false , SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateJobDefinitionTags SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateTags SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL] , SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateMemoryExpectancies SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE LITERAL, SPACE LITERAL: SPACE false , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . references SPACE LITERAL, SPACE LITERAL: SPACE true NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . timestamps SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . references SPACE LITERAL, SPACE LITERAL: SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . timestamps SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE CreateJobSuspendSchedules SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE create_table SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE add_index SPACE LITERALLITERALLITERAL, SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE AddWebhookUrlToJobDefinitions SPACE < SPACE ActiveRecord :: Migration NEWLINE SPACE SPACE def SPACE change NEWLINE SPACE SPACE SPACE SPACE add_column SPACE LITERAL, SPACE LITERAL, SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE require SPACE LITERALLITERALLITERALNEWLINE require SPACE LITERALLITERALLITERALNEWLINE NEWLINE module SPACE Kuroko2 NEWLINE SPACE SPACE class SPACE << SPACE self NEWLINE SPACE SPACE SPACE SPACE def SPACE logger NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @logger SPACE || = SPACE defined? ( Rails ) SPACE && SPACE Rails . env . test? SPACE ? SPACE Rails . logger SPACE : SPACE Kuroko2 :: Util :: Logger . new ( $stdout ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE logger = ( logger ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @logger SPACE = SPACE logger NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE config NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Configuration . config NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE ExecutionLogger NEWLINE SPACE SPACE SPACE SPACE class SPACE NotFound SPACE < SPACE StandardError NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE self . get_logger ( option SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE config SPACE = SPACE Kuroko2 . config . execution_logger NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE config . present? SPACE && SPACE config . type . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE logger_class SPACE = SPACE const_get ( config . type , SPACE false ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE config . option . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE logger_class . new ( config . option . to_h . merge ( option ) . symbolize_keys ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE logger_class . new ( option ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Void . new ( option ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE MemorySampler NEWLINE SPACE SPACE SPACE SPACE extend SPACE self NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE get_by_pgid ( pgid ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE platform NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE get_by_pgid_linux ( pgid ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE get_by_pgid_osx ( pgid ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE LITERALLITERALLITERALplatform LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE rescue SPACE SystemCallError NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE def SPACE get_by_pgid_linux ( pgid ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE output , SPACE _ , SPACE status SPACE = SPACE Open3 . capture3 ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE status . success? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE targets SPACE = SPACE output . split ( LITERALLITERALLITERAL) . select SPACE { | line | SPACE line . split ( LITERAL) . first SPACE == SPACE pgid . to_s SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE calculate_sum ( targets . map SPACE { | line | SPACE line . split ( LITERAL) [ LITERAL] SPACE } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE get_by_pgid_osx ( pgid ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE output , SPACE _ , SPACE status SPACE = SPACE Open3 . capture3 ( LITERAL, SPACE LITERALSPACE LITERAL, SPACE LITERAL, SPACE pgid . to_s ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE status . success? SPACE ? SPACE calculate_sum ( output . split ( LITERALLITERALLITERAL) ) SPACE : SPACE nil NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE calculate_sum ( rss_lines ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE rss_lines . reject ( & LITERAL) . map SPACE { | s | SPACE s . scan ( LITERALLITERALLITERALLITERAL) . first SPACE } . map ( & LITERAL) . reduce ( & LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE platform NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE RUBY_PLATFORM . downcase NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE ReturnToValidator NEWLINE SPACE SPACE SPACE SPACE def SPACE self . valid? ( return_to ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE return_to . nil? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE uri SPACE = SPACE Addressable :: URI . parse ( return_to ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ! uri . nil? SPACE && SPACE uri . host . nil? SPACE && SPACE uri . scheme . nil? SPACE && SPACE uri . path . start_with? ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE rescue SPACE Addressable :: URI :: InvalidURIError NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE false NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Command NEWLINE SPACE SPACE SPACE SPACE module SPACE Executor NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE DEFAULT_NUM_WORKERS SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NUM_SYSTEM_WORKERS SPACE = SPACE LITERALSPACE SPACE SPACE NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . num_workers NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @num_workers SPACE || = SPACE ( ENV [ LITERAL] SPACE || SPACE DEFAULT_NUM_WORKERS ) . to_i SPACE + SPACE NUM_SYSTEM_WORKERS NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @stop SPACE = SPACE ServerEngine :: BlockingFlag . new NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @hostname SPACE = SPACE ENV [ LITERAL] SPACE || SPACE Socket . gethostname NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @queue SPACE SPACE SPACE SPACE = SPACE ENV [ LITERAL] SPACE || SPACE Execution :: DEFAULT_QUEUE NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @command SPACE = SPACE if SPACE worker_id SPACE == SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Command :: Kill . new ( @hostname , SPACE worker_id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE worker_id SPACE == SPACE ( Command :: Executor . num_workers SPACE - SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Command :: Monitor . new ( LITERAL: SPACE @hostname , SPACE LITERAL: SPACE worker_id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @worker SPACE = SPACE Worker . where ( LITERAL: SPACE @hostname , SPACE LITERAL: SPACE worker_id , SPACE LITERAL: SPACE @queue ) . first_or_create! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Command :: Shell . new ( LITERAL: SPACE @hostname , SPACE LITERAL: SPACE worker_id , SPACE LITERAL: SPACE @worker , SPACE LITERAL: SPACE @queue ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE run NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger SPACE = SPACE logger NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info SPACE LITERALLITERALLITERAL@hostname LITERALLITERALLITERALworker_id LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE toggle_worker_status ( true ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE sleep SPACE worker_id NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE until SPACE @stop . wait ( LITERALSPACE + SPACE rand ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @command . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE Exception SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . fatal ( LITERALLITERALLITERAL@hostname LITERALLITERALLITERALworker_id LITERALLITERALLITERALe . class LITERALLITERALLITERALe . message LITERALLITERALLITERALSPACE + NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE e . backtrace . map SPACE { SPACE | trace | SPACE LITERALLITERALLITERALtrace LITERALLITERALSPACE } . join ( LITERALLITERALLITERAL) ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE stop NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info SPACE LITERALLITERALLITERAL@hostname LITERALLITERALLITERALworker_id LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE toggle_worker_status ( false ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @stop . set! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE toggle_worker_status ( status ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE false SPACE unless SPACE @command . kind_of? ( Command :: Shell ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @worker . working SPACE = SPACE status NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @worker . save NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Command NEWLINE SPACE SPACE SPACE SPACE class SPACE Kill NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( host , SPACE process SPACE = SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @hostname SPACE = SPACE host NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @process SPACE SPACE = SPACE process NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( signal SPACE = SPACE ProcessSignal . poll ( @hostname ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( LITERALLITERALLITERAL@hostname LITERALLITERALLITERAL@process LITERALLITERALLITERALSignal . signame ( signal . number ) LITERALLITERALLITERALsignal . pid LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Process . kill ( signal . number , SPACE signal . pid ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE signal . destroy! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE signal NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE SystemCallError SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE signal . update_column ( LITERAL, SPACE LITERALLITERALLITERAL@hostname LITERALLITERALLITERAL@process LITERALLITERALLITERALe . class LITERALLITERALLITERALe . message LITERALLITERAL) SPACE rescue SPACE nil NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . error ( LITERALLITERALLITERAL@hostname LITERALLITERALLITERAL@process LITERALLITERALLITERALe . class LITERALLITERALLITERALe . message LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Command NEWLINE SPACE SPACE SPACE SPACE class SPACE Monitor NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NUM_FAILURES SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( LITERAL: , SPACE LITERAL: ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @hostname SPACE SPACE = SPACE hostname NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @worker_id SPACE = SPACE worker_id NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @counter SPACE SPACE SPACE = SPACE Hash . new ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @intervals SPACE = SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution_ids SPACE = SPACE Worker . on ( @hostname ) . pluck ( LITERAL) . compact NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE executions SPACE = SPACE Execution . where ( id : SPACE execution_ids , SPACE LITERAL: SPACE nil ) . started NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE executions . each SPACE do SPACE | execution | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE execution . pid NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE check_process_absence ( execution ) SPACE && SPACE log_memory_consumption? ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE get_memory_consumption ( execution ) . try SPACE do SPACE | value | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . log_memory_consumption ( value ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE check_assignment_delay ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ( @counter . keys SPACE - SPACE executions . map ( & LITERAL) ) . each SPACE do SPACE | removable_id | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @counter . delete ( removable_id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE counter_size NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @counter . size NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE check_process_absence ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE process_num SPACE = SPACE Process . kill ( LITERAL, SPACE execution . pid ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @counter . delete ( execution . id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ! ! process_num NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE Errno :: EPERM NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE Errno :: ESRCH NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE Execution . exists? ( execution . id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @counter [ execution . id ] SPACE += SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALexecution . id LITERALLITERALLITERALexecution . pid LITERALLITERALLITERAL@counter [ execution . id ] LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info SPACE { SPACE message SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( @counter ) SPACE NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @counter [ execution . id ] SPACE > = SPACE NUM_FAILURES NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notify_process_absence ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @counter . delete ( execution . id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @intervals . delete ( execution . id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @counter . delete ( execution . id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @intervals . delete ( execution . id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE log_memory_consumption? ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @intervals [ execution . id ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @intervals [ execution . id ] . reached? ( Time . current ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @intervals [ execution . id ] SPACE = SPACE MemoryConsumptionLog :: Interval . new ( Time . current ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE get_memory_consumption ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE result SPACE = SPACE MemorySampler . get_by_pgid ( execution . pid ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE result NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @intervals [ execution . id ] SPACE = SPACE @intervals [ execution . id ] . next NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE result NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_process_absence ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALexecution . uuid LITERALLITERALLITERALexecution . pid LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info SPACE { SPACE message SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . job_instance . logs . warn ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Notifications . process_absence ( execution , SPACE @hostname ) . deliver_now NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . touch ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE check_assignment_delay ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE execution . started_at SPACE < SPACE LITERAL. minutes . ago NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALexecution . uuid LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info SPACE { SPACE message SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . job_instance . logs . warn ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Notifications . executor_not_assigned ( execution , SPACE @hostname ) . deliver_now NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . touch ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Command NEWLINE SPACE SPACE SPACE SPACE class SPACE Shell NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE MAX_OUTPUT_LENGTH SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE MAX_READ_LENGTH SPACE SPACE SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( LITERAL: , SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: , SPACE LITERAL: SPACE Execution :: DEFAULT_QUEUE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @hostname SPACE SPACE = SPACE hostname NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @worker_id SPACE = SPACE worker_id NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @worker SPACE SPACE SPACE SPACE = SPACE worker NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @queue SPACE SPACE SPACE SPACE SPACE = SPACE queue NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @worker . reload NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE @worker . execution_id? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( execution SPACE = SPACE Execution . poll ( @queue ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE do_execute ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE RuntimeError SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . error ( LITERALLITERALLITERAL@hostname LITERALLITERALLITERAL@worker_id LITERALLITERALLITERALe . message LITERALLITERALLITERALSPACE + NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE e . backtrace . map SPACE { SPACE | trace | SPACE LITERALLITERALLITERAL@hostname LITERALLITERALLITERAL@worker_id LITERALLITERALLITERALtrace LITERALLITERALSPACE } . join ( LITERALLITERALLITERAL) ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE do_execute ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @worker . update_column ( LITERAL, SPACE execution . id ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE invoke ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE SystemCallError SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERAL@hostname LITERALLITERALLITERAL@worker_id LITERALLITERALLITERALexecution . uuid LITERALLITERALLITERALexecution . shell LITERALLITERALLITERALe . class LITERALLITERALLITERALe . message LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . token . job_instance . logs . warn ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . warn ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE output SPACE = SPACE truncate_and_escape ( e . message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . finish ( LITERAL: SPACE output , SPACE LITERAL: SPACE e . errno ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ensure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @worker . update_column ( LITERAL, SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE invoke ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE command SPACE = SPACE execution . shell NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env SPACE SPACE SPACE SPACE SPACE = SPACE execution . context . fetch ( LITERAL, SPACE { } ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERAL@hostname LITERALLITERALLITERAL@worker_id LITERALLITERALLITERALexecution . uuid LITERALLITERALLITERALcommand LITERALLITERALLITERALenv LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . token . job_instance . logs . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE output , SPACE status SPACE = SPACE execute_shell ( command , SPACE env , SPACE execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE output SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE truncate_and_escape ( output ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE status . signaled? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERAL@hostname LITERALLITERALLITERAL@worker_id LITERALLITERALLITERALexecution . uuid LITERALLITERALLITERALcommand LITERALLITERALLITERALSignal . signame ( status . termsig ) LITERALLITERALLITERALstatus . pid LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . token . job_instance . logs . warn ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . warn ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . finish_by_signal ( LITERAL: SPACE output , SPACE LITERAL: SPACE status . termsig ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERAL@hostname LITERALLITERALLITERAL@worker_id LITERALLITERALLITERALexecution . uuid LITERALLITERALLITERALcommand LITERALLITERALLITERALstatus . exitstatus LITERALLITERALLITERALstatus . pid LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . token . job_instance . logs . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . finish ( LITERAL: SPACE output , SPACE LITERAL: SPACE status . exitstatus ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute_shell ( command , SPACE env , SPACE execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE opts SPACE = SPACE { SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE true SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE opts [ LITERAL] SPACE = SPACE real_path ( execution . context [ LITERAL] ) SPACE if SPACE execution . context [ LITERAL] NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE launched_time SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE execution . context [ LITERAL] . try ( LITERAL, SPACE LITERAL) . to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job_definition_id SPACE SPACE SPACE = SPACE execution . context [ LITERAL] . try ( LITERAL, SPACE LITERAL) . to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job_definition_name SPACE = SPACE execution . context [ LITERAL] . try ( LITERAL, SPACE LITERAL) . to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job_instance_id SPACE SPACE SPACE SPACE SPACE = SPACE execution . context [ LITERAL] . try ( LITERAL, SPACE LITERAL) . to_s NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env . reverse_mergelaunched_time , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE SPACE SPACE = > SPACE job_definition_id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE job_definition_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE SPACE SPACE SPACE SPACE = > SPACE job_instance_id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution_logger SPACE = SPACE ExecutionLogger . get_logger ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERALsprintf ( LITERALLITERALLITERAL, SPACE job_definition_id . to_i ) LITERALLITERALLITERALexecution . token . job_instance . id LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE temporally_path_with ( env [ LITERAL] ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Open3 . popen2e ( env , SPACE command , SPACE opts ) SPACE do SPACE | stdin , SPACE stdout_and_stderr , SPACE thread | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stdin . close NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE pid SPACE = SPACE thread . pid NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . update_attributes ( LITERAL: SPACE pid ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE reader SPACE = SPACE Thread . new SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE output SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stdout_and_stderr . each SPACE do SPACE | data | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE output SPACE << SPACE data NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution_logger . send_log ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE execution . uuid , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE pid , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE truncate_and_escape ( data . chomp ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . error ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL@hostname LITERALLITERALLITERAL@worker_id LITERALLITERALLITERALe . message LITERALLITERALLITERALLITERALSPACE + SPACE e . backtrace . join ( LITERALLITERALLITERALLITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE EOFError NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ensure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE output NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE status SPACE = SPACE thread . value SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE output SPACE = SPACE reader . value NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ output , SPACE status ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE real_path ( path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE path SPACE = SPACE Pathname . new ( path . sub ( LITERALLITERALLITERALLITERALLITERAL, SPACE LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Retryable . retryable ( LITERAL: SPACE LITERAL, SPACE sleep : SPACE LITERAL. LITERAL, SPACE LITERAL: SPACE [ Errno :: ENOENT ] ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE path . realpath NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE temporally_path_with ( path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE original_path SPACE = SPACE ENV [ LITERAL] NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ENV [ LITERAL] SPACE = SPACE path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE yield NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ensure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ENV [ LITERAL] SPACE = SPACE original_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE truncate_and_escape ( str ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE str . force_encoding ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE truncated SPACE = SPACE str . length SPACE > SPACE MAX_OUTPUT_LENGTH SPACE ? SPACE str [ LITERAL... MAX_OUTPUT_LENGTH ] SPACE : SPACE str NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE truncated . scrub . each_char . select { SPACE | c | SPACE c . bytes . count SPACE < SPACE LITERALSPACE } . join ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE class SPACE ExecutionLogger :: CloudWatchLogs NEWLINE SPACE SPACE SPACE SPACE MAX_RETRY_COUNT SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE RETRY_ERRORS SPACE = SPACE [ NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Aws :: CloudWatchLogs :: Errors :: InvalidSequenceTokenException , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Aws :: CloudWatchLogs :: Errors :: ThrottlingException , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Aws :: CloudWatchLogs :: Errors :: ResourceNotFoundException , NEWLINE SPACE SPACE SPACE SPACE ] NEWLINE NEWLINE SPACE SPACE SPACE SPACE attr_reader SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE initialize ( LITERAL: , SPACE LITERAL: , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @client SPACE = SPACE Aws :: CloudWatchLogs :: Client . new ( LITERAL: SPACE region ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @group_name SPACE SPACE SPACE SPACE = SPACE group_name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @stream_name SPACE SPACE SPACE = SPACE stream_name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @put_log_token SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @get_log_token SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE send_log ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE put_logs ( [ { SPACE LITERAL: SPACE timestamp_now , SPACE LITERAL: SPACE message . to_json SPACE } ] ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE put_logs ( events ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE exception_cb SPACE = SPACE lambda SPACE do SPACE | exception | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . warn ( LITERALLITERALexception . class LITERALLITERALLITERALexception . message LITERALLITERALLITERALevents LITERALLITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE exception NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE Aws :: CloudWatchLogs :: Errors :: InvalidSequenceTokenException NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE old_token SPACE = SPACE @put_log_token NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE new_token SPACE = SPACE exception . message . match ( LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERAL) [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE new_token NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @put_log_token SPACE = SPACE new_token NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . warn ( LITERALLITERALLITERALold_token LITERALLITERALLITERAL@put_log_token LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE Aws :: CloudWatchLogs :: Errors :: ResourceNotFoundException NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create_log_stream NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE Aws :: CloudWatchLogs :: Errors :: ThrottlingException NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE sleep ( LITERAL. LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE retry_options SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE exception_cb , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE RETRY_ERRORS , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE MAX_RETRY_COUNT , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE sleep : SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Retryable . retryable ( retry_options ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE client . put_log_events ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @group_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @stream_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE events , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @put_log_token , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @put_log_token SPACE = SPACE response . data [ LITERAL] NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . debug ( LITERALLITERALLITERAL@group_name LITERALLITERALLITERAL@stream_name LITERALLITERALLITERALresponse . data LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE get_logs ( token SPACE = SPACE @get_log_token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE client . get_log_events ( { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @group_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @stream_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE token , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE true , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE @get_log_token SPACE = SPACE response . next_forward_token NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE response NEWLINE SPACE SPACE SPACE SPACE rescue SPACE Aws :: CloudWatchLogs :: Errors :: ResourceNotFoundException NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE ExecutionLogger :: NotFound NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE timestamp_now NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ( Time . current . to_f SPACE * SPACE LITERAL) . to_i SPACE NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE create_log_stream NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( LITERALLITERALLITERAL@group_name LITERALLITERALLITERAL@stream_name LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE client . create_log_stream ( LITERAL: SPACE @group_name , SPACE LITERAL: SPACE @stream_name ) NEWLINE SPACE SPACE SPACE SPACE rescue SPACE Aws :: CloudWatchLogs :: Errors :: ResourceAlreadyExistsException NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE warn SPACE LITERALLITERALLITERAL@stream_name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE class SPACE ExecutionLogger :: Void NEWLINE SPACE SPACE SPACE SPACE def SPACE initialize ( option SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE send_log ( message ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE def SPACE get_logs ( token SPACE = SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE ExecutionLogger :: NotFound NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Servers NEWLINE SPACE SPACE SPACE SPACE class SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE Rails . env . development? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActionMailer :: Base . logger SPACE = SPACE Kuroko2 . logger NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @options SPACE = SPACE options NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE run NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ServerEngine . create ( nil , SPACE worker , SPACE default_options . merge ( @options ) ) . run NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE worker NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE NotImplementedError NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE default_options NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Servers NEWLINE SPACE SPACE SPACE SPACE class SPACE CommandExecutor SPACE < SPACE Base NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE worker NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Command :: Executor NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE default_options NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Command :: Executor . num_workers , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE Rails . env . production? , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Rails . env . production? SPACE ? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Rails . root . join ( LITERALLITERALLITERAL) . to_s SPACE : NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE $stdout , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE Rails . env . production? SPACE ? SPACE LITERALSPACE : SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE Rails . root . join ( LITERAL) . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE Rails . env . production? , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE - LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Servers NEWLINE SPACE SPACE SPACE SPACE class SPACE JobScheduler SPACE < SPACE Base NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE worker NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Workflow :: Scheduler NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE default_options NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE Rails . env . production? , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Rails . env . production? SPACE ? SPACE Rails . root . join ( LITERAL) . to_s SPACE : SPACE $stdout , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE Rails . env . production? SPACE ? SPACE LITERALSPACE : SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE Rails . root . join ( LITERAL) . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE Rails . env . production? , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Servers NEWLINE SPACE SPACE SPACE SPACE class SPACE WorkflowProcessor SPACE < SPACE Base NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE worker NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Workflow :: Processor NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE default_options NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE Rails . env . production? , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Rails . env . production? SPACE ? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Rails . root . join ( LITERALLITERALLITERAL) . to_s SPACE : NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE $stdout , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE Rails . env . production? SPACE ? SPACE LITERALSPACE : SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE Rails . root . join ( LITERAL) . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE Rails . env . production? , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Util NEWLINE SPACE SPACE SPACE SPACE class SPACE Logger SPACE < SPACE :: Logger NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( * args ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE super NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @formatter SPACE = SPACE LoggerFormatter . new NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE LoggerFormatter SPACE < SPACE :: Logger :: Formatter NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE call ( severity , SPACE timestamp , SPACE progname , SPACE msg ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE location SPACE = SPACE caller_locations ( LITERAL, SPACE LITERAL) . first NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALLITERALSPACE % SPACE [ timestamp . iso8601 , SPACE severity , SPACE location . label , SPACE msg ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Util NEWLINE SPACE SPACE SPACE SPACE class SPACE RailsLoggerFormatter SPACE < SPACE :: Logger :: Formatter NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE call ( severity , SPACE timestamp , SPACE _ , SPACE msg ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALLITERALSPACE % SPACE [ timestamp . iso8601 , SPACE severity , SPACE msg ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE class SPACE AssertionError SPACE < SPACE EngineError NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE class SPACE Engine NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Token . processable . each SPACE do SPACE | token | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE token . working? SPACE || SPACE token . waiting? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info SPACE { SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALtoken . status_name LITERALLITERALLITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . with_lock SPACE { SPACE process_with_lock ( token ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE retry ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . with_lock SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE node SPACE = SPACE extract_node ( token ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALnode . type LITERALLITERALLITERALnode . option LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . update_column ( LITERAL, SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . mark_as_working NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . save! NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Notifier . notify ( LITERAL, SPACE token . job_instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE skip ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . with_lock SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE node SPACE = SPACE extract_node ( token ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALnode . type LITERALLITERALLITERALnode . option LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . update_column ( LITERAL, SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . mark_as_working NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE process_next ( node . next , SPACE token ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . save! SPACE unless SPACE token . destroyed? NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Notifier . notify ( LITERAL, SPACE token . job_instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE failure ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . error ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . touch ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . mark_as_failure NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Notifier . notify ( LITERAL, SPACE token . job_instance ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE token . context [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE skip ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute_task ( node , SPACE token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE result SPACE = SPACE node . execute ( token ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE result NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE process_next ( node . next , SPACE token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE process_next ( node . next_sibling , SPACE token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE failure ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE KeyError SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE EngineError . new ( e . message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process_next ( node , SPACE token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE node NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALtoken . path LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . path SPACE = SPACE node . path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . mark_as_finished NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE token . parent NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . touch ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Notifier . notify ( LITERAL, SPACE token . job_instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . destroy! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process_with_lock ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE node SPACE = SPACE extract_node ( token ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execute_task ( node , SPACE token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE EngineError SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALe . message LITERALLITERALLITERALSPACE + SPACE e . backtrace . map SPACE { SPACE | trace | SPACE LITERALLITERALLITERALtrace LITERALLITERALSPACE } . join ( LITERALLITERALLITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . mark_as_critical ( e ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . error ( LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALmessage LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . touch ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Token . delete_all ( LITERAL: SPACE token . job_definition ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . warn ( LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . error ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Notifier . notify ( LITERAL, SPACE token . job_instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ensure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . save! SPACE unless SPACE token . destroyed? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE extract_node ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE root SPACE = SPACE ScriptParser . new ( token . script ) . parse ( LITERAL: SPACE false ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE root . find ( token . path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE class SPACE EngineError SPACE < SPACE StandardError NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE class SPACE Node NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE PATH_REGEXP SPACE = SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE TASK_REGISTORY SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: Sequence , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: Noop , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: Sequence , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: AutoSkipError , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE fork : SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: Fork , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: Env , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: Execute , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: Queue , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: SubProcess , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: SubProcess , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: Timeout , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: ExpectedTime , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: Wait , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE sleep : SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: Sleep , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: RailsEnv , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Task :: KurokoRunner , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERAL, SPACE LITERAL, SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE attr_accessor SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . register ( LITERAL: SPACE nil , SPACE LITERAL: ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE key SPACE || = SPACE klass . to_s . demodulize . underscore . to_sym NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE TASK_REGISTORY . has_key? ( key ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE TASK_REGISTORY . store ( key , SPACE klass ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . warn ( LITERALLITERALLITERALklass LITERALLITERALLITERALTASK_REGISTORY [ key ] LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . deregister ( key ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE TASK_REGISTORY . delete ( key ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( type , SPACE option SPACE = SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @type SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE type . to_sym NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @task_klass SPACE = SPACE TASK_REGISTORY . fetch ( @type , SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @option SPACE SPACE SPACE SPACE SPACE = SPACE option . try ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @parent SPACE SPACE SPACE SPACE SPACE = SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @children SPACE SPACE SPACE = SPACE [ ] NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE AssertionError , SPACE LITERALLITERALLITERAL@type LITERALLITERALLITERALSPACE unless SPACE @task_klass NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE append_child ( child ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE child . parent SPACE = SPACE self NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @children SPACE << SPACE child NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . debug SPACE { SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERAL@type LITERALLITERALLITERAL@option LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @task_klass . new ( self , SPACE token ) . execute . tap SPACE do SPACE | result | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . debug ( LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALresult LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE find ( path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE AssertionError , SPACE LITERALLITERALLITERALpath LITERALLITERALLITERALSPACE unless SPACE PATH_REGEXP SPACE === SPACE path NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE query SPACE = SPACE path . split ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE query . shift SPACE NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE traverse ( query ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE next ( index SPACE = SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( child SPACE = SPACE children [ index ] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE child NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next_sibling NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE next_sibling NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE parent NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE parent . next ( current_index SPACE + SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE parent NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE parent . path SPACE + SPACE LITERALLITERALLITERALcurrent_index LITERALLITERALLITERALtype LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE to_script ( indent SPACE = SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE * SPACE indent LITERALLITERALtype LITERALLITERALLITERALoption LITERALLITERALLITERALSPACE + SPACE children . map SPACE { SPACE | child | SPACE child . to_script ( indent SPACE + SPACE LITERAL) SPACE } . join NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE validate_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @task_klass . new ( self , SPACE nil ) . validate NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @children . each SPACE do SPACE | child | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE child . validate_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE protected NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE current_index NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @_current_index SPACE = SPACE parent . children . index ( self ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE traverse ( query ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE self SPACE if SPACE query . empty? NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE first SPACE SPACE SPACE SPACE = SPACE query . shift NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE index , SPACE _ SPACE = SPACE first . split ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @children [ index . to_i ] . traverse ( query ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Notifier NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NOTIFY_IN_THREAD SPACE = SPACE ! Rails . env . test? NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . notify ( method , SPACE job_instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . notifiers . keys . each SPACE do SPACE | notifier_name | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier SPACE = SPACE const_get ( notifier_name . camelize , SPACE false ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE NOTIFY_IN_THREAD NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Thread . new SPACE { SPACE notify_with_notifier ( job_instance , SPACE method , SPACE notifier ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notify_with_notifier ( job_instance , SPACE method , SPACE notifier ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE self . notify_with_notifier ( job_instance , SPACE method , SPACE notifier ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActiveRecord :: Base . connection_pool . with_connection SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . new ( job_instance ) . send ( LITERALLITERALLITERALmethod LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE Exception SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . warn ( LITERALLITERALLITERALmethod LITERALLITERALLITERALnotifier LITERALLITERALLITERALjob_instance . job_definition . name LITERALLITERALLITERALe . class LITERALLITERALLITERALe . message LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private_class_method SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Processor NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @hostname SPACE = SPACE Socket . gethostname NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @stop SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE ServerEngine :: BlockingFlag . new NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @processing SPACE = SPACE ServerEngine :: BlockingFlag . new NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @workflow SPACE = SPACE Workflow :: Engine . new NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE run NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger SPACE = SPACE logger NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info SPACE LITERALLITERALLITERAL@hostname LITERALLITERALLITERALworker_id LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE until SPACE @stop . wait ( LITERAL. LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE @processing . set? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @processing . set! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @workflow . process_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @processing . reset! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE Exception SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . fatal ( LITERALLITERALLITERAL@hostname LITERALLITERALLITERALworker_id LITERALLITERALLITERALe . class LITERALLITERALLITERALe . message LITERALLITERALLITERALSPACE + NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE e . backtrace . map SPACE { SPACE | trace | SPACE LITERALLITERALLITERALtrace LITERALLITERALSPACE } . join ( LITERALLITERALLITERAL) ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE stop NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info SPACE LITERALLITERALLITERAL@hostname LITERALLITERALLITERALworker_id LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @stop . set! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Scheduler NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @hostname SPACE = SPACE Socket . gethostname NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @stop SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE ServerEngine :: BlockingFlag . new NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @processing SPACE = SPACE ServerEngine :: BlockingFlag . new NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE run NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger SPACE = SPACE logger NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info SPACE LITERALLITERALLITERAL@hostname LITERALLITERALLITERALworker_id LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE until SPACE @stop . wait ( LITERAL. LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE @processing . set? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @processing . set! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE JobSchedule . transaction SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE now SPACE = SPACE Time . current NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE last_scheduled_time SPACE = SPACE Tick . fetch_then_update ( now ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE JobSchedule . launch_scheduled_jobs! ( last_scheduled_time , SPACE now ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @processing . reset! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE Exception SPACE = > SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . fatal ( LITERALLITERALLITERAL@hostname LITERALLITERALLITERALworker_id LITERALLITERALLITERALe . class LITERALLITERALLITERALe . message LITERALLITERALLITERALSPACE + NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE e . backtrace . map SPACE { SPACE | trace | SPACE LITERALLITERALLITERALtrace LITERALLITERALSPACE } . join ( LITERALLITERALLITERAL) ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE e NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE stop NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info SPACE LITERALLITERALLITERAL@hostname LITERALLITERALLITERALworker_id LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @stop . set! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE class SPACE ScriptParser NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LINE_REGEXP SPACE = SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( script ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @script SPACE = SPACE script NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @root SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE Node . new ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @node_stack SPACE SPACE SPACE = SPACE [ @root ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @indent_stack SPACE = SPACE [ - LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE parse ( LITERAL: SPACE true ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE root SPACE = SPACE parse_lines ( @script ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE root . validate_all SPACE if SPACE validate NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE root NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE parse_lines ( script ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE script . each_line . with_index SPACE do SPACE | line , SPACE no | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE if SPACE line . start_with? ( LITERAL) SPACE || SPACE LITERALLITERALLITERALLITERALLITERALSPACE === SPACE line NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( matched SPACE = SPACE LINE_REGEXP . match ( line . chomp ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise_syntax_error ( no , SPACE LITERAL) SPACE if SPACE matched . captures . all? ( & LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE indent SPACE = SPACE ( matched [ LITERAL] SPACE || SPACE LITERAL) . length NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE node SPACE SPACE SPACE = SPACE Node . new ( matched [ LITERAL] , SPACE ShellScanner . new ( matched [ LITERAL] ) . strip_comment . try! ( LITERAL) ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE indent SPACE < = > SPACE @indent_stack . last NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE - LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( i SPACE = SPACE @indent_stack . index ( indent ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @node_stack SPACE = SPACE @node_stack [ LITERAL, SPACE i ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @indent_stack SPACE = SPACE @indent_stack [ LITERAL, SPACE i ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise_syntax_error ( no , SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @node_stack . pop NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @indent_stack . pop NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @node_stack . last . append_child ( node ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @node_stack SPACE << SPACE node NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @indent_stack SPACE << SPACE indent NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE raise_syntax_error ( no , SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @root NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE raise_syntax_error ( no , SPACE message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Workflow :: SyntaxError , SPACE LITERALLITERALLITERALno SPACE + SPACE LITERALLITERALLITERALLITERALmessage LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE class SPACE ShellScanner NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE STRING_LITERAL SPACE = SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @text SPACE = SPACE text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE strip_comment NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE @text SPACE if SPACE @text . nil? NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE result SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE while SPACE scanner . rest? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE break SPACE if SPACE scanner . peek ( LITERAL) SPACE == SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token SPACE = SPACE scanner . scan ( LITERALLITERALLITERALLITERALLITERAL) SPACE || SPACE scanner . scan ( STRING_LITERAL ) SPACE || SPACE scanner . scan ( LITERALLITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE break SPACE if SPACE token . nil? NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE result SPACE << SPACE token NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE result NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE scanner NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @scanner SPACE || = SPACE StringScanner . new ( @text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE class SPACE SyntaxError SPACE < SPACE EngineError NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Notifier NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Hipchat NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERAL, SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE USER_NAME SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @instance SPACE SPACE SPACE = SPACE instance NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @definition SPACE = SPACE instance . job_definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @hipchat SPACE SPACE SPACE SPACE = SPACE Kuroko2 . config . notifiers . hipchat . api_token NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @message_builder SPACE = SPACE Workflow :: Notifier :: Concerns :: ChatMessageBuilder . new ( instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_launch NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . hipchat_notify_finished? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE build_message ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE message_builder . launched_text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE @instance . logs . reverse . detect { SPACE | log | SPACE log . level SPACE == SPACE LITERALSPACE } . try! ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_to_hipchat ( message , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_retrying NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . hipchat_notify_finished NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE build_message ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE message_builder . retrying_text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE @instance . logs . last ( LITERAL) . first . message NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_to_hipchat ( message , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_skipping NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . hipchat_notify_finished NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE build_message ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE message_builder . skipping_text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE @instance . logs . last ( LITERAL) . first . message NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_to_hipchat ( message , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_cancellation NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . notify_cancellation SPACE || SPACE @definition . hipchat_notify_finished? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE build_message ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE message_builder . failure_text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE @instance . logs . reverse . detect { SPACE | log | SPACE log . level SPACE == SPACE LITERALSPACE } . try! ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_to_hipchat ( message , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE build_message ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE message_builder . failure_text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE @instance . logs . last ( LITERAL) . first . message NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_to_hipchat ( message , SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE true ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_additional_text_to_hipchat NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_critical NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE build_message ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE message_builder . failure_text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE @instance . logs . last ( LITERAL) . first . message NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_to_hipchat ( message , SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE true ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_additional_text_to_hipchat NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_finished NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . hipchat_notify_finished? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE build_message ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE message_builder . finished_text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_to_hipchat ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_long_elapsed_time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE build_message ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE message_builder . long_elapsed_time_text ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_to_hipchat ( message , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE send_to_hipchat ( message , SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false , SPACE format : SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE notify_hipchat? NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE hipchat [ @definition . hipchat_room ] . send ( USER_NAME , SPACE message , SPACE LITERAL: SPACE color , SPACE LITERAL: SPACE notify , SPACE LITERAL: SPACE format ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE build_message ( LITERAL: SPACE , SPACE LITERAL: ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALlevel LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE << SPACE LITERALLITERALLITERALmessage_builder . job_instance_path LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE send_additional_text_to_hipchat NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . hipchat_additional_text . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE message_builder . additional_text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_to_hipchat ( message , SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE true , SPACE format : SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_hipchat? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @definition . hipchat_room . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Notifier NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Mail NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( job_instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @job_instance SPACE = SPACE job_instance NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @definition SPACE SPACE SPACE = SPACE job_instance . job_definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_launch NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_retrying NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_skipping NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_cancellation NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . notify_cancellation NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE deliver_job_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE deliver_job_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_critical NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE deliver_job_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_finished NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_long_elapsed_time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Notifications . notify_long_elapsed_time ( @job_instance ) . deliver_now NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE deliver_job_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Notifications . job_failure ( @job_instance ) . deliver_now NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Notifier NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Slack NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERAL, SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE module SPACE LevelToColor NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE WARNING SPACE SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE FAILURE SPACE SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE CRITICAL SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SUCCESS SPACE SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE INFO SPACE SPACE SPACE SPACE SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @instance SPACE SPACE SPACE = SPACE instance NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @definition SPACE = SPACE instance . job_definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @message_builder SPACE = SPACE Workflow :: Notifier :: Concerns :: ChatMessageBuilder . new ( instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @webhook_url SPACE = SPACE Kuroko2 . config . notifiers . slack . webhook_url NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_launch NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . hipchat_notify_finished? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_attachment_message_to_slack ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . launched_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . logs . reverse . detect { SPACE | log | SPACE log . level SPACE == SPACE LITERALSPACE } . try! ( LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_retrying NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . hipchat_notify_finished? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_attachment_message_to_slack ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . retrying_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . logs . last ( LITERAL) . first . message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_skipping NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . hipchat_notify_finished? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_attachment_message_to_slack ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . skipping_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . logs . last ( LITERAL) . first . message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_cancellation NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . notify_cancellation SPACE || SPACE @definition . hipchat_notify_finished? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_attachment_message_to_slack ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . failure_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . logs . reverse . detect { SPACE | log | SPACE log . level SPACE == SPACE LITERALSPACE } . try! ( LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_attachment_message_to_slack ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . failure_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . logs . last ( LITERAL) . first . message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_additional_text_to_slack NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_critical NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_attachment_message_to_slack ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . failure_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . logs . last ( LITERAL) . first . message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_additional_text_to_slack NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_finished NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . hipchat_notify_finished? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_attachment_message_to_slack ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . finished_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_long_elapsed_time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_attachment_message_to_slack ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . long_elapsed_time_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE send_attachment_message_to_slack ( LITERAL: SPACE , SPACE LITERAL: SPACE , SPACE LITERAL: SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE false SPACE unless SPACE @definition . slack_channel . present? NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_to_slack ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @definition . slack_channel , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE [ NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERALlevel LITERALLITERALLITERALtext LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . job_instance_path , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE body , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERALlevel LITERALLITERALLITERALtext LITERALLITERALLITERALmessage_builder . job_instance_path LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LevelToColor . const_get ( level ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE send_to_slack ( payload ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE url SPACE = SPACE URI . parse ( webhook_url ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE conn SPACE = SPACE Faraday . new ( LITERALSPACE = > SPACE LITERALLITERALurl . scheme LITERALLITERALLITERALurl . host LITERALLITERAL) SPACE do SPACE | faraday | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE faraday . adapter SPACE Faraday . default_adapter NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE conn . post SPACE do SPACE | req | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE req . url SPACE url . path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE req . headers [ LITERAL] SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE req . body SPACE = SPACE payload . to_json NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE response . success? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . fatal ( LITERALLITERALLITERALresponse . status LITERALLITERALLITERALresponse . body LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE send_additional_text_to_slack NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . slack_channel . present? SPACE && SPACE @definition . hipchat_additional_text . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE send_to_slack ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @definition . slack_channel , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . additional_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Notifier NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Webhook NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE HASH_ALGORITHM SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE HMAC_DIGEST SPACE SPACE SPACE SPACE = SPACE OpenSSL :: Digest . new ( HASH_ALGORITHM ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @instance SPACE SPACE SPACE = SPACE instance NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @definition SPACE = SPACE instance . job_definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @message_builder SPACE = SPACE Workflow :: Notifier :: Concerns :: ChatMessageBuilder . new ( instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @secret_token SPACE = SPACE Kuroko2 . config . notifiers . webhook . try! ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_launch NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . hipchat_notify_finished? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_payload ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . launched_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . logs . reverse . detect { SPACE | log | SPACE log . level SPACE == SPACE LITERALSPACE } . try! ( LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_retrying NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . hipchat_notify_finished? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_payload ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . retrying_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . logs . last ( LITERAL) . first . message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_skipping NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . hipchat_notify_finished? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_payload ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . skipping_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . logs . last ( LITERAL) . first . message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_cancellation NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . notify_cancellation SPACE || SPACE @definition . hipchat_notify_finished? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_payload ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . failure_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . logs . reverse . detect { SPACE | log | SPACE log . level SPACE == SPACE LITERALSPACE } . try! ( LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_payload ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . failure_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . logs . last ( LITERAL) . first . message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_critical NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_payload ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . failure_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . logs . last ( LITERAL) . first . message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_finished NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @definition . hipchat_notify_finished? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_payload ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . finished_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_long_elapsed_time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE request ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE build_payload ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . long_elapsed_time_text , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE request ( body ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE unless SPACE @definition . webhook_url . present? NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE url SPACE = SPACE URI . parse ( @definition . webhook_url ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE conn SPACE = SPACE Faraday . new ( LITERAL: SPACE LITERALLITERALurl . scheme LITERALLITERALLITERALurl . host LITERALLITERAL) SPACE do SPACE | faraday | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE faraday . port SPACE = SPACE url . port NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE faraday . adapter SPACE Faraday . default_adapter NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE json SPACE = SPACE body . to_json NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE response SPACE = SPACE conn . post SPACE do SPACE | req | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE req . url ( url . path ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE req . headers [ LITERAL] SPACE = SPACE SecureRandom . uuid NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE @secret_token . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE req . headers [ LITERAL] SPACE = SPACE LITERALLITERALHASH_ALGORITHM LITERALLITERALLITERALOpenSSL :: HMAC . hexdigest ( HMAC_DIGEST , SPACE @secret_token , SPACE json ) LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE req . headers [ LITERAL] SPACE SPACE SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE req . headers [ LITERAL] SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE req . body SPACE = SPACE json NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE response . success? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . fatal ( LITERALLITERALLITERALresponse . status LITERALLITERALLITERALresponse . body LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE build_payload ( LITERAL: , SPACE LITERAL: , SPACE LITERAL: , SPACE LITERAL: SPACE nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE action , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE level , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE subject , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE message_builder . job_instance_path , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE id : SPACE @instance . id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . script , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . finished_at . try! ( LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . canceled_at . try! ( LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . error_at . try! ( LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @instance . created_at . try! ( LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE Kuroko2 :: Engine . routes . url_helpers . job_definition_url ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @definition , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE Kuroko2 . config . url_host , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE Kuroko2 . config . url_scheme , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE id : SPACE @definition . id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE name : SPACE @definition . name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE @definition . description , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Notifier NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE module SPACE Concerns NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE ChatMessageBuilder NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( instance ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @instance SPACE SPACE SPACE = SPACE instance NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @definition SPACE = SPACE instance . job_definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE failure_text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL@definition . name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE finished_text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL@definition . name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE launched_text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL@definition . name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE retrying_text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL@definition . name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE skipping_text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL@definition . name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE long_elapsed_time_text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL@definition . name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE additional_text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL@definition . name LITERALLITERALLITERAL@definition . hipchat_additional_text LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE job_instance_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Engine . routes . url_helpers . job_definition_job_instance_url ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @definition , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @instance , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE Kuroko2 . config . url_host , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE Kuroko2 . config . url_scheme , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE AutoSkipError SPACE < SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE TRUE_OPTIONS SPACE = SPACE [ LITERAL, SPACE LITERAL, SPACE LITERAL] NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE auto_skip_error? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALauto_skip_error? LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE auto_skip_error? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE return SPACE @auto_skip_error SPACE if SPACE defined? SPACE @auto_skip_error NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @auto_skip_error SPACE = SPACE option SPACE ? SPACE TRUE_OPTIONS . include? ( option . strip ) SPACE : SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE initialize ( node , SPACE token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @node SPACE SPACE = SPACE node NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @token SPACE = SPACE token NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE NotImplementedError NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE validate NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE token NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @token NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE node NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @node NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE option NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @_option SPACE || = SPACE @node . option NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Env SPACE < SPACE Base NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE option NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env SPACE = SPACE token . context [ LITERAL] SPACE || SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env . merge! ( parse_option ( option ) ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE env NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE validate NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE parse_option ( option ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE parse_option ( option ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env SPACE = SPACE { } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE scanner SPACE = SPACE StringScanner . new ( option ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE until SPACE scanner . eos? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE scanner . scan ( LITERALLITERALLITERALLITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env [ scanner [ LITERAL] ] SPACE = SPACE scanner [ LITERAL] . gsub ( LITERALLITERALLITERALLITERAL, SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE scanner . scan ( LITERALLITERALLITERALLITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env [ scanner [ LITERAL] ] SPACE = SPACE scanner [ LITERAL] . gsub ( LITERALLITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE scanner . scan ( LITERALLITERALLITERALLITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env [ scanner [ LITERAL] ] SPACE = SPACE scanner [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE scanner . scan ( LITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Workflow :: AssertionError , SPACE LITERALLITERALLITERALoption LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Execute SPACE < SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE DEFAULT_EXPECTED_TIME SPACE = SPACE LITERALSPACE * SPACE LITERALSPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE EXPECTED_TIME_NOTIFY_REMIND_TERM SPACE = SPACE LITERAL. hours NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( execution SPACE = SPACE Execution . of ( token ) . take ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_execution ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE validate NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE chdir NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before_execute NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Execution . create! ( LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE token . job_definition , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE token . job_instance , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE shell , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE || SPACE Execution :: DEFAULT_QUEUE , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE before_execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE chdir NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE shell NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE option NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE validate NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE option . blank? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Workflow :: AssertionError , SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE update_execution ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE execution . completed? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALexecution . shell LITERALLITERALLITERALexecution . exit_status LITERALLITERALLITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance SPACE = SPACE token . job_instance NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALexecution . success? SPACE ? SPACE LITERALSPACE : SPACE LITERALLITERALLITERALLITERALexecution . shell LITERALLITERALLITERALexecution . exit_status LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE execution . output? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE += SPACE <<- LITERALLITERALLITERALNEWLINE LITERALLITERALLITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE execution . success? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . logs . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . logs . error ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . with_lock SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . destroy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . success? SPACE ? SPACE LITERALSPACE : SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE process_timeout_if_needed ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notify_long_elapsed_time_if_needed ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process_timeout_if_needed ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE timeout SPACE = SPACE token . context [ LITERAL] . to_i NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE timeout SPACE > SPACE LITERALSPACE && SPACE ( ( execution . created_at SPACE + SPACE timeout . minutes ) SPACE < SPACE Time . current ) SPACE && SPACE execution . pid NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE hostname SPACE = SPACE Worker . executing ( execution . id ) . try ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE hostname NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ProcessSignal . create! ( LITERAL: SPACE execution . pid , SPACE LITERAL: SPACE hostname ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALtimeout LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALexecution . id LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . error ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . error ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE expected_time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @expected_time SPACE || = SPACE token . context [ LITERAL] . present? SPACE ? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] . to_i SPACE : NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE DEFAULT_EXPECTED_TIME NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE available_notify_long_elapsed_time? ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE token . context [ LITERAL] . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE < SPACE EXPECTED_TIME_NOTIFY_REMIND_TERM . ago SPACE && NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . pid . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . pid . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE elapsed_expected_time? ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ( execution . created_at SPACE + SPACE expected_time . minutes ) . past? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE notify_long_elapsed_time_if_needed ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE available_notify_long_elapsed_time? ( execution ) SPACE && SPACE elapsed_expected_time? ( execution ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE Time . current NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Notifier . notify ( LITERAL, SPACE token . job_instance ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALexpected_time LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE ExpectedTime SPACE < SPACE TimeBase NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE set_task_name ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Fork SPACE < SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE children SPACE = SPACE token . children NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE children . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE node . children . each SPACE do SPACE | child | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attributes SPACE = SPACE token . attributes . except ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attributes SPACE = SPACE attributes . merge ( LITERAL: SPACE SecureRandom . uuid , SPACE LITERAL: SPACE token , SPACE LITERAL: SPACE child . to_script , SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Token . create! ( attributes ) . tap SPACE do SPACE | created | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALcreated . uuid LITERALLITERALLITERALnode . path LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE created . job_instance . logs . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE children . all? ( & LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE validate NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE node . children . empty? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Workflow :: AssertionError , SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE KurokoRunner SPACE < SPACE Execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE before_execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env SPACE = SPACE token . context [ LITERAL] SPACE || SPACE { } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE env . merge! ( LITERALSPACE = > SPACE Rails . root . join ( LITERAL) . to_s ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE env NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE chdir NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Rails . root . to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE shell NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rails SPACE = SPACE Rails . root . join ( LITERAL) . to_s NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE kuroko_script SPACE = SPACE Kuroko2 :: Engine . root . join ( LITERALLITERALLITERALoption LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALrails LITERALLITERALLITERALRails . env LITERALLITERALLITERALkuroko_script LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Noop SPACE < SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Queue SPACE < SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE option . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE option NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE Execution :: DEFAULT_QUEUE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE validate NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE === SPACE option NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Workflow :: AssertionError , SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALoption LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE Worker . where ( LITERAL: SPACE option , SPACE LITERAL: SPACE true ) . exists? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Workflow :: AssertionError , SPACE LITERALLITERALLITERALoption LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE RailsEnv SPACE < SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE RAILS_ENVS SPACE = SPACE LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE option NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ! RAILS_ENVS . include? ( option ) SPACE || SPACE RAILS_ENVS . index ( option ) SPACE > SPACE RAILS_ENVS . index ( Rails . env ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Workflow :: AssertionError , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALoption LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE option NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Sequence SPACE < SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALoption LITERALLITERALLITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Sleep SPACE < SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( time SPACE = SPACE token . context [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE Time . current . to_i SPACE > SPACE time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context . delete ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE Time . current . to_i SPACE + SPACE option . to_i NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE validate NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE LITERALLITERALLITERALLITERALLITERALSPACE === SPACE option NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Workflow :: AssertionError , SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE SubProcess SPACE < SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE validate NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE ( sub_process_id SPACE = SPACE token . context [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance SPACE = SPACE JobInstance . find ( sub_process_id ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE instance . working? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE instance . canceled_at? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALLITERALinstance . job_definition . id LITERALLITERALLITERALinstance . job_definition . name LITERALLITERALLITERALLITERALinstance . job_definition . id LITERALLITERALLITERALinstance . id LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . warn ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . mark_as_failure NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE nil NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALLITERALinstance . job_definition . id LITERALLITERALLITERALinstance . job_definition . name LITERALLITERALLITERALLITERALinstance . job_definition . id LITERALLITERALLITERALinstance . id LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE definition SPACE = SPACE JobDefinition . find ( @node . option ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE launched_by SPACE = SPACE LITERALLITERALLITERALLITERALtoken . job_definition . id LITERALLITERALLITERALtoken . job_definition . name LITERALLITERALLITERALLITERALtoken . job_definition . id LITERALLITERALLITERALtoken . job_instance . id LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance SPACE = SPACE definition . create_instance ( LITERAL: SPACE launched_by ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . info ( LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALLITERALinstance . job_definition . id LITERALLITERALLITERALinstance . job_definition . name LITERALLITERALLITERALLITERALinstance . job_definition . id LITERALLITERALLITERALinstance . id LITERALLITERALLITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE instance . id NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE ActiveRecord :: RecordNotFound NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Workflow :: AssertionError , SPACE LITERALLITERALLITERALoption LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE validate NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE === SPACE option NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Workflow :: AssertionError , SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE TimeBase SPACE < SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE << SPACE self NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE attr_reader SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE set_task_name ( task_name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @task_name SPACE = SPACE task_name NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE option . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE validate NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ self . class . task_name ] SPACE = SPACE to_minutes ( option ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE validate NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE === SPACE option NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Workflow :: AssertionError , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALself . class . task_name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE to_minutes ( option ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE option NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE $1 . to_i SPACE * SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE $1 . to_i NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE option . to_i NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Timeout SPACE < SPACE TimeBase NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE set_task_name ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE Wait SPACE < SPACE Base NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE PERIODS SPACE = SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE OPTION_REGEXP SPACE = SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALPERIODS . join ( LITERAL) LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE token . context [ LITERAL] . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE token . waiting? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE process_waiting_job NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info SPACE { SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALtoken . status_name LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . mark_as_waiting NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE parse_option ( option , SPACE LITERAL: SPACE token . job_instance . created_at ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info SPACE { SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALtoken . context [ LITERAL] [ LITERALLITERALLITERAL] LITERALLITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . mark_as_waiting NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALnode . option LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . save! NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE process_waiting_job NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE receive_waiting_job_completion! NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wait_option SPACE = SPACE token . context [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE wait_option [ LITERALLITERALLITERAL] . all? SPACE { SPACE | wait_job | SPACE wait_job [ LITERALLITERALLITERAL] SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . mark_as_working NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context . delete ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . save! NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . info ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE wait_option [ LITERALLITERALLITERAL] . minutes . since ( token . created_at ) . past? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALnode . option LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . error ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . error ( message ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE validate NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE parse_option ( option ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE parse_option ( option , SPACE LITERAL: SPACE Time . current ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise_assertion_error SPACE unless SPACE option NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wait_option SPACE = SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE [ ] , SPACE LITERALLITERALLITERALSPACE = > SPACE LITERAL. minutes . to_i SPACE / SPACE LITERAL. minute SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE scanner SPACE = SPACE StringScanner . new ( option ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE until SPACE scanner . eos? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE scanner . scan ( OPTION_REGEXP ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE start_from , SPACE start_to SPACE = SPACE period_to_time ( scanner [ LITERAL] , SPACE LITERAL: SPACE start_at ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wait_option [ LITERALLITERALLITERAL] SPACE << SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE parse_definition_id ( scanner [ LITERAL] ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE = > SPACE scanner [ LITERAL] , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE = > SPACE start_from . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE = > SPACE start_to . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE = > SPACE false , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE scanner . scan ( LITERALLITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wait_option [ LITERALLITERALLITERAL] SPACE = SPACE scanner [ LITERAL] . to_i . hours SPACE / SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE scanner . scan ( LITERALLITERALLITERALLITERALLITERAL) SPACE || SPACE scanner . scan ( LITERALLITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wait_option [ LITERALLITERALLITERAL] SPACE = SPACE scanner [ LITERAL] . to_i NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE elsif SPACE scanner . scan ( LITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise_assertion_error NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wait_option NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE receive_waiting_job_completion! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] [ LITERALLITERALLITERAL] . each SPACE do SPACE | wait_job | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE next SPACE if SPACE wait_job [ LITERALLITERALLITERAL] SPACE == SPACE true NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE start_from SPACE = SPACE Time . zone . parse ( wait_job [ LITERALLITERALLITERAL] ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE start_to SPACE SPACE SPACE = SPACE Time . zone . parse ( wait_job [ LITERALLITERALLITERAL] ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE received_instance SPACE = SPACE JobInstance . finished . where ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE wait_job [ LITERALLITERALLITERAL] . to_i , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE start_from SPACE .. SPACE start_to NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) . first NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE received_instance . present? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wait_job [ LITERALLITERALLITERAL] SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . save! NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE message SPACE = SPACE LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERALLITERALreceived_instance . job_definition_id LITERALLITERALLITERALreceived_instance . id LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . logs . info ( message ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE period_to_time ( period , SPACE LITERAL: SPACE Time . current ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE case SPACE period NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ at . beginning_of_hour , SPACE at . end_of_hour ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ at . beginning_of_day , SPACE at . end_of_day ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ at . beginning_of_week , SPACE at . end_of_week ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE when SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ at . beginning_of_month , SPACE at . end_of_month ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise_assertion_error NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE parse_definition_id ( id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE JobDefinition . find ( id . to_i ) . id NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE rescue SPACE ActiveRecord :: RecordNotFound NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Workflow :: AssertionError , SPACE LITERALLITERALLITERALid LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE raise_assertion_error NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE raise SPACE Workflow :: AssertionError , SPACE LITERALLITERALLITERALoption LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2 NEWLINE SPACE SPACE class SPACE Configuration NEWLINE SPACE SPACE SPACE SPACE class SPACE << SPACE self NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE DEFAULT_CONFIG SPACE = SPACE { SPACE LITERAL: SPACE LITERALSPACE } . freeze NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE config NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE @config SPACE || = SPACE build_config NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE build_config NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Hashie :: Mash . new ( DEFAULT_CONFIG . merge ( Rails . application . config_for ( LITERAL) ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE class SPACE Engine SPACE < SPACE :: Rails :: Engine NEWLINE SPACE SPACE SPACE SPACE isolate_namespace SPACE Kuroko2 NEWLINE NEWLINE SPACE SPACE SPACE SPACE config . before_configuration SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE require SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE config . autoload_paths SPACE << SPACE root . join ( LITERAL) . to_s NEWLINE SPACE SPACE SPACE SPACE config . eager_load_paths SPACE << SPACE root . join ( LITERAL) . to_s NEWLINE NEWLINE SPACE SPACE SPACE SPACE initializer SPACE LITERALLITERALLITERALSPACE do SPACE | app | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE URI . parse ( Kuroko2 . config . url ) . tap SPACE do SPACE | url | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . url_host SPACE SPACE SPACE = SPACE url . host NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . url_scheme SPACE = SPACE url . scheme NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . url_port SPACE SPACE SPACE = SPACE url . port NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE config . active_record . table_name_prefix SPACE = SPACE Kuroko2 . config . table_name_prefix NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE Kuroko2 . config . custom_tasks NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . custom_tasks . each SPACE do SPACE | key , SPACE klass | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE unless SPACE Workflow :: Node :: TASK_REGISTORY . has_key? ( key ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Workflow :: Node . register ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE key . to_sym , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE Workflow :: Task . const_get ( klass , SPACE false ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE config . action_mailer . default_url_options SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . url_host , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE Kuroko2 . config . url_scheme , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . url_port NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE config . action_mailer . delivery_method SPACE = SPACE Kuroko2 . config . action_mailer . delivery_method . to_sym NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE config . action_mailer . smtp_settings SPACE = NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . action_mailer . smtp_settings . to_h . symbolize_keys SPACE || SPACE { } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE app . config . assets . precompile SPACE += SPACE LITERALLITERALLITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE if SPACE Kuroko2 . config . extentions SPACE && SPACE Kuroko2 . config . extentions . controller NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . config . extentions . controller . each SPACE do SPACE | extention | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: ApplicationController . include ( Module . const_get ( extention , SPACE false ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE VERSION SPACE = SPACE LITERALNEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE Kuroko2 :: MemorySampler SPACE do NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE { SPACE Process . spawn ( * LITERALLITERALLITERAL, SPACE LITERAL: SPACE true ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( described_class . get_by_pgid ( pid ) ) . to SPACE be_kind_of ( Integer ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
NEWLINE ENV [ LITERALLITERALLITERAL] SPACE || = SPACE LITERALNEWLINE require SPACE File . expand_path ( LITERAL, SPACE __FILE__ ) NEWLINE NEWLINE abort ( LITERALLITERALLITERAL) SPACE if SPACE Rails . env . production? NEWLINE NEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE NEWLINE require SPACE LITERALNEWLINE NEWLINE require SPACE LITERALNEWLINE Timecop . safe_mode SPACE = SPACE true NEWLINE NEWLINE require SPACE LITERALNEWLINE WebMock . disable_net_connect! ( LITERAL: SPACE true ) NEWLINE NEWLINE require SPACE LITERALNEWLINE require SPACE LITERALNEWLINE Capybara . javascript_driver SPACE = SPACE LITERALNEWLINE Capybara . default_max_wait_time SPACE = SPACE LITERALNEWLINE NEWLINE OmniAuth . config . test_mode SPACE = SPACE true NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE Dir [ LITERALLITERALFile . dirname ( __FILE__ ) LITERALLITERALLITERAL] . each SPACE { SPACE | f | SPACE require SPACE f SPACE } NEWLINE NEWLINE NEWLINE NEWLINE ActiveRecord :: Migration . maintain_test_schema! NEWLINE NEWLINE RSpec . configure SPACE do SPACE | config | NEWLINE SPACE SPACE config . include SPACE FactoryGirl :: Syntax :: Methods NEWLINE SPACE SPACE config . include SPACE SignInHelper , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE config . include SPACE FeatureSignInHelper , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE config . include SPACE WaitForAjax , SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . use_transactional_fixtures SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . infer_spec_type_from_file_location! NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . filter_rails_from_backtrace! NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE config . after ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE Capybara . reset_sessions! NEWLINE SPACE SPACE SPACE SPACE DatabaseRewinder . clean NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE config . around SPACE do SPACE | e | NEWLINE SPACE SPACE SPACE SPACE begin NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE original_env SPACE = SPACE ENV . to_h . dup NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE e . run NEWLINE SPACE SPACE SPACE SPACE ensure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ENV . replace ( original_env ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE Kuroko2 :: ReturnToValidator SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE described_class SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( validator ) . to SPACE be_valid ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( validator ) . to_not SPACE be_valid ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( validator ) . to_not SPACE be_valid ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( validator ) . to_not SPACE be_valid ( nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( validator ) . to_not SPACE be_valid ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( validator ) . to_not SPACE be_valid ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2 NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Workflow :: Node :: TASK_REGISTORY ) . to SPACE have_key ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Workflow :: ScriptParser . new ( LITERAL) . parse ) . to SPACE be_a ( Workflow :: Node ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE RSpec . configure SPACE do SPACE | config | NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . expect_with SPACE LITERALSPACE do SPACE | expectations | NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE expectations . include_chain_clauses_in_custom_matcher_descriptions SPACE = SPACE true NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . mock_with SPACE LITERALSPACE do SPACE | mocks | NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE mocks . verify_partial_doubles SPACE = SPACE true NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . shared_context_metadata_behavior SPACE = SPACE LITERALNEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Command NEWLINE SPACE SPACE describe SPACE Kill SPACE do NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE subject SPACE { SPACE Kill . new ( LITERAL, SPACE LITERAL) . execute SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE Process . detach ( pid ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE pid , SPACE LITERAL: SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Process . spawn ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE is_expected . to SPACE eq SPACE signal NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE Process . kill ( LITERAL, SPACE pid ) SPACE } . to SPACE raise_error ( Errno :: ESRCH ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE NEWLINE module SPACE Kuroko2::Command NEWLINE SPACE SPACE describe SPACE Monitor SPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } SPACE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE instance ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE hostname ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE ActionMailer :: Base . deliveries . last SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE token , SPACE LITERAL: SPACE worker , SPACE LITERAL: SPACE Time . current , SPACE LITERAL: SPACE nil , SPACE LITERAL: SPACE pid ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Command :: Monitor . new ( LITERAL: SPACE hostname , SPACE LITERAL: SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject! SPACE { SPACE LITERAL. times SPACE { SPACE monitor . execute SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . reload NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( monitor . counter_size ) . to SPACE be_zero NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( sent_mail ) . not_to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( sent_mail . subject ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( execution . mailed_at ) . not_to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE token , SPACE LITERAL: SPACE worker , SPACE LITERAL: SPACE LITERAL. minutes . ago , SPACE LITERAL: SPACE nil , SPACE LITERAL: SPACE nil ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject! SPACE { SPACE Kuroko2 :: Command :: Monitor . new ( LITERAL: SPACE hostname , SPACE LITERAL: SPACE LITERAL) . execute SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . reload NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( sent_mail . subject ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( execution . mailed_at ) . not_to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE token , SPACE LITERAL: SPACE worker , SPACE LITERAL: SPACE Time . current , SPACE LITERAL: SPACE nil , SPACE LITERAL: SPACE pid ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Command :: Monitor . new ( LITERAL: SPACE hostname , SPACE LITERAL: SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE allow ( monitor ) . to SPACE receive ( LITERAL) . and_return ( true ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE allow ( Kuroko2 :: MemorySampler ) . to SPACE receive ( LITERAL) . and_return ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE monitor . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . job_definition . memory_expectancy . memory_consumption_logs . count NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . from ( LITERAL) . to ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE log SPACE = SPACE execution . job_definition . memory_expectancy . memory_consumption_logs . first NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( log . value ) . to SPACE be_kind_of ( Integer ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( log . value ) . not_to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( log . job_instance_id ) . to SPACE eq ( instance . id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Command NEWLINE SPACE SPACE describe SPACE Shell SPACE do NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE subject SPACE { SPACE Shell . new ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE worker ) . execute SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE job_definition ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE job_instance , SPACE LITERAL: SPACE job_definition ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE shell , SPACE LITERAL: SPACE { SPACE LITERALSPACE = > SPACE { SPACE LITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } SPACE } , SPACE LITERAL: SPACE nil , SPACE LITERAL: SPACE nil , SPACE LITERAL: SPACE token ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE is_expected . to SPACE eq SPACE execution NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( subject . started_at ) . not_to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( subject . finished_at ) . not_to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( subject ) . to SPACE be_success NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE is_expected . to SPACE eq SPACE execution NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( subject . started_at ) . not_to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( subject . finished_at ) . not_to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( subject ) . not_to SPACE be_success NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE is_expected . to SPACE eq SPACE execution NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( subject . started_at ) . not_to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( subject . finished_at ) . not_to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( subject ) . to SPACE be_success NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE execution . id ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE is_expected . to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . reload NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( execution . started_at ) . to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE execution . job_definition . memory_expectancy SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ( LITERAL.. LITERAL) . each SPACE { | i | SPACE job_instance . create_memory_consumption_log! ( LITERAL: SPACE i ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE subject SPACE } . to SPACE change SPACE { SPACE memory_expectancy . reload . expected_value SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE subject SPACE } . not_to SPACE change SPACE { SPACE memory_expectancy . reload . expected_value SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE Kuroko2 :: DashboardController , SPACE LITERALSPACE = > SPACE LITERALSPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: ExecutionsController SPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE { SPACE sign_in SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE instance ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE token , SPACE LITERAL: SPACE nil , SPACE LITERAL: SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE execution ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE delete SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id , SPACE LITERAL: SPACE instance . id , SPACE id : SPACE execution . id SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE redirect_to ( job_definition_job_instance_path ( LITERAL: SPACE definition . id , SPACE id : SPACE instance . id ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: ProcessSignal . count ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: JobDefinitionStatsController SPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE { SPACE sign_in SPACE } NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE create ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE instance_num , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE Kuroko2 :: Token :: FINISHED NEWLINE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE definition . job_instances . first . update! ( LITERAL: SPACE LITERAL. months . ago ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE definition . job_instances . each SPACE do SPACE | instance | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: MemoryConsumptionLog . create! ( LITERAL: SPACE instance . id , SPACE LITERAL: SPACE LITERALSPACE + SPACE rand ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE { SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE render_template ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE definition NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id SPACE } , SPACE LITERAL: SPACE true SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id , SPACE LITERAL: SPACE period SPACE } , SPACE LITERAL: SPACE true SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id SPACE } , SPACE LITERAL: SPACE true SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id , SPACE LITERAL: SPACE period SPACE } , SPACE LITERAL: SPACE true SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: JobDefinitionsController SPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE { SPACE sign_in SPACE } NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE get SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE { SPACE create_list ( LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE render_template ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE definitions NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE id : SPACE definition . id SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE render_template ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE definition NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE get SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE render_template ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE be_new_record NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject! SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE post SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE { SPACE name : SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALLITERALSPACE } SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE redirect_to ( assigns ( LITERAL) ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . not_to SPACE be_new_record NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) . admins ) . to SPACE eq SPACE [ controller . current_user ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) . memory_expectancy ) . not_to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE id : SPACE definition . id SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE definition NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE subject! SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE patch SPACE LITERAL, SPACE LITERAL: SPACE { SPACE id : SPACE definition . id , SPACE LITERAL: SPACE { SPACE name : SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALLITERALSPACE } , SPACE LITERAL: SPACE { SPACE LITERAL: SPACE [ LITERALLITERAL, SPACE admin . id ] SPACE } SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE redirect_to ( assigns ( LITERAL) ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . not_to SPACE be_new_record NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE delete SPACE LITERAL, SPACE LITERAL: SPACE { SPACE id : SPACE definition . id SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE redirect_to ( job_definitions_path ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE be_destroyed NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: JobInstancesController SPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE { SPACE sign_in SPACE } NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE num_instances ) SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE before SPACE { SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE render_template ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE definition NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE num_instances NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE before SPACE { SPACE post SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id SPACE } , SPACE LITERAL: SPACE true SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE redirect_to ( job_definition_job_instance_path ( definition , SPACE assigns ( LITERAL) ) ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE definition NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE post SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id , SPACE LITERAL: SPACE { SPACE LITERAL: SPACE script SPACE } SPACE } , SPACE LITERAL: SPACE true SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) . script ) . to SPACE eq SPACE script NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE instance . tokens . each SPACE do SPACE | token | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . update_column ( LITERAL, SPACE Kuroko2 :: Token :: FAILURE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE delete SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition , SPACE id : SPACE instance SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE definition . job_instances . first SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE instance . reload NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE redirect_to ( job_definition_job_instance_path ( definition , SPACE instance ) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( instance . tokens . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: JobSchedulesController SPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE { SPACE sign_in SPACE } NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE create_list ( LITERAL, SPACE LITERAL) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE schedules ) SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE be_new_record NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE schedules NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE post SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id , SPACE LITERAL: SPACE { SPACE LITERAL: SPACE LITERALSPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE delete SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id , SPACE id : SPACE schedules . first . id SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE definition . reload NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( definition . job_schedules . size ) . to SPACE be SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: JobSuspendSchedulesController SPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE { SPACE sign_in SPACE } NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE create_list ( LITERAL, SPACE LITERAL) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE schedules ) SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE be_new_record NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE schedules NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE post SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id , SPACE LITERAL: SPACE { SPACE LITERAL: SPACE LITERALSPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE delete SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id , SPACE id : SPACE schedules . first . id SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE definition . reload NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( definition . job_schedules . size ) . to SPACE be SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: JobTimelinesController SPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE create ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE instance_num , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE Kuroko2 :: Token :: FINISHED NEWLINE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE assigns ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE sign_in NEWLINE SPACE SPACE SPACE SPACE definition . job_instances . first . update! ( LITERAL: SPACE LITERAL. week . ago ) NEWLINE SPACE SPACE SPACE SPACE Kuroko2 :: Star . create! ( LITERAL: SPACE definition , SPACE LITERAL: SPACE target_user ) NEWLINE SPACE SPACE SPACE SPACE definition . text_tags SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE definition . save! NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE { SPACE get SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE render_template ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE assigns ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE get SPACE LITERAL, SPACE LITERAL: SPACE true SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE assigns ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE period SPACE } , SPACE LITERAL: SPACE true SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE target_user . id SPACE } , SPACE LITERAL: SPACE true SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE target_user NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: AdminAssignment . create! ( LITERAL: SPACE definition , SPACE LITERAL: SPACE group_user ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE group_user . id SPACE } , SPACE LITERAL: SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE group_user NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE target_user . id , SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE [ LITERAL] SPACE } , SPACE LITERAL: SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE target_user . id , SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE [ LITERAL] SPACE } , SPACE LITERAL: SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: LogsController SPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: SessionsController SPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE OmniAuth :: AuthHash . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE uid , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE name} , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE request . env [ LITERAL] SPACE = SPACE auth_hash NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE subject SPACE { SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE LITERALSPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE is_expected . to SPACE redirect_to SPACE root_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( controller . current_user . uid ) . to SPACE eq SPACE uid NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE uid ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE is_expected . to SPACE redirect_to SPACE root_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( controller . current_user . id ) . to SPACE eq SPACE user . id NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( controller . current_user . uid ) . to SPACE eq SPACE uid NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE allow ( Kuroko2 . config . app_authentication . google_oauth2 . options ) . to SPACE receive_messages ( LITERAL: SPACE configured_hd ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE auth_hash . extra . id_info . hd SPACE = SPACE configured_hd NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE redirect_to ( root_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( controller . current_user . uid ) . to SPACE eq ( uid ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE auth_hash . extra . id_info . hd SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( controller . current_user ) . to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE get SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE render_template ( LITERAL) SPACE } NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE delete SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE redirect_to ( sign_in_path ) SPACE } NEWLINE SPACE SPACE end NEWLINE NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: StarsController SPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE { SPACE sign_in SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE post SPACE LITERAL, SPACE SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id SPACE } , SPACE LITERAL: SPACE true SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE delete SPACE LITERAL, SPACE SPACE LITERAL: SPACE { SPACE LITERAL: SPACE definition . id , SPACE id : SPACE star . id SPACE } , SPACE LITERAL: SPACE true SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create SPACE LITERAL, SPACE LITERAL: SPACE controller . current_user , SPACE LITERAL: SPACE definition SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Star . exists? ( star . id ) ) . to SPACE be_falsey NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE Kuroko2 :: TokensController , SPACE LITERALSPACE = > SPACE LITERALSPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: UsersController SPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE { SPACE sign_in ( users . first ) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE create_list ( LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE get SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( assigns ( LITERAL) . to_a ) . to SPACE eq SPACE users SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE users . each SPACE { | u | SPACE u . update_attributes! ( LITERAL: SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( assigns ( LITERAL) . to_a ) . to SPACE eq SPACE users SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE job_definition . admins . first SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE get SPACE LITERAL, SPACE LITERAL: SPACE { SPACE id : SPACE user . id SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE eq SPACE user NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( assigns ( LITERAL) ) . to SPACE include SPACE job_definition NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE post ( LITERAL, SPACE SPACE LITERAL: SPACE { SPACE LITERAL: SPACE { SPACE name : SPACE name , SPACE LITERAL: SPACE email SPACE } SPACE } ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( response ) . to SPACE redirect_to ( users_path ) SPACE } NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: User :: GROUP_PROVIDER SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE name : SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE provider , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE { SPACE put ( LITERAL, SPACE SPACE LITERAL: SPACE { SPACE id : SPACE user . id , SPACE LITERAL: SPACE { SPACE name : SPACE name , SPACE LITERAL: SPACE email SPACE } SPACE } ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE user SPACE = SPACE assigns ( LITERAL) . reload NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( user . name ) . to SPACE eq ( name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( user . email ) . to SPACE eq ( email ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE redirect_to ( user_path ( user ) ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: User :: GOOGLE_OAUTH2_PROVIDER SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: User :: GROUP_PROVIDER SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE name : SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE provider , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE { SPACE delete ( LITERAL, SPACE LITERAL: SPACE { SPACE id : SPACE user . id SPACE } ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE redirect_to ( users_path ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: User . exists? ( user . id ) ) . to SPACE be_falsey NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: User :: GOOGLE_OAUTH2_PROVIDER SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response ) . to SPACE have_http_status ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE Kuroko2 :: WorkersController , SPACE LITERALSPACE = > SPACE LITERALSPACE do NEWLINE SPACE SPACE routes SPACE { SPACE Kuroko2 :: Engine . routes SPACE } NEWLINE end NEWLINE 
module SPACE ApplicationCable NEWLINE SPACE SPACE class SPACE Channel SPACE < SPACE ActionCable :: Channel :: Base NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE ApplicationCable NEWLINE SPACE SPACE class SPACE Connection SPACE < SPACE ActionCable :: Connection :: Base NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
class SPACE ApplicationController SPACE < SPACE ActionController :: Base NEWLINE SPACE SPACE protect_from_forgery SPACE LITERAL: SPACE LITERALNEWLINE end NEWLINE 
module SPACE ApplicationHelper NEWLINE end NEWLINE 
class SPACE ApplicationJob SPACE < SPACE ActiveJob :: Base NEWLINE end NEWLINE 
class SPACE ApplicationMailer SPACE < SPACE ActionMailer :: Base NEWLINE SPACE SPACE default SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE layout SPACE LITERALNEWLINE end NEWLINE 
class SPACE ApplicationRecord SPACE < SPACE ActiveRecord :: Base NEWLINE SPACE SPACE self . abstract_class SPACE = SPACE true NEWLINE end NEWLINE 
require_relative SPACE LITERALNEWLINE NEWLINE require SPACE LITERALNEWLINE NEWLINE NEWLINE NEWLINE Bundler . require ( * Rails . groups ) NEWLINE NEWLINE module SPACE Dummy NEWLINE SPACE SPACE class SPACE Application SPACE < SPACE Rails :: Application NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE NEWLINE NEWLINE SPACE SPACE SPACE SPACE config . autoload_paths SPACE << SPACE Rails . root . join ( LITERAL) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
ENV [ LITERAL] SPACE || = SPACE File . expand_path ( LITERAL, SPACE __FILE__ ) NEWLINE NEWLINE require SPACE LITERALSPACE NEWLINE 
NEWLINE require_relative SPACE LITERALNEWLINE NEWLINE NEWLINE Rails . application . initialize! NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE threads_count SPACE = SPACE ENV . fetch ( LITERALLITERALLITERAL) SPACE { SPACE LITERALSPACE } . to_i NEWLINE threads SPACE threads_count , SPACE threads_count NEWLINE NEWLINE NEWLINE NEWLINE port SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ENV . fetch ( LITERALLITERALLITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE NEWLINE NEWLINE environment SPACE ENV . fetch ( LITERALLITERALLITERAL) SPACE { SPACE LITERALLITERALLITERALSPACE } NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE plugin SPACE LITERALNEWLINE 
Rails . application . routes . draw SPACE do NEWLINE SPACE SPACE mount SPACE Kuroko2 :: Engine SPACE = > SPACE LITERALLITERALLITERALNEWLINE end NEWLINE 
LITERALLITERALLITERAL. each SPACE { SPACE | path | SPACE Spring . watch ( path ) SPACE } NEWLINE 
Rails . application . configure SPACE do NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . cache_classes SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . eager_load SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . consider_all_requests_local SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE if SPACE Rails . root . join ( LITERAL) . exist? NEWLINE SPACE SPACE SPACE SPACE config . action_controller . perform_caching SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE SPACE SPACE config . cache_store SPACE = SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE config . public_file_server . headers SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE else NEWLINE SPACE SPACE SPACE SPACE config . action_controller . perform_caching SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE SPACE SPACE config . cache_store SPACE = SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_mailer . raise_delivery_errors SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE config . action_mailer . perform_caching SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_support . deprecation SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_record . migration_error SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . debug SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . quiet SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE end NEWLINE 
Rails . application . configure SPACE do NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . cache_classes SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . eager_load SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . consider_all_requests_local SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE false NEWLINE SPACE SPACE config . action_controller . perform_caching SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . public_file_server . enabled SPACE = SPACE ENV [ LITERAL] . present? NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . js_compressor SPACE = SPACE LITERALNEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . assets . compile SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . log_level SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . log_tags SPACE = SPACE [ SPACE LITERALSPACE ] NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_mailer . perform_caching SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . i18n . fallbacks SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_support . deprecation SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . log_formatter SPACE = SPACE :: Logger :: Formatter . new NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE if SPACE ENV [ LITERALLITERALLITERAL] . present? NEWLINE SPACE SPACE SPACE SPACE logger SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE ActiveSupport :: Logger . new ( STDOUT ) NEWLINE SPACE SPACE SPACE SPACE logger . formatter SPACE = SPACE config . log_formatter NEWLINE SPACE SPACE SPACE SPACE config . logger SPACE = SPACE ActiveSupport :: TaggedLogging . new ( logger ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_record . dump_schema_after_migration SPACE = SPACE false NEWLINE end NEWLINE 
Rails . application . configure SPACE do NEWLINE SPACE SPACE NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . cache_classes SPACE = SPACE true NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . eager_load SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . public_file_server . enabled SPACE = SPACE true NEWLINE SPACE SPACE config . public_file_server . headers SPACE = SPACE { NEWLINE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE LITERALNEWLINE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . consider_all_requests_local SPACE SPACE SPACE SPACE SPACE SPACE SPACE = SPACE true NEWLINE SPACE SPACE config . action_controller . perform_caching SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_dispatch . show_exceptions SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_controller . allow_forgery_protection SPACE = SPACE false NEWLINE SPACE SPACE config . action_mailer . perform_caching SPACE = SPACE false NEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . action_mailer . delivery_method SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE config . active_support . deprecation SPACE = SPACE LITERALNEWLINE NEWLINE SPACE SPACE NEWLINE SPACE SPACE NEWLINE end NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE Rails . application . config . assets . version SPACE = SPACE LITERALNEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE Rails . application . config . action_dispatch . cookies_serializer SPACE = SPACE LITERALNEWLINE 
NEWLINE NEWLINE NEWLINE Rails . application . config . filter_parameters SPACE += SPACE [ LITERAL] NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE Rails . application . config . action_controller . per_form_csrf_tokens SPACE = SPACE false NEWLINE NEWLINE NEWLINE Rails . application . config . action_controller . forgery_protection_origin_check SPACE = SPACE false NEWLINE NEWLINE NEWLINE NEWLINE ActiveSupport . to_time_preserves_timezone SPACE = SPACE false NEWLINE NEWLINE NEWLINE Rails . application . config . active_record . belongs_to_required_by_default SPACE = SPACE false NEWLINE NEWLINE NEWLINE ActiveSupport . halt_callback_chains_on_return_false SPACE = SPACE true NEWLINE 
NEWLINE NEWLINE Rails . application . config . session_store SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE ActiveSupport . on_load ( LITERAL) SPACE do NEWLINE SPACE SPACE wrap_parameters SPACE format : SPACE [ LITERAL] NEWLINE end NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE 
NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE NEWLINE ActiveRecord :: Schema . define ( LITERAL: SPACE LITERAL) SPACE do NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . boolean SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false , SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . boolean SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE true , SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . boolean SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE true , SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . boolean SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false , SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE LITERAL: SPACE LITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . text SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE create_table SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALSPACE do SPACE | t | NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . string SPACE SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . boolean SPACE SPACE LITERALLITERALLITERAL, SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false , SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE false NEWLINE SPACE SPACE SPACE SPACE t . integer SPACE SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . datetime SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE t . index SPACE [ LITERALLITERALLITERAL, SPACE LITERALLITERALLITERAL] , SPACE name : SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE end NEWLINE 
module SPACE DummyExtention NEWLINE SPACE SPACE extend SPACE ActiveSupport :: Concern NEWLINE SPACE SPACE included SPACE do NEWLINE SPACE SPACE SPACE SPACE before_action SPACE LITERALNEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE private NEWLINE NEWLINE SPACE SPACE def SPACE additional_before_action NEWLINE SPACE SPACE SPACE SPACE if SPACE signed_in? NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE Kuroko2 NEWLINE SPACE SPACE module SPACE Workflow NEWLINE SPACE SPACE SPACE SPACE module SPACE Task NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE class SPACE CustomTask1 SPACE < SPACE Base NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE def SPACE execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 . logger . info ( LITERALLITERALLITERALtoken . uuid LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: ExecutionLogger :: CloudWatchLogs SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE described_class . new ( LITERAL: SPACE stream_name , SPACE LITERAL: SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE allow ( Aws :: CloudWatchLogs :: Client ) . to SPACE receive ( LITERAL) . and_return ( double ( LITERAL) ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE [ { SPACE LITERAL: SPACE Time . current . to_i SPACE * SPACE LITERAL, SPACE LITERAL: SPACE LITERALSPACE } ] SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE double ( LITERAL, SPACE LITERAL: SPACE { SPACE LITERAL: SPACE LITERALSPACE } ) } NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE stream_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE events , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE nil , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( object . client ) . to SPACE receive ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with ( send_parameters ) . and_return ( response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( object . put_logs ( events ) ) . to SPACE eq ( response ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exception SPACE = SPACE Aws :: CloudWatchLogs :: Errors :: InvalidSequenceTokenException . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE allow ( object . client ) . to SPACE receive ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with ( send_parameters ) . and_raise ( exception ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( object . client ) . to SPACE receive ( LITERAL) . with ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE stream_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE events , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) . and_return ( response ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( object . put_logs ( events ) ) . to SPACE eq ( response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE exception SPACE = SPACE Aws :: CloudWatchLogs :: Errors :: ResourceNotFoundException . new ( LITERAL, SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE allow ( object . client ) . to SPACE receive ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with ( send_parameters ) . and_raise ( exception ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( object . client ) . to SPACE receive ( LITERAL) . with ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE stream_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE allow ( object . client ) . to SPACE receive ( LITERAL) . with ( send_parameters ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE and_return ( response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( object . put_logs ( events ) ) . to SPACE eq ( response ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE double ( LITERAL, SPACE LITERAL: SPACE next_token ) } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE double ( LITERAL, SPACE LITERAL: SPACE LITERAL) } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( object . client ) . to SPACE receive ( LITERAL) . with ( { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE stream_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE nil , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE true , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } ) . and_return ( response ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( object . get_logs ) . to SPACE eq ( response ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( object . client ) . to SPACE receive ( LITERAL) . with ( { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE stream_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE next_token , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE true , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } ) . and_return ( response2 ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( object . get_logs ) . to SPACE eq ( response2 ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE Kuroko2 :: Execution SPACE do NEWLINE SPACE SPACE SPACE SPACE shell SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE exit_status SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE job_definition SPACE { SPACE token . job_definition SPACE if SPACE token SPACE } NEWLINE SPACE SPACE SPACE SPACE job_instance SPACE { SPACE token . job_instance SPACE if SPACE token SPACE } NEWLINE SPACE SPACE SPACE SPACE context SPACE { SPACE token . context SPACE if SPACE token SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE started_at SPACE { SPACE Time . current SPACE } NEWLINE SPACE SPACE SPACE SPACE finished_at SPACE { SPACE Time . current SPACE } NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE Kuroko2 :: JobDefinition SPACE do NEWLINE SPACE SPACE SPACE SPACE name SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE description SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE script SPACE LITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE admins SPACE { SPACE build_list ( LITERAL, SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE prevent_multi SPACE false NEWLINE SPACE SPACE SPACE SPACE memory_expectancy SPACE { SPACE create_memory_expectancy! SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE factory SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE transient SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job_instances_count SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job_instances_token_status SPACE Kuroko2 :: Token :: WORKING NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE after ( LITERAL) SPACE do SPACE | job_definition , SPACE evaluator | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create_list ( LITERAL, SPACE evaluator . job_instances_count , SPACE LITERAL: SPACE job_definition ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE Kuroko2 :: JobInstance SPACE do NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE Kuroko2 :: JobSchedule SPACE do NEWLINE SPACE SPACE SPACE SPACE sequence ( LITERAL) SPACE do SPACE | n | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE hour SPACE = SPACE n SPACE > SPACE LITERALSPACE ? SPACE ( n SPACE / SPACE LITERAL) SPACE : SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE day SPACE SPACE = SPACE n SPACE > SPACE LITERALSPACE * SPACE LITERALSPACE ? SPACE n SPACE / SPACE LITERALSPACE % SPACE LITERALSPACE : SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALn SPACE % SPACE LITERALLITERALLITERALLITERALhour LITERALLITERALLITERALday LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE Kuroko2 :: JobSuspendSchedule SPACE do NEWLINE SPACE SPACE SPACE SPACE sequence ( LITERAL) SPACE do SPACE | n | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE hour SPACE = SPACE n SPACE / SPACE LITERALSPACE > = SPACE LITERALSPACE ? SPACE ( n SPACE / SPACE LITERAL) SPACE : SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALn SPACE % SPACE LITERALLITERALLITERALLITERALhour LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE Kuroko2 :: MemoryExpectancy SPACE do NEWLINE SPACE SPACE SPACE SPACE expected_value SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE Kuroko2 :: ProcessSignal SPACE do NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE Kuroko2 :: Star SPACE do NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE Kuroko2 :: Tick SPACE do NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE Kuroko2 :: Token SPACE do NEWLINE SPACE SPACE SPACE SPACE uuid SPACE { SPACE SecureRandom . uuid SPACE } NEWLINE SPACE SPACE SPACE SPACE path SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE script SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE context SPACE { SPACE Hash . new SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE job_definition SPACE { SPACE job_instance . job_definition SPACE if SPACE job_instance SPACE } NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE Kuroko2 :: User SPACE do NEWLINE SPACE SPACE SPACE SPACE sequence ( LITERAL) SPACE { SPACE | n | SPACE LITERALLITERALn LITERALLITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE name SPACE { SPACE LITERALLITERALLITERALuid LITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE email SPACE { SPACE LITERALLITERALuid LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE first_name SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE last_name SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE image SPACE LITERALNEWLINE SPACE SPACE end NEWLINE end NEWLINE 
FactoryGirl . define SPACE do NEWLINE SPACE SPACE factory SPACE LITERAL, SPACE LITERAL: SPACE Kuroko2 :: Worker SPACE do NEWLINE SPACE SPACE SPACE SPACE hostname SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE sequence ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE queue SPACE LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE working SPACE true NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALSPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE sign_in ( user ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE job_definition , SPACE LITERAL: SPACE user ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE visit SPACE kuroko2_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( job_definition . name ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_title ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job_definition . job_instances . create NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE visit SPACE kuroko2_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . not_to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE context SPACE LITERAL, SPACE LITERAL: SPACE true SPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL. times . each SPACE do SPACE | i | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE create ( LITERAL) . tap SPACE { SPACE | d | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE d . text_tags SPACE = SPACE LITERALLITERALcommon_tag LITERALLITERALLITERALi LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE d . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE user NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE visit SPACE kuroko2_path NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( common_tag ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL. times . each SPACE do SPACE | i | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERALLITERALLITERALi LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE visit SPACE kuroko2_path NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( common_tag ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE within SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE click_on ( common_tag ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE wait_for_ajax NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE within SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE click_on ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE wait_for_ajax NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE within SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE click_on ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE wait_for_ajax NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALSPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE sign_in ( user ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE it SPACE LITERAL, SPACE LITERAL: SPACE true SPACE do NEWLINE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . root_path NEWLINE NEWLINE SPACE SPACE SPACE SPACE within SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE it SPACE LITERAL, SPACE LITERAL: SPACE true SPACE do NEWLINE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . root_path NEWLINE NEWLINE SPACE SPACE SPACE SPACE within SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE within SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE within SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALSPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE create ( LITERAL) . tap SPACE do SPACE | d | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE d . admins SPACE << SPACE user NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE d . save! NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE job_definition . job_instances . first . tokens . first SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Engine . new SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE sign_in ( user ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE it SPACE LITERAL, SPACE LITERAL: SPACE true SPACE do NEWLINE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . job_definition_path ( job_definition ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( job_definition . name ) NEWLINE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE true ) NEWLINE SPACE SPACE SPACE SPACE within SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . working_job_instances_path NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( job_definition . name ) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . job_definition_job_instance_path ( job_definition , SPACE job_definition . job_instances . first ) NEWLINE SPACE SPACE SPACE SPACE until SPACE token . status SPACE == SPACE Kuroko2 :: Token :: FINISHED NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE workflow . process ( token ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE sleep ( LITERAL) SPACE NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE job_definition . job_instances . create NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE workflow . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE token . job_instance . touch ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE token . mark_as_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE token . save! NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERAL, SPACE LITERAL: SPACE true SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . job_definition_job_instance_path ( job_definition , SPACE job_definition . job_instances . first ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE click_on ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE sleep ( LITERAL) SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERAL, SPACE LITERAL: SPACE true SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . job_definition_job_instance_path ( job_definition , SPACE job_definition . job_instances . first ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE click_on ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE token . reload NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE until SPACE token . status SPACE == SPACE Kuroko2 :: Token :: FINISHED NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE workflow . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE sleep ( LITERAL) SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERAL, SPACE LITERAL: SPACE true SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . job_definition_job_instance_path ( job_definition , SPACE job_definition . job_instances . first ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE within SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE click_on ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE sleep ( LITERAL) SPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALSPACE do NEWLINE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE mock_omni_auth_google_oauth2 NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE visit SPACE kuroko2_path NEWLINE SPACE SPACE SPACE SPACE click_on ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page . current_path ) . to SPACE eq ( kuroko2_path ) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE click_on ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALSPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE sign_in ( user ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . users_path NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( user . name ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE click_on ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERALLITERALLITERALuser . id LITERALLITERALLITERALuser . name LITERALLITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . users_path NEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( user . name ) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE within SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE click_on SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . users_path ( LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE click_on ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE click_on ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE fill_in SPACE LITERAL, SPACE LITERAL: SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE click_on ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE context SPACE LITERAL, SPACE LITERAL: SPACE true SPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL. times . each SPACE do SPACE | i | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL) . tap SPACE do SPACE | d | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE d . text_tags SPACE = SPACE LITERALLITERALcommon_tag LITERALLITERALLITERALi LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE d . admins SPACE << SPACE user NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE d . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . user_path ( user . id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( common_tag ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL. times . each SPACE do SPACE | i | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERALLITERALLITERALi LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . user_path ( user . id ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( common_tag ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE within SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE click_on ( common_tag ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE wait_for_ajax NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE within SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE click_on ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE wait_for_ajax NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE within SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE click_on ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE wait_for_ajax NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE user . assigned_job_definitions . first . job_instances . create NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . user_path ( user . id ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . not_to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE LITERALLITERALLITERAL, SPACE LITERAL: SPACE LITERALSPACE do NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE <<- LITERALLITERALLITERAL. strip_heredoc ) NEWLINE LITERALLITERALSPACE SPACE end NEWLINE NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Command :: Shell . new ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE worker ) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE job_definition . job_instances . first . tokens . first SPACE } NEWLINE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Engine . new SPACE } NEWLINE NEWLINE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE workflow . process ( token ) NEWLINE SPACE SPACE SPACE SPACE workflow . process ( token ) NEWLINE SPACE SPACE SPACE SPACE sign_in ( user ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE it SPACE LITERAL, SPACE LITERAL: SPACE true SPACE do NEWLINE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . workers_path NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . not_to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_title ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE worker . update_column ( LITERAL, SPACE token . execution . id ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . workers_path NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE worker . update_column ( LITERAL, SPACE token . execution . id ) NEWLINE SPACE SPACE SPACE SPACE token . execution . finish ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE worker . update_column ( LITERAL, SPACE nil ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE visit SPACE kuroko2 . workers_path NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . not_to SPACE have_content ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE expect ( page ) . to SPACE have_selector ( LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: ExecutionsHelper SPACE do NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: JobDefinitionsHelper SPACE do NEWLINE SPACE SPACE include SPACE Kuroko2 :: Engine . routes . url_helpers NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject SPACE { SPACE first_line ( text ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE <<- LITERALLITERALLITERAL. strip_heredoc NEWLINE LITERALLITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE eq SPACE line SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE line SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE eq SPACE line SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject SPACE { SPACE markdown_format ( text ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE <<- LITERALLITERALLITERAL. strip_heredoc NEWLINE LITERALLITERALLITERALSPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE match SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE match SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject SPACE { SPACE format_kuroko_script ( text ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE <<- LITERALLITERALLITERAL. strip_heredoc NEWLINE LITERALLITERALLITERALSPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( subject ) . to SPACE eq ( <<- LITERALLITERALLITERAL. strip_heredoc ) NEWLINE LITERALLITERALLITERALSPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: JobSchedulesHelper SPACE do NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: LogsHelper SPACE do NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: TokensHelper SPACE do NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: UsersHelper SPACE do NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: WorkersHelper SPACE do NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: Notifications SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE name : SPACE job_name ) . job_instances . first SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE instance . job_definition SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE definition . admins SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Notifications . job_failure ( instance ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mail . subject ) . to SPACE eq SPACE LITERALLITERALLITERALjob_name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mail . to ) . to SPACE eq ( admins . map ( & LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mail . from ) . to SPACE eq ( [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mail . body . encoded ) . to SPACE match ( LITERALLITERALLITERALjob_name LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Notifications . remind_failure ( instance ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE instance . error_at SPACE = SPACE LITERAL. days . ago NEWLINE SPACE SPACE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mail . subject ) . to SPACE eq SPACE LITERALLITERALLITERALjob_name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mail . to ) . to SPACE eq ( admins . map ( & LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mail . from ) . to SPACE eq ( [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mail . body . encoded ) . to SPACE match ( LITERALLITERALLITERALjob_name LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Notifications . notify_long_elapsed_time ( instance ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mail . subject ) . to SPACE eq SPACE LITERALLITERALLITERALdefinition . name LITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mail . to ) . to SPACE eq ( admins . map ( & LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mail . from ) . to SPACE eq ( [ LITERAL] ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( mail . body . encoded ) . to SPACE match ( LITERALLITERALLITERALjob_name LITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: AdminAssignment SPACE do NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: Execution SPACE do NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject SPACE { SPACE Kuroko2 :: Execution . poll SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE token , SPACE LITERAL: SPACE nil ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE eq SPACE execution SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject SPACE { SPACE Kuroko2 :: Execution . poll ( queue ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE token , SPACE LITERAL: SPACE nil , SPACE LITERAL: SPACE queue ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE eq SPACE execution SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: JobDefinition SPACE do NEWLINE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject SPACE { SPACE definition . destroy SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE Kuroko2 :: Token . destroy_all SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_falsey SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token . destroy_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE definition . job_schedules . create ( LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE is_expected . to SPACE be_truthy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: JobSchedule . all . size ) . to SPACE be_zero NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE prevent_multi , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE subject SPACE { SPACE definition . proceed_multi_instance? SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_falsey SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token . where ( LITERAL: SPACE definition . id ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_all ( LITERAL: SPACE Kuroko2 :: Token :: FAILURE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_falsey SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token . where ( LITERAL: SPACE definition . id ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_all ( LITERAL: SPACE Kuroko2 :: Token :: FINISHED ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_falsey SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token . where ( LITERAL: SPACE definition . id ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_all ( LITERAL: SPACE Kuroko2 :: Token :: FAILURE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token . where ( LITERAL: SPACE definition . id ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_all ( LITERAL: SPACE Kuroko2 :: Token :: FINISHED ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token . where ( LITERAL: SPACE definition . id ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_all ( LITERAL: SPACE Kuroko2 :: Token :: FAILURE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_falsey SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token . where ( LITERAL: SPACE definition . id ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_all ( LITERAL: SPACE Kuroko2 :: Token :: FINISHED ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token . where ( LITERAL: SPACE definition . id ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_all ( LITERAL: SPACE Kuroko2 :: Token :: FAILURE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_falsey SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token . where ( LITERAL: SPACE definition . id ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_all ( LITERAL: SPACE Kuroko2 :: Token :: FINISHED ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token . where ( LITERAL: SPACE definition . id ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_all ( LITERAL: SPACE Kuroko2 :: Token :: FAILURE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token . where ( LITERAL: SPACE definition . id ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE update_all ( LITERAL: SPACE Kuroko2 :: Token :: FINISHED ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: JobInstance SPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Log . take SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE instance . logs . info ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( log . level ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE definition . job_instances . create! SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( instance . tokens . count ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( instance . reload . tokens . count ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( instance . tokens . first . script ) . to SPACE eq SPACE instance . job_definition . script NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE definition . job_instances . create! ( LITERAL: SPACE script ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( instance . tokens . count ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( instance . tokens . first . script ) . to SPACE eq SPACE script NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE definition . job_instances . create! SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE instance . cancel ( LITERAL: SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( instance ) . to SPACE be_canceled_at NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( instance . tokens . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( instance . executions . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ActionMailer :: Base . deliveries . clear NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE definition ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE definition . job_instances . create SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE false , SPACE LITERAL: SPACE true ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( ActionMailer :: Base . deliveries ) . to SPACE be_empty SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE true , SPACE LITERAL: SPACE true ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( ActionMailer :: Base . deliveries ) . not_to SPACE be_empty SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE finished_at , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE SPACE SPACE SPACE error_at , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE SPACE SPACE SPACE canceled_at , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE definition , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE nil SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE SPACE SPACE SPACE { SPACE nil SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE nil SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . current SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( instance . status ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . current SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( instance . status ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . current SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( instance . status ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( instance . status ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: JobSchedule SPACE do NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: JobSchedule . new ( LITERAL: SPACE LITERAL) ) . to SPACE be_valid NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: JobSchedule . new ( LITERAL: SPACE LITERAL) ) . to SPACE be_valid NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: JobSchedule . new ( LITERAL: SPACE LITERAL) ) . not_to SPACE be_valid NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: JobSchedule . new ( LITERAL: SPACE LITERAL) ) . not_to SPACE be_valid NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE cron ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( schedule . next ( time ) ) . to SPACE eq ( Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( schedule . next ( time ) ) . to SPACE eq ( Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( schedule . next ( time ) ) . to SPACE be_nil NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE xit SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( schedule . next ( time ) ) . to SPACE eq ( Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE Kuroko2 :: JobSchedule . launch_scheduled_jobs! ( time_from , SPACE time_to ) SPACE } . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE not_to SPACE change SPACE { SPACE Kuroko2 :: JobInstance . count SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE Kuroko2 :: JobSchedule . launch_scheduled_jobs! ( time_from , SPACE time_to ) SPACE } . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to SPACE change SPACE { SPACE Kuroko2 :: JobInstance . count SPACE } . from ( LITERAL) . to ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE definition . update! ( LITERAL: SPACE true ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE Kuroko2 :: JobSchedule . launch_scheduled_jobs! ( time_from , SPACE time_to ) SPACE } . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE not_to SPACE change SPACE { SPACE Kuroko2 :: JobInstance . count SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE definition ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE SPACE SPACE { SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE Kuroko2 :: JobSchedule . launch_scheduled_jobs! ( time_from , SPACE time_to ) SPACE } . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE not_to SPACE change SPACE { SPACE Kuroko2 :: JobInstance . count SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE SPACE SPACE { SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE Kuroko2 :: JobSchedule . launch_scheduled_jobs! ( time_from , SPACE time_to ) SPACE } . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to SPACE change SPACE { SPACE Kuroko2 :: JobInstance . count SPACE } . from ( LITERAL) . to ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: JobSuspendSchedule SPACE do NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: JobSuspendSchedule . new ( LITERAL: SPACE LITERAL) ) . to SPACE be_valid NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: JobSuspendSchedule . new ( LITERAL: SPACE LITERAL) ) . to SPACE be_valid NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: JobSuspendSchedule . new ( LITERAL: SPACE LITERAL) ) . not_to SPACE be_valid NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: JobSuspendSchedule . new ( LITERAL: SPACE LITERAL) ) . not_to SPACE be_valid NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( suspend_schedule . suspend_times ( time_from , SPACE time_to ) ) . to SPACE eq ( [ NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Time . new ( LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL, SPACE LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ] ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE Kuroko2 :: MemoryConsumptionLog SPACE do NEWLINE SPACE SPACE around SPACE { | example | SPACE Timecop . freeze ( Time . current ) SPACE { SPACE example . run SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE described_class :: Interval SPACE do NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE described_class . new ( base , SPACE count ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . current SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERAL. seconds . since . to_time SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( interval . reached? ( now ) ) . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERAL. minutes . since . to_time SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( interval . reached? ( now ) ) . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERAL. minutes . since . to_time SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( interval . reached? ( now ) ) . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE a SPACE = SPACE described_class . new ( Time . current ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE b SPACE = SPACE a . next NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( b ) . to SPACE be_a ( described_class ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE diff SPACE = SPACE b . count SPACE - SPACE a . count NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( diff ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE a SPACE = SPACE described_class . new ( Time . current , SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( a . reached? ( LITERAL. minutes . since . to_time ) ) . to SPACE be_falsy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( a . reached? ( LITERAL. minutes . since . to_time ) ) . to SPACE be_truthy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE b SPACE = SPACE a . next NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( b . reached? ( LITERAL. minutes . since . to_time ) ) . to SPACE be_falsy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( b . reached? ( LITERAL. minutes . since . to_time ) ) . to SPACE be_truthy NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE RSpec . describe SPACE Kuroko2 :: MemoryExpectancy SPACE do NEWLINE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition ) SPACE } NEWLINE SPACE SPACE let! ( LITERAL) SPACE { SPACE described_class . create! ( LITERAL: SPACE definition ) SPACE } NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE { SPACE ( LITERAL.. LITERAL) . each SPACE { | i | SPACE instance . log_memory_consumption ( i ) SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( expectancy . expected_value ) . to SPACE eq ( described_class :: DEFAULT_VALUE ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expectancy . calculate! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( expectancy . reload . expected_value ) . not_to SPACE eq ( described_class :: DEFAULT_VALUE ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE { SPACE ( LITERAL.. LITERAL) . each SPACE { | i | SPACE instance . log_memory_consumption ( i ) SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expectancy . calculate! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( expectancy . expected_value ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: Star SPACE do NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: Tick SPACE do NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . at ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . at ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Tick . fetch_then_update ( now ) ) . to SPACE eq SPACE now NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Tick . first . at ) . to SPACE eq SPACE now NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE prev_now ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Tick . fetch_then_update ( now ) ) . to SPACE eq SPACE prev_now NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Tick . first . at ) . to SPACE eq SPACE now NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: Token SPACE do NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject! SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE Kuroko2 :: Token :: WORKING ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . not_to SPACE be_cancelable SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject! SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE Kuroko2 :: Token :: FINISHED ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . not_to SPACE be_cancelable SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject! SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE Kuroko2 :: Token :: FAILURE ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_cancelable SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject! SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE Kuroko2 :: Token :: CRITICAL ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . not_to SPACE be_cancelable SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE subject! ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE Kuroko2 :: Token :: WORKING ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE parent . id , SPACE LITERAL: SPACE Kuroko2 :: Token :: WORKING ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE parent . id , SPACE LITERAL: SPACE Kuroko2 :: Token :: WORKING ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . not_to SPACE be_cancelable SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE parent . id , SPACE LITERAL: SPACE Kuroko2 :: Token :: WORKING ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE parent . id , SPACE LITERAL: SPACE Kuroko2 :: Token :: FAILURE ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . not_to SPACE be_cancelable SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE parent . id , SPACE LITERAL: SPACE Kuroko2 :: Token :: FINISHED ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE parent . id , SPACE LITERAL: SPACE Kuroko2 :: Token :: FAILURE ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_cancelable SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE status ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Token :: FAILURE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_skippable SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Token :: WAITING SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_skippable SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Token :: WORKING SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . not_to SPACE be_skippable SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALLITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject! SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE status ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Token :: FAILURE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_retryable SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Token :: WAITING SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . not_to SPACE be_retryable SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Token :: WORKING SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . not_to SPACE be_retryable SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: User SPACE do NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE subject SPACE { SPACE user . google_account? SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_truthy SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE be_falsey SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE Kuroko2 :: Worker SPACE do NEWLINE NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE SPACE SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE { SPACE JSON . parse ( response . body ) SPACE } NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERALLITERALLITERALBase64 . encode64 ( LITERALLITERALservice_name LITERALLITERALLITERALsecret_key LITERALLITERAL) LITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE end NEWLINE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE true ) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE nil , SPACE LITERAL: SPACE nil , SPACE LITERAL: SPACE nil ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERALLITERALLITERALdefinition . id LITERALLITERALLITERALinstance . id LITERALLITERAL, SPACE LITERAL: SPACE { } , SPACE LITERAL: SPACE env NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response . status ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( result ) . to SPACE eq ( { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE SPACE SPACE SPACE SPACE = > SPACE instance . id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE Time . current , SPACE LITERAL: SPACE nil , SPACE LITERAL: SPACE nil ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERALLITERALLITERALdefinition . id LITERALLITERALLITERALinstance . id LITERALLITERAL, SPACE LITERAL: SPACE { } , SPACE LITERAL: SPACE env NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response . status ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( result ) . to SPACE eq ( { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE SPACE SPACE SPACE SPACE = > SPACE instance . id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE { } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE post SPACE LITERALLITERALLITERALdefinition . id LITERALLITERALLITERAL, SPACE LITERAL: SPACE params , SPACE LITERAL: SPACE env NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } . to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE definition . job_instances . count NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } . by ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( definition . job_instances . last . script ) . to SPACE eq ( definition . script ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( result ) . to SPACE match ( { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE a_kind_of ( Integer ) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALSPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { SPACE LITERALSPACE = > SPACE LITERAL, SPACE LITERALSPACE = > SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE { SPACE LITERAL: SPACE env_vars SPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE post SPACE LITERALLITERALLITERALdefinition . id LITERALLITERALLITERAL, SPACE LITERAL: SPACE params , SPACE LITERAL: SPACE env NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE definition . job_instances . count NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . by ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( definition . job_instances . last . script ) . to SPACE eq ( <<- LITERALLITERALLITERAL. strip_heredoc . rstrip ) NEWLINE LITERALLITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE false ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE post SPACE LITERALLITERALLITERALdefinition . id LITERALLITERALLITERAL, SPACE LITERAL: SPACE params , SPACE LITERAL: SPACE env NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . to_not SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE definition . job_instances . count NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response . status ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE create ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE create ( LITERAL) ) . touch ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response . status ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE result SPACE = SPACE JSON . parse ( response . body ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( result ) . to SPACE eq ( { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE create ( LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE create ( LITERAL) , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE nil , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE LITERAL. minutes . ago , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE get SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( response . status ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE result SPACE = SPACE JSON . parse ( response . body ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE expect ( result ) . to SPACE eq ( { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALworker . queue LITERALLITERALSPACE = > SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE FeatureSignInHelper NEWLINE SPACE SPACE def SPACE sign_in ( user SPACE = SPACE create ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE mock_omni_auth_google_oauth2 ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE user . uid , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE name : SPACE user . name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE user . first_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE user . last_name , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE user . email , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE user . image , NEWLINE SPACE SPACE SPACE SPACE ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE visit SPACE kuroko2_path NEWLINE SPACE SPACE SPACE SPACE click_on ( LITERAL) NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE mock_omni_auth_google_oauth2 ( options SPACE = SPACE { } ) NEWLINE SPACE SPACE SPACE SPACE OmniAuth . config . mock_auth [ LITERAL] SPACE = SPACE OmniAuth :: AuthHash . new ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE options [ LITERAL] SPACE || SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE name : SPACE options [ LITERAL] SPACE || SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE options [ LITERAL] SPACE || SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE options [ LITERAL] SPACE || SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE options [ LITERAL] SPACE || SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE options [ LITERAL] SPACE || SPACE LITERALLITERALLITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE options [ LITERAL] SPACE || SPACE LITERAL. month . since . to_i , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE ) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE SignInHelper NEWLINE SPACE SPACE def SPACE sign_in ( user SPACE = SPACE create ( LITERAL) ) NEWLINE SPACE SPACE SPACE SPACE controller . instance_variable_set ( LITERAL, SPACE user ) NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
module SPACE WaitForAjax NEWLINE SPACE SPACE def SPACE wait_for_ajax NEWLINE SPACE SPACE SPACE SPACE Timeout . timeout ( Capybara . default_max_wait_time ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE loop SPACE until SPACE finished_all_ajax_requests? NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE def SPACE finished_all_ajax_requests? NEWLINE SPACE SPACE SPACE SPACE page . evaluate_script ( LITERAL) . zero? NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow NEWLINE SPACE SPACE describe SPACE Engine SPACE do NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Command :: Shell . new ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE worker ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE definition . job_instances . first . tokens . first SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE <<- LITERALLITERALLITERAL. strip_heredoc ) NEWLINE LITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE specify SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . path ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . path ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token ) . to SPACE be_finished NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Token . all . count ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE <<- LITERALLITERALLITERAL. strip_heredoc ) NEWLINE LITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE specify SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE shell . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token ) . to SPACE be_finished NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Token . all . count ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE <<- LITERALLITERALLITERAL. strip_heredoc ) NEWLINE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE specify SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . path ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . children . size ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE noop1 , SPACE noop2 , SPACE sequence SPACE = SPACE token . children NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ token , SPACE noop1 , SPACE noop2 , SPACE sequence ] . each ( & LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop1 . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop2 . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( sequence . path ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ token , SPACE noop1 , SPACE noop2 , SPACE sequence ] . each ( & LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop1 . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop2 . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( sequence . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop1 . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop2 . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( sequence . status_name ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ token , SPACE noop1 , SPACE noop2 , SPACE sequence ] . each ( & LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop1 . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop2 . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( sequence . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop1 . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop2 . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( sequence . status_name ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE [ token , SPACE noop1 , SPACE noop2 , SPACE sequence ] . each ( & LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop1 . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop2 . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( sequence . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop1 . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( noop2 . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( sequence . status_name ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . reload NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . path ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . status_name ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process_all NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Token . all . count ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE <<- LITERALLITERALLITERAL. strip_heredoc ) NEWLINE LITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALProcess . pid LITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE after SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE FileUtils . safe_unlink ( tmpfile ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE specify SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE shell . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . status_name ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE FileUtils . touch ( tmpfile ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . retry ( token ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE shell . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Token . all . count ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE <<- LITERALLITERALLITERAL. strip_heredoc ) NEWLINE LITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE specify SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE shell . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . status_name ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . skip ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Token . all . count ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE <<- LITERALLITERALLITERAL. strip_heredoc ) NEWLINE LITERALLITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE specify SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE shell . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE shell . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Token . all . count ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE <<- LITERALLITERALLITERAL. strip_heredoc ) NEWLINE LITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE specify SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . status_name ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wait_definition . job_instances . first . touch ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject . process ( token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . status_name ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow NEWLINE SPACE SPACE describe SPACE Node SPACE do NEWLINE SPACE SPACE SPACE SPACE around SPACE do SPACE | example | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Node . register ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE Task :: Base ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Node . register ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE Task :: Base ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Node . register ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE Task :: Base ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Node . register ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE Task :: Base ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE example . run NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Node . deregister ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Node . deregister ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Node . deregister ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Node . deregister ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE let! ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Node . new ( LITERAL) . tap SPACE do SPACE | root | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE root . append_child ( node1 ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE root . append_child ( node2 ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE node1 . append_child ( node1_1 ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE node1 . append_child ( node1_2 ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Node . new ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Node . new ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Node . new ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Node . new ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( root . find ( LITERAL) ) . to SPACE eq SPACE node1 SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( root . find ( LITERAL) ) . to SPACE eq SPACE node1_1 SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( root . find ( LITERAL) ) . to SPACE eq SPACE node1_2 SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( root . find ( LITERAL) ) . to SPACE eq SPACE node2 SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect SPACE { SPACE root . find ( LITERAL) SPACE } . to SPACE raise_error ( AssertionError ) SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( root . next ) . to SPACE eq SPACE node1 SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( node1 . next ) . to SPACE eq SPACE node1_1 SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( node1_1 . next ) . to SPACE eq SPACE node1_2 SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( node1_2 . next ) . to SPACE eq SPACE node2 SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( node2 . next ) . to SPACE be_nil SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( root . path ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( node1 . path ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( node1_1 . path ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( node1_2 . path ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( node2 . path ) . to SPACE eq SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( node1 . to_script ) . to SPACE eq SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow NEWLINE SPACE SPACE describe SPACE ScriptParser SPACE do NEWLINE SPACE SPACE SPACE SPACE subject ( LITERAL) SPACE { SPACE ScriptParser . new ( script ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE parser . parse SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE around SPACE do SPACE | example | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Node . register ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE Task :: Base ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Node . register ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE Task :: Base ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Node . register ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE Task :: Base ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Node . register ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE Task :: Base ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE example . run NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Node . deregister ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Node . deregister ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Node . deregister ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Node . deregister ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE <<- LITERALLITERALLITERALNEWLINE LITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( root . children . size ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE task1 SPACE = SPACE root . children . first NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( task1 . type ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( task1 . children . size ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE task2 SPACE = SPACE task1 . children . first NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( task2 . type ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( task2 . option ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE task3 SPACE = SPACE root . children . second NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( task3 . type ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( task3 . option ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE task4 SPACE = SPACE root . children . third NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( task4 . type ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( task4 . option ) . to SPACE eq SPACE LITERALLITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE <<- LITERALLITERALLITERALNEWLINE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( root . children . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( root . children . first . children . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( root . children . first . children . first . children . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( root . children . first . children . second . children . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect SPACE { SPACE root SPACE } . to SPACE raise_error ( Kuroko2 :: Workflow :: SyntaxError ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE <<- LITERALLITERALLITERALNEWLINE LITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect SPACE { SPACE root SPACE } . to SPACE raise_error ( Kuroko2 :: Workflow :: SyntaxError ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE <<- LITERALLITERALLITERALNEWLINE LITERALLITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect SPACE { SPACE root SPACE } . to SPACE raise_error ( Kuroko2 :: Workflow :: SyntaxError ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE <<- LITERALLITERALLITERALNEWLINE LITERALLITERALLITERALLITERALSPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect SPACE { SPACE root SPACE } . to SPACE raise_error ( Kuroko2 :: Workflow :: AssertionError ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow NEWLINE SPACE SPACE describe SPACE ShellScanner SPACE do NEWLINE SPACE SPACE SPACE SPACE subject ( LITERAL) SPACE { SPACE ShellScanner . new ( text ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( scanner . strip_comment ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE nil SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( scanner . strip_comment ) . to SPACE eq ( nil ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( scanner . strip_comment ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALLITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( scanner . strip_comment ) . to SPACE eq ( LITERALLITERALLITERALLITERALLITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALLITERALLITERALLITERALLITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( scanner . strip_comment ) . to SPACE eq ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow NEWLINE SPACE SPACE describe SPACE Notifier :: Hipchat SPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE name : SPACE job_name , SPACE LITERAL: SPACE hipchat_room ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job_instances . first NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Notifier :: Hipchat . new ( instance ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE double ( LITERAL, SPACE send : SPACE true ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE allow ( Kuroko2 . config . notifiers . hipchat ) . to SPACE receive ( LITERAL) . and_return ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE instance . logs . info ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE allow ( notifier . hipchat ) . to SPACE receive ( LITERAL) . with ( hipchat_room ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE and_return ( hipchat_room_object ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( hipchat_room_object ) . to SPACE receive ( LITERAL) SPACE do SPACE | _ , SPACE message , SPACE option | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( message ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( option [ LITERAL] ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_additional_text SPACE = SPACE additional_text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( hipchat_room_object ) . to SPACE receive ( LITERAL) SPACE do SPACE | _ , SPACE message , SPACE option | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( message ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( option [ LITERAL] ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . logs . warn ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . notify_cancellation SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( hipchat_room_object ) . to SPACE receive ( LITERAL) SPACE do SPACE | _ , SPACE message , SPACE option | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( message ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( option [ LITERAL] ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_cancellation NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( hipchat_room_object ) . to SPACE receive ( LITERAL) SPACE do SPACE | _ , SPACE message , SPACE option | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( message ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( option [ LITERAL] ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_critical NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_additional_text SPACE = SPACE additional_text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( hipchat_room_object ) . to SPACE receive ( LITERAL) SPACE do SPACE | _ , SPACE message , SPACE option | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( message ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( option [ LITERAL] ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( hipchat_room_object ) . to SPACE receive ( LITERAL) SPACE do SPACE | _ , SPACE message , SPACE option | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( message ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( option [ LITERAL] ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_finished NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( hipchat_room_object ) . to SPACE receive ( LITERAL) SPACE do SPACE | _ , SPACE message , SPACE option | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( message ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( option [ LITERAL] ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_retrying NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( hipchat_room_object ) . not_to SPACE receive ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_retrying NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( hipchat_room_object ) . to SPACE receive ( LITERAL) SPACE do SPACE | _ , SPACE message , SPACE option | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( message ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( option [ LITERAL] ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_skipping NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( hipchat_room_object ) . not_to SPACE receive ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_skipping NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( hipchat_room_object ) . to SPACE receive ( LITERAL) SPACE do SPACE | _ , SPACE message , SPACE option | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( message ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( option [ LITERAL] ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_launch NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( hipchat_room_object ) . not_to SPACE receive ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_launch NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( hipchat_room_object ) . to SPACE receive ( LITERAL) SPACE do SPACE | _ , SPACE message , SPACE option | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( message ) . to SPACE include ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( option [ LITERAL] ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_long_elapsed_time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow NEWLINE SPACE SPACE describe SPACE Notifier :: Mail SPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE name : SPACE job_name ) . job_instances . first NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Notifier :: Mail . new ( instance ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE instance . logs . info ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ActionMailer :: Base . deliveries . clear NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . notify_cancellation SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE notifier . notify_cancellation SPACE } . to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActionMailer :: Base . deliveries . size NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . from ( LITERAL) . to ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . notify_cancellation SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE notifier . notify_cancellation SPACE } . not_to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActionMailer :: Base . deliveries . size NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE notifier . notify_failure SPACE } . to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActionMailer :: Base . deliveries . size NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . from ( LITERAL) . to ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE notifier . notify_critical SPACE } . to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActionMailer :: Base . deliveries . size NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . from ( LITERAL) . to ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE notifier . notify_finished SPACE } . not_to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActionMailer :: Base . deliveries . size NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE notifier . notify_long_elapsed_time SPACE } . to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActionMailer :: Base . deliveries . size NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } . from ( LITERAL) . to ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE notifier . notify_retrying SPACE } . not_to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActionMailer :: Base . deliveries . size NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE notifier . notify_skipping SPACE } . not_to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActionMailer :: Base . deliveries . size NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE notifier . notify_launch SPACE } . not_to SPACE change SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ActionMailer :: Base . deliveries . size NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow NEWLINE SPACE SPACE describe SPACE Notifier :: Slack SPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE name : SPACE job_name , SPACE LITERAL: SPACE slack_channel ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job_instances . first NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Notifier :: Slack . new ( instance ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 . config . notifiers . slack . webhook_url SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE { SPACE LITERAL: SPACE LITERALSPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE instance . logs . info ( LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_request ( LITERAL, SPACE endpoint ) . with ( NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERAL: SPACE { SPACE LITERALLITERALLITERALSPACE = > SPACE LITERALSPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE ) . and_return ( response ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( notifier ) . to SPACE receive ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with ( hash_including ( LITERAL: SPACE slack_channel ) ) . and_call_original NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_additional_text SPACE = SPACE additional_text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( notifier ) . to SPACE receive ( LITERAL) . once . and_call_original NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . logs . warn ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . notify_cancellation SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( notifier ) . to SPACE receive ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with ( hash_including ( LITERAL: SPACE slack_channel ) ) . and_call_original NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_cancellation NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( notifier ) . to SPACE receive ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with ( hash_including ( LITERAL: SPACE slack_channel ) ) . and_call_original NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_critical NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_additional_text SPACE = SPACE additional_text NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( notifier ) . to SPACE receive ( LITERAL) . and_call_original NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( notifier ) . to SPACE receive ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with ( hash_including ( LITERAL: SPACE slack_channel ) ) . and_call_original NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_finished NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( notifier ) . to SPACE receive ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with ( hash_including ( LITERAL: SPACE slack_channel ) ) . and_call_original NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_retrying NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( notifier ) . not_to SPACE receive ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_retrying NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( notifier ) . to SPACE receive ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with ( hash_including ( LITERAL: SPACE slack_channel ) ) . and_call_original NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_skipping NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( notifier ) . not_to SPACE receive ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_skipping NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( notifier ) . to SPACE receive ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with ( hash_including ( LITERAL: SPACE slack_channel ) ) . and_call_original NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_launch NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( notifier ) . not_to SPACE receive ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_launch NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( notifier ) . to SPACE receive ( LITERAL) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE with ( hash_including ( LITERAL: SPACE slack_channel ) ) . and_call_original NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_long_elapsed_time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE { SPACE LITERAL: SPACE LITERALSPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 . logger ) . to SPACE receive ( LITERAL) . with ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow NEWLINE SPACE SPACE describe SPACE Notifier :: Webhook SPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE name : SPACE job_name , SPACE LITERAL: SPACE webhook_url ) . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE job_instances . first NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Notifier :: Webhook . new ( instance ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE { SPACE LITERAL: SPACE LITERALSPACE } SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE stub_request ( LITERAL, SPACE webhook_url ) . and_return ( response ) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE instance . logs . info ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub . with SPACE { SPACE | req | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( req . headers [ LITERAL] ) . to SPACE be_present NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( req . headers [ LITERAL] ) . to SPACE be_present NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( JSON . parse ( req . body ) ) . to SPACE include ( LITERALLITERALLITERAL= > LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( stub ) . to SPACE have_been_requested NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . logs . warn ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . notify_cancellation SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub . with SPACE { SPACE | req | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( JSON . parse ( req . body ) ) . to SPACE include ( LITERALLITERALLITERAL= > LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_cancellation NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( stub ) . to SPACE have_been_requested NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub . with SPACE { SPACE | req | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( JSON . parse ( req . body ) ) . to SPACE include ( LITERALLITERALLITERAL= > LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_critical NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( stub ) . to SPACE have_been_requested NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub . with SPACE { SPACE | req | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( JSON . parse ( req . body ) ) . to SPACE include ( LITERALLITERALLITERAL= > LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_finished NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( stub ) . to SPACE have_been_requested NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub . with SPACE { SPACE | req | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( JSON . parse ( req . body ) ) . to SPACE include ( LITERALLITERALLITERAL= > LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_retrying NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( stub ) . to SPACE have_been_requested NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_retrying NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( stub ) . not_to SPACE have_been_requested NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub . with SPACE { SPACE | req | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( JSON . parse ( req . body ) ) . to SPACE include ( LITERALLITERALLITERAL= > LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_skipping NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( stub ) . to SPACE have_been_requested NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_skipping NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( stub ) . not_to SPACE have_been_requested NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE true NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub . with SPACE { SPACE | req | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( JSON . parse ( req . body ) ) . to SPACE include ( LITERALLITERALLITERAL= > LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_launch NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( stub ) . to SPACE have_been_requested NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . job_definition . hipchat_notify_finished SPACE = SPACE false NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . save! NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_launch NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( stub ) . not_to SPACE have_been_requested NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub . with SPACE { SPACE | req | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( JSON . parse ( req . body ) ) . to SPACE include ( LITERALLITERALLITERAL= > LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_long_elapsed_time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( stub ) . to SPACE have_been_requested NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE { SPACE LITERAL: SPACE LITERALSPACE } SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE stub NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 . logger ) . to SPACE receive ( LITERAL) . with ( LITERALLITERALLITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE notifier . notify_failure NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( stub ) . to SPACE have_been_requested NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow::Task NEWLINE SPACE SPACE describe SPACE AutoSkipError SPACE do NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE build ( LITERAL, SPACE LITERAL: SPACE { } ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE subject SPACE { SPACE AutoSkipError . new ( node , SPACE token ) . execute SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context ) . to SPACE eq ( { SPACE LITERALSPACE = > SPACE true SPACE } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context ) . to SPACE eq ( { SPACE LITERALSPACE = > SPACE false SPACE } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context ) . to SPACE eq ( { SPACE LITERALSPACE = > SPACE false SPACE } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow::Task NEWLINE SPACE SPACE describe SPACE Env SPACE do NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE build ( LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE { SPACE LITERALSPACE = > SPACE { SPACE LITERALSPACE = > SPACE LITERALSPACE } SPACE } ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE Env . new ( node , SPACE token ) . execute SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject SPACE { SPACE token . context SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE eq ( { SPACE LITERALSPACE = > SPACE { SPACE LITERALSPACE = > SPACE LITERALSPACE } SPACE } ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE build ( LITERAL, SPACE LITERAL: SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE eq ( { } ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE eq ( { SPACE LITERALSPACE = > SPACE { SPACE LITERALSPACE = > SPACE LITERAL, SPACE LITERALSPACE = > SPACE LITERAL, SPACE LITERALSPACE = > SPACE LITERALSPACE } SPACE } ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE LITERALSPACE LITERALLITERALLITERALLITERALLITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE eq ( { SPACE LITERALSPACE = > SPACE { SPACE LITERALSPACE = > SPACE LITERAL, SPACE LITERALSPACE = > SPACE LITERAL, SPACE LITERALSPACE = > SPACE LITERALLITERALLITERAL, SPACE LITERALSPACE = > SPACE LITERALSPACE } SPACE } ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect SPACE { SPACE Env . new ( node , SPACE token ) . execute SPACE } . to SPACE raise_error ( Kuroko2 :: Workflow :: AssertionError ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow::Task NEWLINE SPACE SPACE describe SPACE Execute SPACE do NEWLINE SPACE SPACE SPACE SPACE subject SPACE { SPACE Execute . new ( node , SPACE token ) . execute SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE { SPACE LITERALSPACE = > SPACE { SPACE LITERALSPACE = > SPACE LITERALSPACE } SPACE } SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE shell ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE context , SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE instance ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Execution . take SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALLITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE definition ) . tap SPACE do SPACE | instance | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . tokens . destroy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE specify SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE is_expected . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Execution . all . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( execution . token ) . to SPACE eql SPACE token NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( execution . shell ) . to SPACE eq SPACE shell NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( execution . context [ LITERAL] ) . to SPACE eq SPACE context [ LITERAL] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE token ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE specify SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE is_expected . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Execution . all . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Log . all . count ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE around SPACE do SPACE | example | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Execute . new ( node , SPACE token ) . execute NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution SPACE = SPACE Kuroko2 :: Execution . of ( token ) . take NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE execution . update! ( LITERAL: SPACE pid ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE hostname , SPACE LITERAL: SPACE execution . id ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE LITERALSPACE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Timecop . travel ( LITERAL. minutes . since ) SPACE { SPACE example . run SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE Execute . new ( node , SPACE token ) . execute SPACE } . to SPACE change SPACE { SPACE Kuroko2 :: ProcessSignal . where ( LITERAL: SPACE execution . pid , SPACE LITERAL: SPACE hostname ) . count SPACE } . from ( LITERAL) . to ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE around SPACE do SPACE | example | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Execute . new ( node , SPACE token ) . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Execution . of ( token ) . take . update! ( LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Timecop . travel ( ( LITERAL. hours SPACE + SPACE LITERAL. second ) . since ) SPACE { SPACE example . run SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Workflow :: Notifier ) . to SPACE receive ( LITERAL) . with ( LITERAL, SPACE token . job_instance ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Execute . new ( node , SPACE token ) . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE is_expected . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Execute . new ( node , SPACE token ) . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context [ LITERAL] ) . to SPACE be_present NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE around SPACE do SPACE | example | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Execute . new ( node , SPACE token ) . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Execution . of ( token ) . take . update! ( LITERAL: SPACE LITERAL) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Timecop . travel ( ( LITERAL. hours SPACE + SPACE LITERAL. second ) . since ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE token . context [ LITERAL] SPACE = SPACE notified_time NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE example . run NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . current SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Workflow :: Notifier ) . not_to SPACE receive ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Execute . new ( node , SPACE token ) . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE is_expected . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Execute . new ( node , SPACE token ) . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context [ LITERAL] ) . to SPACE be_present NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE ( LITERAL. hours SPACE + SPACE LITERAL. second ) . ago SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Workflow :: Notifier ) . to SPACE receive ( LITERAL) . with ( LITERAL, SPACE token . job_instance ) NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Execute . new ( node , SPACE token ) . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE is_expected . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Execute . new ( node , SPACE token ) . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context [ LITERAL] ) . to SPACE be_present NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow::Task NEWLINE SPACE SPACE describe SPACE ExpectedTime SPACE do NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE build ( LITERAL, SPACE LITERAL: SPACE { } ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE subject SPACE { SPACE ExpectedTime . new ( node , SPACE token ) . execute SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context ) . to SPACE eq ( { SPACE LITERALSPACE = > SPACE LITERALSPACE } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context ) . to SPACE eq ( { SPACE LITERALSPACE = > SPACE LITERAL* LITERALSPACE } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context ) . to SPACE eq ( { SPACE LITERALSPACE = > SPACE LITERALSPACE } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context ) . to SPACE eq ( { } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect SPACE { SPACE subject SPACE } . to SPACE raise_error ( Kuroko2 :: Workflow :: AssertionError ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow::Task NEWLINE SPACE SPACE describe SPACE Fork SPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: ScriptParser . new ( token . script ) . parse . find ( token . path ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Token . create ( LITERAL: SPACE SecureRandom . uuid , SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE instance , SPACE LITERAL: SPACE <<- LITERALLITERALLITERAL) NEWLINE LITERALLITERALLITERALLITERALSPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE subject ( LITERAL) SPACE { SPACE Fork . new ( node , SPACE token ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE token . children SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( task . execute ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( children . size ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( children . first . script ) . to SPACE eq SPACE LITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( children . second . script ) . to SPACE eq SPACE LITERALLITERALLITERALLITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow::Task NEWLINE SPACE SPACE describe SPACE Queue SPACE do NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE subject SPACE { SPACE token . context [ LITERAL] SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE build ( LITERAL, SPACE LITERAL: SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Execution :: DEFAULT_QUEUE SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Kuroko2 :: Worker . create! ( LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE LITERAL, SPACE LITERAL: SPACE queue , SPACE LITERAL: SPACE true ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE Kuroko2 :: Workflow :: Task :: Queue . new ( node , SPACE token ) . execute SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE eq SPACE queue SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE queue ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE is_expected . to SPACE eq SPACE queue SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect SPACE { SPACE Kuroko2 :: Workflow :: Task :: Queue . new ( node , SPACE token ) . validate SPACE } . not_to SPACE raise_error SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect SPACE { SPACE Kuroko2 :: Workflow :: Task :: Queue . new ( node , SPACE token ) . validate SPACE } . not_to SPACE raise_error SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect SPACE { SPACE Kuroko2 :: Workflow :: Task :: Queue . new ( node , SPACE token ) . validate SPACE } . to SPACE raise_error ( Kuroko2 :: Workflow :: AssertionError ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect SPACE { SPACE Kuroko2 :: Workflow :: Task :: Queue . new ( node , SPACE token ) . validate SPACE } . to SPACE raise_error ( Kuroko2 :: Workflow :: AssertionError ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow::Task NEWLINE SPACE SPACE describe SPACE RailsEnv SPACE do NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE rails_env ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE build ( LITERAL, SPACE LITERAL: SPACE { } ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE subject SPACE { SPACE RailsEnv . new ( node , SPACE token ) . execute SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALLITERALLITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE subject NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context ) . to SPACE eq ( { SPACE LITERALSPACE = > SPACE LITERALSPACE } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect { SPACE subject SPACE } . to SPACE raise_error ( Kuroko2 :: Workflow :: AssertionError ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect { SPACE subject SPACE } . to SPACE raise_error ( Kuroko2 :: Workflow :: AssertionError ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow::Task NEWLINE SPACE SPACE describe SPACE Queue SPACE do NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE around SPACE do SPACE | example | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Timecop . freeze ( Time . at ( time ) ) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE example . run NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE { SPACE Sleep . new ( node , SPACE token ) . execute SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE build ( LITERAL, SPACE LITERAL: SPACE LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE seconds . to_s ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE { SPACE expect ( token . context [ LITERAL] ) . to SPACE eq SPACE ( time SPACE + SPACE seconds ) SPACE } NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow::Task NEWLINE SPACE SPACE describe SPACE SubProcess SPACE do NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE definition ) . tap SPACE do SPACE | instance | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . tokens . first . destroy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE sub_definition . id . to_s ) SPACE } NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE instance ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE sub_definition . job_instances . first SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE subject ( LITERAL) SPACE { SPACE SubProcess . new ( node , SPACE token ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( task . execute ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Kuroko2 :: Token . count ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( task . execute ) . to SPACE eq SPACE LITERALNEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE sub_instance . touch ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( task . execute ) . to SPACE eq SPACE LITERALNEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
require SPACE LITERALNEWLINE NEWLINE module SPACE Kuroko2::Workflow::Task NEWLINE SPACE SPACE describe SPACE Wait SPACE do NEWLINE SPACE SPACE SPACE SPACE describe SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALLITERALwait_definition . id LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Kuroko2 :: Workflow :: Node . new ( LITERAL, SPACE option ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE Time . zone . now SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERALoption LITERALLITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE create ( LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE Time . current ) . tap SPACE do SPACE | instance | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . tokens . destroy NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE build ( LITERAL, SPACE LITERAL: SPACE definition , SPACE LITERAL: SPACE instance ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Wait . new ( node , SPACE token ) . execute ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context [ LITERAL] ) . to SPACE eq ( { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE SPACE = > SPACE LITERAL. minutes . to_i SPACE / SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE [ { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE wait_definition . id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE now . beginning_of_day . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE now . end_of_day . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE false , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE before SPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Wait . new ( node , SPACE token ) . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Wait . new ( node , SPACE token ) . execute ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALLITERALdefinition . id LITERALLITERALLITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Wait . new ( node , SPACE token ) . execute ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Wait . new ( node , SPACE token ) . execute ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE instance . touch ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Wait . new ( node , SPACE token ) . execute ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE definition ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALLITERALdefinition . id LITERALLITERALLITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE around SPACE do SPACE | example | NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Wait . new ( node , SPACE token ) . execute NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE Timecop . travel ( ( LITERAL. minutes SPACE + SPACE LITERAL. second ) . since ) SPACE { SPACE example . run SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context [ LITERAL] [ LITERALLITERALLITERAL] ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Wait . new ( node , SPACE token ) . execute ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALLITERALwait_definition1 . id LITERALLITERALLITERALwait_definition2 . id LITERALLITERALLITERALSPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERAL) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE LITERALLITERALLITERAL) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE wait_definition1 ) SPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE create ( LITERAL, SPACE LITERAL: SPACE wait_definition2 ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Wait . new ( node , SPACE token ) . execute ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( token . context [ LITERAL] ) . to SPACE eq ( { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE SPACE = > SPACE LITERAL. minutes . to_i SPACE / SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE [ NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE wait_definition1 . id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE now . beginning_of_day . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE now . end_of_day . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE false , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE { NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE wait_definition2 . id , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE LITERAL, NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE now . beginning_of_day . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE now . end_of_day . to_s , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE LITERALLITERALLITERALSPACE = > SPACE false , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } , NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE ] NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE } ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Wait . new ( node , SPACE token ) . execute ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Wait . new ( node , SPACE token ) . execute ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wait_instance1 . touch ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Wait . new ( node , SPACE token ) . execute ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Wait . new ( node , SPACE token ) . execute ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Wait . new ( node , SPACE token ) . execute ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE wait_instance2 . touch ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect ( Wait . new ( node , SPACE token ) . execute ) . to SPACE eq ( LITERAL) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE build ( LITERAL, SPACE LITERAL: SPACE build ( LITERAL, SPACE LITERAL: SPACE Time . current ) ) SPACE } NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect { SPACE Wait . new ( node , SPACE token ) . execute SPACE } . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to SPACE raise_error ( Kuroko2 :: Workflow :: AssertionError ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALLITERALwait_definition . id LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect { SPACE Wait . new ( node , SPACE token ) . execute SPACE } . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to SPACE raise_error ( Kuroko2 :: Workflow :: AssertionError ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect { SPACE Wait . new ( node , SPACE token ) . execute SPACE } . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to SPACE raise_error ( Kuroko2 :: Workflow :: AssertionError ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE context SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE let ( LITERAL) SPACE { SPACE LITERALLITERALwait_definition . id LITERALLITERALLITERALSPACE } NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE it SPACE LITERALSPACE do NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE expect { SPACE Wait . new ( node , SPACE token ) . execute SPACE } . NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE to SPACE raise_error ( Kuroko2 :: Workflow :: AssertionError ) NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE SPACE SPACE end NEWLINE SPACE SPACE end NEWLINE end NEWLINE 
